/*
* kuiactions.h -- Declaration of class KUIActions.
* Generated by newclass on Thu May  6 01:08:20 EST 1999.
*/
#ifndef SSK_KUIACTIONS_H
#define SSK_KUIACTIONS_H

#include<qdict.h>
#include<qobject.h>

#include<kaction.h>

class KConfigBase;
class QAccel;
class QIconSet;
class QWidget;

/**
* Unified UI Action Manager.
*
* This class makes it easy to maintain user interface elements such as
* menus, toolbar buttons and accelerators that trigger well-defined user
* interface functions. You can define "actions" which have logical text
* names and connect to one or more signals or slots, and then refer to
* the action by name.
* 
* You can then bind the user interface elements to the logical action and
* then refer to the elements as a group; for example, changing the
* accelerator for an action will cause all associated menu items to reflect
* the change immediately, and enabling/disabling the action will
* enable/disable all associated user elements.
*
* Since the actions are named with a text string, this makes it easy to
* allow easy construction and runtime customization of toolbars, icons,
* menus, accelerators etc.
*
* It is safe to delete menus or buttons connected to actions; this class
* will handle it automatically.
*
* TODO: Example.
*
* @author Sirtaj Singh Kang (taj@kde.org)
* @version $Id$
*/
class KUIActions : public QObject
{
	Q_OBJECT;

private:
	typedef QDict<KAction> ActionDict;
		
	ActionDict	*_actions;

	QWidget		*_accelContext;
	QAccel		*_accel;

public:
	/**
	* KUIActions Constructor. The widget passed as parent cannot be
	* null, and all accelerators will be created in the parent's
	* context.
	*/
	KUIActions( QWidget *parent );

	/**
	* KUIActions Destructor
	*/
	virtual ~KUIActions();

	/**
	 * Create a new action.
	 */
	KAction *newAction( const char *name, 
			QObject *receiver = 0,
			const char *member = 0,
			int accel = 0);

	
	/**
	 * Create a new action, with localized name.
	 * @param i18nName The localized name, for user display purposes.
	 */
	KAction *newAction( const char *name,
			const QString& i18nName,
			QObject *receiver = 0,
			const char *member = 0,
			int accel = 0 );

	/**
	 * Add an externally created action to the list. This will be
	 * deleted by the @ref KUIActions class, so the sender loses
	 * ownership of the object.
	 * @return A pointer to the action, or 0 on error.
	 */
	KAction *newAction( KAction *action );

	/**
	 * Delete the named action.
	 * @return true on success, false on error.
	 */
	bool deleteAction( const char *action );

	/**
	 * Check the status of the action. This just calls 
	 * @ref KAction::enabled.
	 * @return true if the action is enabled, false on disabled or
	 * 	if the action was not found.
	 */
	bool enabled( const char *action );
	
	/**
	 * Enable/disable the action. This just calls @ref
	 * KAction::setEnabled.
	 */
	void setEnabled( const char *action, bool enabled = true );

	/**
	 * Access the action object.
	 * @return a pointer to the named action object, or 0 on not found.
	 */
	KAction *action( const char *a )
		{ return _actions->find( a ); }

	/**
	 * Same as above, but returns a const pointer.
	 */
	const KAction *action( const char *a ) const
		{ return _actions->find( a ); }

	/**
	 * Iterates over the action dictionary.
	 */
	typedef QDictIterator<KAction> KActionIterator;

	/**
	 * @return an iterator for the action dictionary.
	 */
	KActionIterator iterator() 
		{ return KActionIterator( *_actions ); }

	int setIconSet( const char *action, const QIconSet& iconset );
	const QIconSet& iconset( const char *action ) const;
	
	int setAccel( const char *action, int accel );
	int accel( const char *action ) const;

#if 0
	virtual void writeConfig( KConfigBase& );
	virtual void readConfig( const KConfigBase& );
#endif

protected slots:

	/**
	 * Called when the accelerator for an action changes. 
	 */
	virtual void setAccel( KAction *action, int accel );
	virtual void removeAccel( KAction * );
	
private:

	KUIActions& operator=( const KUIActions& );
	KUIActions( const KUIActions& );
};

#endif // SSK_KUIACTIONS_H
