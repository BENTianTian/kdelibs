/*
* kuseraction.h -- Declaration of class KAction.
* Generated by newclass on Sat May  1 14:43:58 EST 1999.
*/
#ifndef SSK_KACTION_H
#define SSK_KACTION_H

#include<qstring.h>
#include<qwidget.h>
#include<qlist.h>

class QIconSet;
class KConfigBase;
class QPopupMenu;

/**
* A named user action.
* @author Sirtaj Singh Kang (taj@kde.org)
* @version $Id$
*/
class KAction : public QObject
{
	Q_OBJECT

public:

	typedef QWidget		Trigger;
	typedef QPopupMenu	MenuType;

private:

	enum TriggerType { Menu, Button };
	
	/**
	 * The type of the trigger.
	 */
	class TriggerInfo {
	public:

				
		int id; // unused if type == Button
		TriggerType type;
		
		union {
			MenuType	*menu;
			Trigger		*trigger;
		} item;

		TriggerInfo( MenuType *menu, int i ) 
				{ type = Menu; id = i; item.menu = menu; }
		TriggerInfo( Trigger *t )
				{ type = Button; id = 0; item.trigger = t; }
	};

	typedef QList<TriggerInfo> Triggers;

	QString	_name;
	QString _localName;
	QString _whatsThis;
	QString _toolTip;

	QString	 _iconPath;

	QIconSet *_icon;
	int _accel;
	int _accelId;

	Triggers	*_triggers;
	bool		_autoUpdate;

	QObject		*_receiver;
	QString		_member;

	
	/**
	 * Conditional update signal.
	 */
	void signalUpdate() { if ( _autoUpdate ) updated(); }
	
public:
	/**
	* KAction Constructor.
	*/
	KAction( const char *desc, 
			const QString& localDesc,
			QObject *receiver, const char *member );

	/**
	* KAction Destructor.
	*/
	virtual ~KAction();

	const QIconSet& icon() const;

	/**
	 * Load the icon using the global @ref KIconLoader.
	 * @param iconpath The icon filename.
	 */
	void setIcon( const QString& iconpath );

	QString iconPath() const		{ return _iconPath; }


	QString whatsThis() const		{ return _whatsThis; }
	void setWhatsThis( const QString& whatsthis )
			{ _whatsThis = whatsthis; signalUpdate(); }



	QString toolTip() const			{ return _toolTip; }
	void setToolTip( const QString& tip )	
		{ _toolTip = tip; signalUpdate(); }

	/**
	 * @return the name of this action. 
	 */
	const QString& desc() const 		{ return _name; }
	const QString& localDesc() const	{ return _localName; }
	void setLocalDesc( const QString& name )
		{ _localName = name; signalUpdate(); }

	const QObject *receiver()	{ return _receiver; }
	const QString& member()		{ return _member; }
	
	/**
	 * Set the accelerator for associated menu items.
	 * It is the responsibility for the parent to set the accelerator
	 * for itself widget (ie global accelerators are NOT set).
	 */
	void setAccel( int accel );
	int accel() const { return _accel; }

	void addMenuItem( MenuType *menu, int id );

	void addTrigger( Trigger *uitrigger,
			const char *member = SIGNAL(clicked()),
			bool allowDisable = true );
	
	void removeTrigger( Trigger *uitrigger );
	void removeMenu( MenuType *menu );
	void removeMenuItem( MenuType *menu, int id );
	
	void setAutoUpdate( bool updates = true ) { _autoUpdate = updates; }
	bool autoUpdate() const { return _autoUpdate; }
	
	/**
	 * Enable/disable the signal and all associated trigger objects.
	 */
	void setEnabled( bool enabled = true );
	bool enabled() const { return !signalsBlocked(); }

	/**
	 * Updates any connected UI elements to reflect any changes in
	 * configuration.
	 */

	virtual void writeConfig( KConfigBase& );
	virtual bool readConfig( const KConfigBase& );

	/**
	 * Used by KUIAction to look up this action's accel id in its
	 * accelerator table.
	 * @internal
	 */
	int accelId() const { return _accelId; }

	/**
	 * Used by KUIAction to store this action's accel id in its
	 * accelerator table.
	 * @internal
	 */
	void setAccelId( int id ) { _accelId = id; }

	static uint stringToKey( const QString& keystr );
	static QString keyToString( uint key, bool i18n = false );

signals:

	void activate();
	
	/**
	 * Emitted when the user information (icon, tooltip, WhatsThis ) has
	 * been changed. Not raised if auto updates are disabled.
	 * @see setAutoUpdate
	 */
	void updated();

	/**
	 * Emitted when the action expects the parent to set a widget-level
	 * accelerator.
	 */
	void globalAccel( KAction *, int accel );
	
	/**
	 * Emitted when the action expects the parent to remove any
	 * widget-level accelerators that may exist for this action.
	 */
	void removeAccel( KAction * );

private slots:
	/**
	 * Deletes the sender from the trigger list.
	 */
	void senderDead();

	/**
	 * Deletes the sender from the menu list.
	 */
	void menuDead();

	/**
	 * This is connected to all handled menus, and is called on the
	 * menu's activated signal.
	 */
	void menuActivated( int id );

};

#endif // SSK_KACTION_H
