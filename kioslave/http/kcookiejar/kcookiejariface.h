/*
 * This file was generated by dbusidl2cpp version 0.3
 * when processing input file org.kde.KCookieServer.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KCOOKIEJARIFACE_H_198201146415343
#define KCOOKIEJARIFACE_H_198201146415343

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

// HAND_EDIT:
Q_DECLARE_METATYPE(QList<int>)

/*
 * Proxy class for interface org.kde.KCookieServer
 */
class OrgKdeKCookieServerInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KCookieServer"; }

public:
    explicit OrgKdeKCookieServerInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeKCookieServerInterface();

public slots: // METHODS
    inline QDBusReply<void> addCookies(const QString &url, const QByteArray &cookieHeader, int windowId)
    {
        return call(QLatin1String("addCookies.sayi"), url, cookieHeader, windowId);
    }

    inline QDBusReply<void> addDOMCookies(const QString &url, const QByteArray &cookieHeader, int windowId)
    {
        return call(QLatin1String("addDOMCookies.sayi"), url, cookieHeader, windowId);
    }

    inline QDBusReply<void> deleteAllCookies()
    {
        return call(QLatin1String("deleteAllCookies"));
    }

    inline QDBusReply<void> deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name)
    {
        return call(QLatin1String("deleteCookie.ssss"), domain, fqdn, path, name);
    }

    inline QDBusReply<void> deleteCookiesFromDomain(const QString &domain)
    {
        return call(QLatin1String("deleteCookiesFromDomain.s"), domain);
    }

    inline QDBusReply<void> deleteSessionCookies(int windowId)
    {
        return call(QLatin1String("deleteSessionCookies.i"), windowId);
    }

    inline QDBusReply<void> deleteSessionCookiesFor(const QString &fqdn, int windowId)
    {
        return call(QLatin1String("deleteSessionCookiesFor.si"), fqdn, windowId);
    }

    inline QDBusReply<QStringList> findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name)
    {
        return call(QLatin1String("findCookies.aissss"), fields, domain, fqdn, path, name);
    }

    inline QDBusReply<QString> findCookies(const QString &url, int windowId)
    {
        return call(QLatin1String("findCookies.si"), url, windowId);
    }

    inline QDBusReply<QString> findDOMCookies(const QString &url, int windowId)
    {
        return call(QLatin1String("findDOMCookies.si"), url, windowId);
    }

    inline QDBusReply<QStringList> findDomains()
    {
        return call(QLatin1String("findDomains"));
    }

    inline QDBusReply<QString> getDomainAdvice(const QString &url)
    {
        return call(QLatin1String("getDomainAdvice.s"), url);
    }

    inline QDBusReply<void> reloadPolicy()
    {
        return call(QLatin1String("reloadPolicy"));
    }

    inline QDBusReply<void> setDomainAdvice(const QString &url, const QString &advice)
    {
        return call(QLatin1String("setDomainAdvice.ss"), url, advice);
    }

    inline QDBusReply<void> shutdown()
    {
        return call(QLatin1String("shutdown"));
    }

signals: // SIGNALS
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKCookieServerInterface KCookieServer;
  }
}
#endif
