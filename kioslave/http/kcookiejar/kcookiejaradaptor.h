/*
 * This file was generated by dbusidl2cpp version 0.3
 * when processing input file org.kde.KCookieServer.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#ifndef KCOOKIEJARADAPTOR_H_212201146417571
#define KCOOKIEJARADAPTOR_H_212201146417571

#include <QtCore/QObject>
#include <dbus/qdbus.h>
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface org.kde.KCookieServer
 */
class KCookieServerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.kde.KCookieServer")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.kde.KCookieServer\" >"
"    <method name=\"findCookies\" >"
"      <arg direction=\"in\" type=\"s\" name=\"url\" />"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\" />"
"      <arg direction=\"out\" type=\"s\" name=\"cookies\" />"
"    </method>"
"    <method name=\"findDomains\" >"
"      <arg direction=\"out\" type=\"as\" name=\"domains\" />"
"    </method>"
"    <method name=\"findCookies\" >"
"      <arg direction=\"in\" type=\"ai\" name=\"fields\" />"
"      <arg direction=\"in\" type=\"s\" name=\"domain\" />"
"      <arg direction=\"in\" type=\"s\" name=\"fqdn\" />"
"      <arg direction=\"in\" type=\"s\" name=\"path\" />"
"      <arg direction=\"in\" type=\"s\" name=\"name\" />"
"      <arg direction=\"out\" type=\"as\" name=\"cookies\" />"
"    </method>"
"    <method name=\"findDOMCookies\" >"
"      <arg direction=\"in\" type=\"s\" name=\"url\" />"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\" />"
"      <arg direction=\"out\" type=\"s\" name=\"cookies\" />"
"    </method>"
"    <method name=\"addCookies\" >"
"      <arg direction=\"in\" type=\"s\" name=\"url\" />"
"      <arg direction=\"in\" type=\"ay\" name=\"cookieHeader\" />"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\" />"
"    </method>"
"    <method name=\"deleteCookie\" >"
"      <arg direction=\"in\" type=\"s\" name=\"domain\" />"
"      <arg direction=\"in\" type=\"s\" name=\"fqdn\" />"
"      <arg direction=\"in\" type=\"s\" name=\"path\" />"
"      <arg direction=\"in\" type=\"s\" name=\"name\" />"
"    </method>"
"    <method name=\"deleteCookiesFromDomain\" >"
"      <arg direction=\"in\" type=\"s\" name=\"domain\" />"
"    </method>"
"    <method name=\"deleteSessionCookies\" >"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\" />"
"    </method>"
"    <method name=\"deleteSessionCookiesFor\" >"
"      <arg direction=\"in\" type=\"s\" name=\"fqdn\" />"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\" />"
"    </method>"
"    <method name=\"deleteAllCookies\" />"
"    <method name=\"addDOMCookies\" >"
"      <arg direction=\"in\" type=\"s\" name=\"url\" />"
"      <arg direction=\"in\" type=\"ay\" name=\"cookieHeader\" />"
"      <arg direction=\"in\" type=\"x\" name=\"windowId\" />"
"    </method>"
"    <method name=\"setDomainAdvice\" >"
"      <arg direction=\"in\" type=\"s\" name=\"url\" />"
"      <arg direction=\"in\" type=\"s\" name=\"advice\" />"
"    </method>"
"    <method name=\"getDomainAdvice\" >"
"      <arg direction=\"in\" type=\"s\" name=\"url\" />"
"      <arg direction=\"out\" type=\"s\" name=\"advice\" />"
"    </method>"
"    <method name=\"reloadPolicy\" />"
"    <method name=\"shutdown\" />"
"  </interface>"
        "")
public:
    KCookieServerAdaptor(QObject *parent);
    virtual ~KCookieServerAdaptor();

public: // PROPERTIES
public slots: // METHODS
    void addCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId);
    void addDOMCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId);
    void deleteAllCookies();
    void deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name);
    void deleteCookiesFromDomain(const QString &domain);
    void deleteSessionCookies(qlonglong windowId);
    void deleteSessionCookiesFor(const QString &fqdn, qlonglong windowId);
    QStringList findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name);
    QString findCookies(const QString &url, qlonglong windowId, const QDBusMessage &msg);
    QString findDOMCookies(const QString &url, qlonglong windowId);
    QStringList findDomains();
    QString getDomainAdvice(const QString &url);
    void reloadPolicy();
    void setDomainAdvice(const QString &url, const QString &advice);
    void shutdown();
signals: // SIGNALS
};

#endif
