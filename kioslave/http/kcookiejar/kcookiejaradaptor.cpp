/*
 * This file was generated by dbusidl2cpp version 0.3
 * when processing input file org.kde.KCookieServer.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "kcookiejaradaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KCookieServerAdaptor
 */

KCookieServerAdaptor::KCookieServerAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KCookieServerAdaptor::~KCookieServerAdaptor()
{
    // destructor
}

void KCookieServerAdaptor::addCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.addCookies
    QMetaObject::invokeMethod(object(), "addCookies", Q_ARG(QString, url), Q_ARG(QByteArray, cookieHeader), Q_ARG(qlonglong, windowId));

    // Alternative:
    //static_cast<YourObjectType *>(object())->addCookies(url, cookieHeader, windowId);
}

void KCookieServerAdaptor::addDOMCookies(const QString &url, const QByteArray &cookieHeader, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.addDOMCookies
    QMetaObject::invokeMethod(object(), "addDOMCookies", Q_ARG(QString, url), Q_ARG(QByteArray, cookieHeader), Q_ARG(qlonglong, windowId));

    // Alternative:
    //static_cast<YourObjectType *>(object())->addDOMCookies(url, cookieHeader, windowId);
}

void KCookieServerAdaptor::deleteAllCookies()
{
    // handle method call org.kde.KCookieServer.deleteAllCookies
    QMetaObject::invokeMethod(object(), "deleteAllCookies");

    // Alternative:
    //static_cast<YourObjectType *>(object())->deleteAllCookies();
}

void KCookieServerAdaptor::deleteCookie(const QString &domain, const QString &fqdn, const QString &path, const QString &name)
{
    // handle method call org.kde.KCookieServer.deleteCookie
    QMetaObject::invokeMethod(object(), "deleteCookie", Q_ARG(QString, domain), Q_ARG(QString, fqdn), Q_ARG(QString, path), Q_ARG(QString, name));

    // Alternative:
    //static_cast<YourObjectType *>(object())->deleteCookie(domain, fqdn, path, name);
}

void KCookieServerAdaptor::deleteCookiesFromDomain(const QString &domain)
{
    // handle method call org.kde.KCookieServer.deleteCookiesFromDomain
    QMetaObject::invokeMethod(object(), "deleteCookiesFromDomain", Q_ARG(QString, domain));

    // Alternative:
    //static_cast<YourObjectType *>(object())->deleteCookiesFromDomain(domain);
}

void KCookieServerAdaptor::deleteSessionCookies(qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.deleteSessionCookies
    QMetaObject::invokeMethod(object(), "deleteSessionCookies", Q_ARG(qlonglong, windowId));

    // Alternative:
    //static_cast<YourObjectType *>(object())->deleteSessionCookies(windowId);
}

void KCookieServerAdaptor::deleteSessionCookiesFor(const QString &fqdn, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.deleteSessionCookiesFor
    QMetaObject::invokeMethod(object(), "deleteSessionCookiesFor", Q_ARG(QString, fqdn), Q_ARG(qlonglong, windowId));

    // Alternative:
    //static_cast<YourObjectType *>(object())->deleteSessionCookiesFor(fqdn, windowId);
}

QStringList KCookieServerAdaptor::findCookies(const QList<int> &fields, const QString &domain, const QString &fqdn, const QString &path, const QString &name)
{
    // handle method call org.kde.KCookieServer.findCookies
    QStringList cookies;
    QMetaObject::invokeMethod(object(), "findCookies", Q_RETURN_ARG(QStringList, cookies), Q_ARG(QList<int>, fields), Q_ARG(QString, domain), Q_ARG(QString, fqdn), Q_ARG(QString, path), Q_ARG(QString, name));

    // Alternative:
    //cookies = static_cast<YourObjectType *>(object())->findCookies(fields, domain, fqdn, path, name);
    return cookies;
}

QString KCookieServerAdaptor::findCookies(const QString &url, qlonglong windowId, const QDBusMessage &msg)
{
    // handle method call org.kde.KCookieServer.findCookies
    QString cookies;
    QMetaObject::invokeMethod(object(), "findCookies", Q_RETURN_ARG(QString, cookies), Q_ARG(QString, url), Q_ARG(qlonglong, windowId), Q_ARG(QDBusMessage, msg));

    // Alternative:
    //cookies = static_cast<YourObjectType *>(object())->findCookies(url, windowId);
    return cookies;
}

QString KCookieServerAdaptor::findDOMCookies(const QString &url, qlonglong windowId)
{
    // handle method call org.kde.KCookieServer.findDOMCookies
    QString cookies;
    QMetaObject::invokeMethod(object(), "findDOMCookies", Q_RETURN_ARG(QString, cookies), Q_ARG(QString, url), Q_ARG(qlonglong, windowId));

    // Alternative:
    //cookies = static_cast<YourObjectType *>(object())->findDOMCookies(url, windowId);
    return cookies;
}

QStringList KCookieServerAdaptor::findDomains()
{
    // handle method call org.kde.KCookieServer.findDomains
    QStringList domains;
    QMetaObject::invokeMethod(object(), "findDomains", Q_RETURN_ARG(QStringList, domains));

    // Alternative:
    //domains = static_cast<YourObjectType *>(object())->findDomains();
    return domains;
}

QString KCookieServerAdaptor::getDomainAdvice(const QString &url)
{
    // handle method call org.kde.KCookieServer.getDomainAdvice
    QString advice;
    QMetaObject::invokeMethod(object(), "getDomainAdvice", Q_RETURN_ARG(QString, advice), Q_ARG(QString, url));

    // Alternative:
    //advice = static_cast<YourObjectType *>(object())->getDomainAdvice(url);
    return advice;
}

void KCookieServerAdaptor::reloadPolicy()
{
    // handle method call org.kde.KCookieServer.reloadPolicy
    QMetaObject::invokeMethod(object(), "reloadPolicy");

    // Alternative:
    //static_cast<YourObjectType *>(object())->reloadPolicy();
}

void KCookieServerAdaptor::setDomainAdvice(const QString &url, const QString &advice)
{
    // handle method call org.kde.KCookieServer.setDomainAdvice
    QMetaObject::invokeMethod(object(), "setDomainAdvice", Q_ARG(QString, url), Q_ARG(QString, advice));

    // Alternative:
    //static_cast<YourObjectType *>(object())->setDomainAdvice(url, advice);
}

void KCookieServerAdaptor::shutdown()
{
    // handle method call org.kde.KCookieServer.shutdown
    QMetaObject::invokeMethod(object(), "shutdown");

    // Alternative:
    //static_cast<YourObjectType *>(object())->shutdown();
}

#include "kcookiejaradaptor.moc"

