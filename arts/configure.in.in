dnl aRts specific configure tests
dnl
dnl Check for libaudioio (which can be used to get solaris audio support)
AC_DEFUN(AC_CHECK_LIBAUDIOIO,
[
  ac_ldflags_save="$LDFLAGS"
  ac_CPPFLAGS_save="$CPPFLAGS"
  LDFLAGS="$all_libraries $LDFLAGS"
  CPPFLAGS="$CPPFLAGS $all_includes"
  arts_libaudioio_found=no
  AC_LANG_SAVE
  AC_LANG_C
  AC_CHECK_HEADER(libaudioio.h,
  [
    AC_CHECK_LIB(audioio,AudioIOGetVersion,[
      dnl LDFLAGS in case it's in KDEDIR/lib
      LIBAUDIOIO="$LDFLAGS -laudioio"
      AC_DEFINE(HAVE_LIBAUDIOIO, 1,
        [Define if you have libaudioIO (required if you want to have libaudioio support)])
      arts_libaudioio_found=yes
    ])
  ])
  AC_SUBST(LIBAUDIOIO)
  AC_LANG_RESTORE
  CPPFLAGS="$ac_CPPFLAGS_save"
  LDFLAGS="$ac_ldflags_save"
])

dnl libaudiofile is used for loading wave files
AC_DEFUN(AC_CHECK_LIBAUDIOFILE,
[
  ac_ldflags_save="$LDFLAGS"
  ac_CPPFLAGS_save="$CPPFLAGS"
  LDFLAGS="$all_libraries $LDFLAGS"
  CPPFLAGS="$CPPFLAGS $all_includes"
  arts_audiolib_found=no
  dnl WAV reading
  AC_LANG_SAVE
  AC_LANG_C
  AC_CHECK_HEADER(audiofile.h,
  [
    KDE_CHECK_LIB(audiofile,afOpenFile,[
      dnl LDFLAGS in case it's in KDEDIR/lib
      LIBAUDIOFILE="$LDFLAGS -laudiofile"
      AC_DEFINE(HAVE_LIBAUDIOFILE, 1,
        [Define if you have libaudiofile (required for playing wavs with aRts)])
      arts_audiolib_found=yes
    ], , -lm)
  ])
  AM_CONDITIONAL(HAVE_WAVSUPPORT,  test "x$arts_audiolib_found" = "xyes")
  AC_SUBST(LIBAUDIOFILE)
  AC_LANG_RESTORE
  CPPFLAGS="$ac_CPPFLAGS_save"
  LDFLAGS="$ac_ldflags_save"
])

dnl Posix realtime scheduling - this is helpful if you want arts to run with
dnl higher priority than everthing else

AC_DEFUN(AC_CHECK_REALTIME_SCHED,
[
AC_MSG_CHECKING([for posix realtime scheduling support])
AC_CACHE_VAL(ac_cv_realtime_sched,
[
AC_TRY_LINK([
#include <sched.h>
],
[
sched_getscheduler(0);
],
ac_cv_realtime_sched=yes,
ac_cv_realtime_sched=no)
])
AC_MSG_RESULT($ac_cv_realtime_sched)
if eval "test \"`echo `$ac_cv_realtime_sched\" = yes"; then
  AC_DEFINE(HAVE_REALTIME_SCHED,1,
        [Define if your system supports realtime scheduling])
fi
])

dnl Type of the ioctl function test - after some tries, it seems that this
dnl not required for Linux vs. FreeBSD (for which this test was written), and
dnl that only the Linux documentation claims that it has an "int" as second
dnl argument. But maybe there will pop up systems for which the signature
dnl differs, later.

AC_DEFUN(AC_CHECK_IOCTL_TYPE,
[
  AC_MSG_CHECKING([ioctl type])
  AC_CACHE_VAL(ac_cv_ioctl_type,
  [
    AC_LANG_SAVE
    AC_LANG_C

    AC_TRY_COMPILE(
    [
      #include <sys/ioctl.h>
	  int ioctl(int d, int request,...);
    ],
    [
    ],
	ac_cv_ioctl_type=1)
    AC_TRY_COMPILE(
    [
      #include <sys/ioctl.h>
	  int ioctl(int d, unsigned long request,...);
    ],
    [
    ],
	ac_cv_ioctl_type=2)
    AC_TRY_COMPILE(
    [
      #include <sys/ioctl.h>
	  int ioctl(int d, unsigned long int request,...);
    ],
    [
    ],
	ac_cv_ioctl_type=3)
     AC_LANG_RESTORE
  ])
  AC_MSG_RESULT($ac_cv_ioctl_type)
  

if test $ac_cv_ioctl_type = 1; then
  AC_DEFINE(HAVE_IOCTL_INT_INT_DOTS,1,
	      [Define if ioctl is declared as int ioctl(int d, int request,...)])
fi
if test $ac_cv_ioctl_type = 2; then
  AC_DEFINE(HAVE_IOCTL_INT_ULONG_DOTS,2,
	      [Define if ioctl is declared as int ioctl(int d, unsigned long request,...)])
fi
if test $ac_cv_ioctl_type = 3; then
  AC_DEFINE(HAVE_IOCTL_INT_ULONGINT_DOTS,3,
	      [Define if ioctl is declared as int ioctl(int d, unsigned long int request,...)])
fi
])

dnl check whether we can do rouding using asm optimization

AC_DEFUN(AC_CHECK_X86_FLOAT_INT,
[
AC_MSG_CHECKING([for x86 float to int conversions])
AC_CACHE_VAL(ac_cv_x86_float_int,
[
AC_TRY_LINK([
static inline long QRound (float inval)
{
  long ret;
  asm ("fistpl %0" : "=m" (ret) : "t" (inval) : "st");
  return ret;
}
],
[
long i = QRound(41.93);  /* should be 42 */
],
ac_cv_x86_float_int=yes,
ac_cv_x86_float_int=no)
])
AC_MSG_RESULT($ac_cv_x86_float_int)
if eval "test \"`echo `$ac_cv_x86_float_int\" = yes"; then
  AC_DEFINE(HAVE_X86_FLOAT_INT,1,
        [Define if you want to use optimized x86 float to int conversion code])
fi
])

dnl check whether we should try to emulate stdio fopen/fclose via
dnl glibc facilities (this *really* depends on glibc internals)

AC_DEFUN(AC_CHECK_ARTSDSP_STDIO_EMU,
[
AC_MSG_CHECKING([for stdio emulation in artsdsp])
AC_CACHE_VAL(ac_cv_artsdsp_stdio_emu,
[
AC_LANG_SAVE
AC_LANG_C
AC_TRY_LINK([
#define _GNU_SOURCE
#include <stdio.h>
],
[
	cookie_io_functions_t fns = { 0, 0, 0, 0 };
	struct fd_cookie *fdc = 0;
	FILE *out = fopencookie (fdc,"w", fns);
	out->_fileno = 0;
],
ac_cv_artsdsp_stdio_emu=yes,
ac_cv_artsdsp_stdio_emu=no)
])
AC_LANG_RESTORE
AC_MSG_RESULT($ac_cv_artsdsp_stdio_emu)
if eval "test \"`echo `$ac_cv_artsdsp_stdio_emu\" = yes"; then
  AC_DEFINE(HAVE_ARTSDSP_STDIO_EMU,1,
	[Define if you want to use glibc facilities to emulate stdio accesses in artsdsp])
fi
])

dnl call the tests
AC_CHECK_LIBAUDIOIO
AC_CHECK_LIBAUDIOFILE
AC_CHECK_REALTIME_SCHED
AC_CHECK_GETDOMAINNAME
AC_CHECK_IOCTL_TYPE
AC_CHECK_X86_FLOAT_INT
AC_CHECK_ARTSDSP_STDIO_EMU
KDE_CHECK_THREADING

arts_with_alsa=yes
AC_ARG_WITH(alsa, [  --with-alsa             enable aRts ALSA support],
[arts_with_alsa=$withval])

if test "$arts_with_alsa" = "yes"; then
AC_DEFUN(AC_CHECK_LIBASOUND,
[
  ac_ldflags_save="$LDFLAGS"
  LDFLAGS="$all_libraries $LDFLAGS"
  AC_CHECK_HEADER(sys/asoundlib.h,
  [
    AC_CHECK_LIB(asound,snd_seq_create_simple_port,[
      alsa=true
      LIBASOUND="-lasound"
      AC_DEFINE(HAVE_LIBASOUND, 1,
        [Define if you have libasound (required for alsa support)])
    ], [
      alsa=false
    ])
  ])
  AC_SUBST(LIBASOUND)
  LDFLAGS="$ac_ldflags_save"
])
AC_CHECK_LIBASOUND
fi

AC_SUBST(LIBASOUND)

# GLIB_CFLAGS:  cflags for compiling libraries and example progs
# GLIB_LIBS:    libraries for linking example programs
# GLIB_DEPLIBS: libraries for linking libraries against
GLIB_PACKAGES="gobject gmodule gthread"
AC_MSG_CHECKING(for GLib-2.0)
if glib-config-2.0 --cflags >/dev/null 2>&1 ; then
        GLIB_CFLAGS=`glib-config-2.0 --cflags $GLIB_PACKAGES`
        GLIB_LIBS=`glib-config-2.0 --libs $GLIB_PACKAGES`
        GLIB_DEPLIBS=$GLIB_LIBS
        AC_MSG_RESULT($GLIB_CFLAGS $GLIB_LIBS)
	ARTS_BUILD_GMCOP="gmcop"
else
	AC_MSG_RESULT(not installed)
	ARTS_BUILD_GMCOP=""
fi
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)
AC_SUBST(GLIB_DEPLIBS)
AC_SUBST(ARTS_BUILD_GMCOP)
 
dnl OpenBSD requires an -lossaudio and soundcard.h to provide OSS audio I/O
AC_CHECK_HEADERS(soundcard.h)
AC_CHECK_LIB(ossaudio, _oss_ioctl, [LIBOSSAUDIO="-lossaudio"])
AC_SUBST(LIBOSSAUDIO)

dnl Don't remove !
dnl AC_OUTPUT(arts/artsc/artsc-config)

dnl Check if we are building as part of KDE. Arts can also be built as
dnl a standalone snapshot in which case KDE may not be present and things
dnl that depend on KDE should not be built.
AC_MSG_CHECKING(if building standalone aRts snapshot without KDE)
if test "$DCOPIDL" = ""; then
	AC_MSG_RESULT(yes)
	ARTS_BUILD_KDE=""
else
	AC_MSG_RESULT(no)
	ARTS_BUILD_KDE="x11 qtmcop knotify message"
fi
AC_SUBST(ARTS_BUILD_KDE)

MCOPIDL='$(top_builddir)/arts/mcopidl/mcopidl'
AC_SUBST(MCOPIDL)

dnl Version (we /might/ want to use libtool versioning, too)
ARTS_MAJOR_VERSION=0
ARTS_MINOR_VERSION=5
ARTS_MICRO_VERSION=2
ARTS_VERSION=$ARTS_MAJOR_VERSION.$ARTS_MINOR_VERSION.$ARTS_MICRO_VERSION
AC_SUBST(ARTS_MAJOR_VERSION)
AC_SUBST(ARTS_MINOR_VERSION)
AC_SUBST(ARTS_MICRO_VERSION)
AC_SUBST(ARTS_VERSION)

dnl Don't remove !
dnl AC_OUTPUT(arts/artsc/artsdsp)
dnl AC_OUTPUT(arts/soundserver/artsversion-new.h)


