/* this file was generated by the MCOP idl compiler - DO NOT EDIT */

#include "core.h"

// Implementation
Arts::Header::Header()
{
}

Arts::Header::Header(Arts::HeaderMagic magic, long messageLength, Arts::MessageType messageType)
{
	this->magic = magic;
	this->messageLength = messageLength;
	this->messageType = messageType;
}

Arts::Header::Header(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::Header::Header(const Arts::Header& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::Header& Arts::Header::operator=(const Arts::Header& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::Header::~Header()
{
}

void Arts::Header::readType(Arts::Buffer& stream)
{
	magic = (Arts::HeaderMagic)stream.readLong();
	messageLength = stream.readLong();
	messageType = (Arts::MessageType)stream.readLong();
}

void Arts::Header::writeType(Arts::Buffer& stream) const
{
	stream.writeLong(magic);
	stream.writeLong(messageLength);
	stream.writeLong(messageType);
}

Arts::Invocation::Invocation()
{
}

Arts::Invocation::Invocation(long requestID, long objectID, long methodID)
{
	this->requestID = requestID;
	this->objectID = objectID;
	this->methodID = methodID;
}

Arts::Invocation::Invocation(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::Invocation::Invocation(const Arts::Invocation& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::Invocation& Arts::Invocation::operator=(const Arts::Invocation& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::Invocation::~Invocation()
{
}

void Arts::Invocation::readType(Arts::Buffer& stream)
{
	requestID = stream.readLong();
	objectID = stream.readLong();
	methodID = stream.readLong();
}

void Arts::Invocation::writeType(Arts::Buffer& stream) const
{
	stream.writeLong(requestID);
	stream.writeLong(objectID);
	stream.writeLong(methodID);
}

Arts::OnewayInvocation::OnewayInvocation()
{
}

Arts::OnewayInvocation::OnewayInvocation(long objectID, long methodID)
{
	this->objectID = objectID;
	this->methodID = methodID;
}

Arts::OnewayInvocation::OnewayInvocation(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::OnewayInvocation::OnewayInvocation(const Arts::OnewayInvocation& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::OnewayInvocation& Arts::OnewayInvocation::operator=(const Arts::OnewayInvocation& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::OnewayInvocation::~OnewayInvocation()
{
}

void Arts::OnewayInvocation::readType(Arts::Buffer& stream)
{
	objectID = stream.readLong();
	methodID = stream.readLong();
}

void Arts::OnewayInvocation::writeType(Arts::Buffer& stream) const
{
	stream.writeLong(objectID);
	stream.writeLong(methodID);
}

Arts::ServerHello::ServerHello()
{
}

Arts::ServerHello::ServerHello(const std::string& serverID, const std::vector<std::string>& authProtocols, const std::string& authSeed)
{
	this->serverID = serverID;
	this->authProtocols = authProtocols;
	this->authSeed = authSeed;
}

Arts::ServerHello::ServerHello(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::ServerHello::ServerHello(const Arts::ServerHello& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::ServerHello& Arts::ServerHello::operator=(const Arts::ServerHello& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::ServerHello::~ServerHello()
{
}

void Arts::ServerHello::readType(Arts::Buffer& stream)
{
	stream.readString(serverID);
	stream.readStringSeq(authProtocols);
	stream.readString(authSeed);
}

void Arts::ServerHello::writeType(Arts::Buffer& stream) const
{
	stream.writeString(serverID);
	stream.writeStringSeq(authProtocols);
	stream.writeString(authSeed);
}

Arts::ClientHello::ClientHello()
{
}

Arts::ClientHello::ClientHello(const std::string& serverID, const std::string& authProtocol, const std::string& authData)
{
	this->serverID = serverID;
	this->authProtocol = authProtocol;
	this->authData = authData;
}

Arts::ClientHello::ClientHello(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::ClientHello::ClientHello(const Arts::ClientHello& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::ClientHello& Arts::ClientHello::operator=(const Arts::ClientHello& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::ClientHello::~ClientHello()
{
}

void Arts::ClientHello::readType(Arts::Buffer& stream)
{
	stream.readString(serverID);
	stream.readString(authProtocol);
	stream.readString(authData);
}

void Arts::ClientHello::writeType(Arts::Buffer& stream) const
{
	stream.writeString(serverID);
	stream.writeString(authProtocol);
	stream.writeString(authData);
}

Arts::ObjectReference::ObjectReference()
{
}

Arts::ObjectReference::ObjectReference(const std::string& serverID, long objectID, const std::vector<std::string>& urls)
{
	this->serverID = serverID;
	this->objectID = objectID;
	this->urls = urls;
}

Arts::ObjectReference::ObjectReference(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::ObjectReference::ObjectReference(const Arts::ObjectReference& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::ObjectReference& Arts::ObjectReference::operator=(const Arts::ObjectReference& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::ObjectReference::~ObjectReference()
{
}

void Arts::ObjectReference::readType(Arts::Buffer& stream)
{
	stream.readString(serverID);
	objectID = stream.readLong();
	stream.readStringSeq(urls);
}

void Arts::ObjectReference::writeType(Arts::Buffer& stream) const
{
	stream.writeString(serverID);
	stream.writeLong(objectID);
	stream.writeStringSeq(urls);
}

Arts::ParamDef::ParamDef()
{
}

Arts::ParamDef::ParamDef(const std::string& type, const std::string& name)
{
	this->type = type;
	this->name = name;
}

Arts::ParamDef::ParamDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::ParamDef::ParamDef(const Arts::ParamDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::ParamDef& Arts::ParamDef::operator=(const Arts::ParamDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::ParamDef::~ParamDef()
{
}

void Arts::ParamDef::readType(Arts::Buffer& stream)
{
	stream.readString(type);
	stream.readString(name);
}

void Arts::ParamDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(type);
	stream.writeString(name);
}

Arts::MethodDef::MethodDef()
{
}

Arts::MethodDef::MethodDef(const std::string& name, const std::string& type, Arts::MethodType flags, const std::vector<Arts::ParamDef *>& signature)
{
	this->name = name;
	this->type = type;
	this->flags = flags;
	this->signature = signature;
}

Arts::MethodDef::MethodDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::MethodDef::MethodDef(const Arts::MethodDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::MethodDef& Arts::MethodDef::operator=(const Arts::MethodDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::MethodDef::~MethodDef()
{
	freeTypeSeq(signature);
}

void Arts::MethodDef::readType(Arts::Buffer& stream)
{
	stream.readString(name);
	stream.readString(type);
	flags = (Arts::MethodType)stream.readLong();
	readTypeSeq(stream,signature);
}

void Arts::MethodDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(name);
	stream.writeString(type);
	stream.writeLong(flags);
	writeTypeSeq(stream,signature);
}

Arts::AttributeDef::AttributeDef()
{
}

Arts::AttributeDef::AttributeDef(const std::string& name, const std::string& type, Arts::AttributeType flags)
{
	this->name = name;
	this->type = type;
	this->flags = flags;
}

Arts::AttributeDef::AttributeDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::AttributeDef::AttributeDef(const Arts::AttributeDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::AttributeDef& Arts::AttributeDef::operator=(const Arts::AttributeDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::AttributeDef::~AttributeDef()
{
}

void Arts::AttributeDef::readType(Arts::Buffer& stream)
{
	stream.readString(name);
	stream.readString(type);
	flags = (Arts::AttributeType)stream.readLong();
}

void Arts::AttributeDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(name);
	stream.writeString(type);
	stream.writeLong(flags);
}

Arts::InterfaceDef::InterfaceDef()
{
}

Arts::InterfaceDef::InterfaceDef(const std::string& name, const std::vector<std::string>& inheritedInterfaces, const std::vector<Arts::MethodDef *>& methods, const std::vector<Arts::AttributeDef *>& attributes, const std::vector<std::string>& defaultPorts)
{
	this->name = name;
	this->inheritedInterfaces = inheritedInterfaces;
	this->methods = methods;
	this->attributes = attributes;
	this->defaultPorts = defaultPorts;
}

Arts::InterfaceDef::InterfaceDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::InterfaceDef::InterfaceDef(const Arts::InterfaceDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::InterfaceDef& Arts::InterfaceDef::operator=(const Arts::InterfaceDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::InterfaceDef::~InterfaceDef()
{
	freeTypeSeq(methods);
	freeTypeSeq(attributes);
}

void Arts::InterfaceDef::readType(Arts::Buffer& stream)
{
	stream.readString(name);
	stream.readStringSeq(inheritedInterfaces);
	readTypeSeq(stream,methods);
	readTypeSeq(stream,attributes);
	stream.readStringSeq(defaultPorts);
}

void Arts::InterfaceDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(name);
	stream.writeStringSeq(inheritedInterfaces);
	writeTypeSeq(stream,methods);
	writeTypeSeq(stream,attributes);
	stream.writeStringSeq(defaultPorts);
}

Arts::TypeComponent::TypeComponent()
{
}

Arts::TypeComponent::TypeComponent(const std::string& type, const std::string& name)
{
	this->type = type;
	this->name = name;
}

Arts::TypeComponent::TypeComponent(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::TypeComponent::TypeComponent(const Arts::TypeComponent& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::TypeComponent& Arts::TypeComponent::operator=(const Arts::TypeComponent& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::TypeComponent::~TypeComponent()
{
}

void Arts::TypeComponent::readType(Arts::Buffer& stream)
{
	stream.readString(type);
	stream.readString(name);
}

void Arts::TypeComponent::writeType(Arts::Buffer& stream) const
{
	stream.writeString(type);
	stream.writeString(name);
}

Arts::TypeDef::TypeDef()
{
}

Arts::TypeDef::TypeDef(const std::string& name, const std::vector<Arts::TypeComponent *>& contents)
{
	this->name = name;
	this->contents = contents;
}

Arts::TypeDef::TypeDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::TypeDef::TypeDef(const Arts::TypeDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::TypeDef& Arts::TypeDef::operator=(const Arts::TypeDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::TypeDef::~TypeDef()
{
	freeTypeSeq(contents);
}

void Arts::TypeDef::readType(Arts::Buffer& stream)
{
	stream.readString(name);
	readTypeSeq(stream,contents);
}

void Arts::TypeDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(name);
	writeTypeSeq(stream,contents);
}

Arts::EnumComponent::EnumComponent()
{
}

Arts::EnumComponent::EnumComponent(const std::string& name, long value)
{
	this->name = name;
	this->value = value;
}

Arts::EnumComponent::EnumComponent(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::EnumComponent::EnumComponent(const Arts::EnumComponent& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::EnumComponent& Arts::EnumComponent::operator=(const Arts::EnumComponent& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::EnumComponent::~EnumComponent()
{
}

void Arts::EnumComponent::readType(Arts::Buffer& stream)
{
	stream.readString(name);
	value = stream.readLong();
}

void Arts::EnumComponent::writeType(Arts::Buffer& stream) const
{
	stream.writeString(name);
	stream.writeLong(value);
}

Arts::EnumDef::EnumDef()
{
}

Arts::EnumDef::EnumDef(const std::string& name, const std::vector<Arts::EnumComponent *>& contents)
{
	this->name = name;
	this->contents = contents;
}

Arts::EnumDef::EnumDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::EnumDef::EnumDef(const Arts::EnumDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::EnumDef& Arts::EnumDef::operator=(const Arts::EnumDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::EnumDef::~EnumDef()
{
	freeTypeSeq(contents);
}

void Arts::EnumDef::readType(Arts::Buffer& stream)
{
	stream.readString(name);
	readTypeSeq(stream,contents);
}

void Arts::EnumDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(name);
	writeTypeSeq(stream,contents);
}

Arts::ModuleDef::ModuleDef()
{
}

Arts::ModuleDef::ModuleDef(const std::string& moduleName, const std::vector<Arts::ModuleDef *>& modules, const std::vector<Arts::EnumDef *>& enums, const std::vector<Arts::TypeDef *>& types, const std::vector<Arts::InterfaceDef *>& interfaces)
{
	this->moduleName = moduleName;
	this->modules = modules;
	this->enums = enums;
	this->types = types;
	this->interfaces = interfaces;
}

Arts::ModuleDef::ModuleDef(Arts::Buffer& stream)
{
	readType(stream);
}

Arts::ModuleDef::ModuleDef(const Arts::ModuleDef& copyType) : Arts::Type(copyType)
{
	Arts::Buffer buffer;
	copyType.writeType(buffer);
	readType(buffer);
}

Arts::ModuleDef& Arts::ModuleDef::operator=(const Arts::ModuleDef& assignType)
{
	Arts::Buffer buffer;
	assignType.writeType(buffer);
	readType(buffer);
	return *this;
}

Arts::ModuleDef::~ModuleDef()
{
	freeTypeSeq(modules);
	freeTypeSeq(enums);
	freeTypeSeq(types);
	freeTypeSeq(interfaces);
}

void Arts::ModuleDef::readType(Arts::Buffer& stream)
{
	stream.readString(moduleName);
	readTypeSeq(stream,modules);
	readTypeSeq(stream,enums);
	readTypeSeq(stream,types);
	readTypeSeq(stream,interfaces);
}

void Arts::ModuleDef::writeType(Arts::Buffer& stream) const
{
	stream.writeString(moduleName);
	writeTypeSeq(stream,modules);
	writeTypeSeq(stream,enums);
	writeTypeSeq(stream,types);
	writeTypeSeq(stream,interfaces);
}

Arts::InterfaceRepo_base *Arts::InterfaceRepo_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	Arts::InterfaceRepo_base *castedObject = (Arts::InterfaceRepo_base *)skel->_cast(Arts::InterfaceRepo_base::_IID);
	assert(castedObject);
	return castedObject;
}

Arts::InterfaceRepo_base *Arts::InterfaceRepo_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return Arts::InterfaceRepo_base::_fromReference(r,true);
	return 0;
}

Arts::InterfaceRepo_base *Arts::InterfaceRepo_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	Arts::InterfaceRepo_base *result;
	result = (Arts::InterfaceRepo_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"Arts::InterfaceRepo");
	if(!result)
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new Arts::InterfaceRepo_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
		}
	}
	return result;
}

vector<std::string> Arts::InterfaceRepo_base::_defaultPortsIn() const {
	vector<std::string> ret;
	return ret;
}
vector<std::string> Arts::InterfaceRepo_base::_defaultPortsOut() const {
	vector<std::string> ret;
	return ret;
}

void *Arts::InterfaceRepo_base::_cast(unsigned long iid)
{
	if(iid == Arts::InterfaceRepo_base::_IID) return (Arts::InterfaceRepo_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

Arts::InterfaceRepo_stub::InterfaceRepo_stub()
{
	// constructor for subclasses (don't use directly)
}

Arts::InterfaceRepo_stub::InterfaceRepo_stub(Arts::Connection *connection, long objectID)
	: Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

long Arts::InterfaceRepo_stub::insertModule(const Arts::ModuleDef& newModule)
{
	long methodID = _lookupMethodFast("method:0d000000696e736572744d6f64756c6500050000006c6f6e6700020000000100000010000000417274733a3a4d6f64756c65446566000a0000006e65774d6f64756c6500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	newModule.writeType(*request);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return 0; // error occured
	long returnCode = result->readLong();
	delete result;
	return returnCode;
}

void Arts::InterfaceRepo_stub::removeModule(long moduleID)
{
	long methodID = _lookupMethodFast("method:0d00000072656d6f76654d6f64756c650005000000766f6964000200000001000000050000006c6f6e6700090000006d6f64756c65494400");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeLong(moduleID);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

Arts::InterfaceDef* Arts::InterfaceRepo_stub::queryInterface(const std::string& name)
{
	long methodID = _lookupMethodFast("method:0f0000007175657279496e746572666163650013000000417274733a3a496e7465726661636544656600020000000100000007000000737472696e6700050000006e616d6500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeString(name);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return new Arts::InterfaceDef(); // error occured
	Arts::InterfaceDef *_returnCode = new Arts::InterfaceDef(*result);
	delete result;
	return _returnCode;
}

Arts::TypeDef* Arts::InterfaceRepo_stub::queryType(const std::string& name)
{
	long methodID = _lookupMethodFast("method:0a000000717565727954797065000e000000417274733a3a5479706544656600020000000100000007000000737472696e6700050000006e616d6500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeString(name);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return new Arts::TypeDef(); // error occured
	Arts::TypeDef *_returnCode = new Arts::TypeDef(*result);
	delete result;
	return _returnCode;
}

std::string Arts::InterfaceRepo_skel::_interfaceName()
{
	return "Arts::InterfaceRepo";
}

std::string Arts::InterfaceRepo_skel::_interfaceNameSkel()
{
	return "Arts::InterfaceRepo";
}

// insertModule
static void _dispatch_Arts_InterfaceRepo_00(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	Arts::ModuleDef newModule(*request);
	result->writeLong(((Arts::InterfaceRepo_skel *)object)->insertModule(newModule));
}

// removeModule
static void _dispatch_Arts_InterfaceRepo_01(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	long moduleID = request->readLong();
	((Arts::InterfaceRepo_skel *)object)->removeModule(moduleID);
}

// queryInterface
static void _dispatch_Arts_InterfaceRepo_02(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	std::string name;
	request->readString(name);
	Arts::InterfaceDef *_returnCode = ((Arts::InterfaceRepo_skel *)object)->queryInterface(name);
	_returnCode->writeType(*result);
	delete _returnCode;
}

// queryType
static void _dispatch_Arts_InterfaceRepo_03(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	std::string name;
	request->readString(name);
	Arts::TypeDef *_returnCode = ((Arts::InterfaceRepo_skel *)object)->queryType(name);
	_returnCode->writeType(*result);
	delete _returnCode;
}

void Arts::InterfaceRepo_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:0d000000696e736572744d6f64756c6500050000006c6f6e670002"
        "0000000100000010000000417274733a3a4d6f64756c65446566000a0000006e65"
        "774d6f64756c65000d00000072656d6f76654d6f64756c650005000000766f6964"
        "000200000001000000050000006c6f6e6700090000006d6f64756c654944000f00"
        "00007175657279496e746572666163650013000000417274733a3a496e74657266"
        "61636544656600020000000100000007000000737472696e6700050000006e616d"
        "65000a000000717565727954797065000e000000417274733a3a54797065446566"
        "00020000000100000007000000737472696e6700050000006e616d6500",
		"MethodTable"
	);
	_addMethod(_dispatch_Arts_InterfaceRepo_00,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_InterfaceRepo_01,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_InterfaceRepo_02,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_InterfaceRepo_03,this,Arts::MethodDef(m));
}

Arts::InterfaceRepo_skel::InterfaceRepo_skel()
{
}

Arts::Object_base* Arts::InterfaceRepo::_Creator() {
	return Arts::InterfaceRepo_base::_create();
}

unsigned long Arts::InterfaceRepo_base::_IID = Arts::MCOPUtils::makeIID("Arts::InterfaceRepo");

Arts::FlowSystemSender_base *Arts::FlowSystemSender_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	Arts::FlowSystemSender_base *castedObject = (Arts::FlowSystemSender_base *)skel->_cast(Arts::FlowSystemSender_base::_IID);
	assert(castedObject);
	return castedObject;
}

Arts::FlowSystemSender_base *Arts::FlowSystemSender_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return Arts::FlowSystemSender_base::_fromReference(r,true);
	return 0;
}

Arts::FlowSystemSender_base *Arts::FlowSystemSender_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	Arts::FlowSystemSender_base *result;
	result = (Arts::FlowSystemSender_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"Arts::FlowSystemSender");
	if(!result)
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new Arts::FlowSystemSender_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
		}
	}
	return result;
}

vector<std::string> Arts::FlowSystemSender_base::_defaultPortsIn() const {
	vector<std::string> ret;
	return ret;
}
vector<std::string> Arts::FlowSystemSender_base::_defaultPortsOut() const {
	vector<std::string> ret;
	return ret;
}

void *Arts::FlowSystemSender_base::_cast(unsigned long iid)
{
	if(iid == Arts::FlowSystemSender_base::_IID) return (Arts::FlowSystemSender_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

Arts::FlowSystemSender_stub::FlowSystemSender_stub()
{
	// constructor for subclasses (don't use directly)
}

Arts::FlowSystemSender_stub::FlowSystemSender_stub(Arts::Connection *connection, long objectID)
	: Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

void Arts::FlowSystemSender_stub::processed()
{
	long methodID = _lookupMethodFast("method:0a00000070726f6365737365640005000000766f6964000100000000000000");
	Arts::Buffer *request = Arts::Dispatcher::the()->createOnewayRequest(_objectID,methodID);
	request->patchLength();
	_connection->qSendBuffer(request);

}

std::string Arts::FlowSystemSender_skel::_interfaceName()
{
	return "Arts::FlowSystemSender";
}

std::string Arts::FlowSystemSender_skel::_interfaceNameSkel()
{
	return "Arts::FlowSystemSender";
}

// processed
static void _dispatch_Arts_FlowSystemSender_00(void *object, Arts::Buffer *)
{
	((Arts::FlowSystemSender_skel *)object)->processed();
}

void Arts::FlowSystemSender_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:0a00000070726f6365737365640005000000766f69640001000000"
        "00000000",
		"MethodTable"
	);
	_addMethod(_dispatch_Arts_FlowSystemSender_00,this,Arts::MethodDef(m));
}

Arts::FlowSystemSender_skel::FlowSystemSender_skel()
{
}

Arts::Object_base* Arts::FlowSystemSender::_Creator() {
	return Arts::FlowSystemSender_base::_create();
}

unsigned long Arts::FlowSystemSender_base::_IID = Arts::MCOPUtils::makeIID("Arts::FlowSystemSender");

Arts::FlowSystemReceiver_base *Arts::FlowSystemReceiver_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	Arts::FlowSystemReceiver_base *castedObject = (Arts::FlowSystemReceiver_base *)skel->_cast(Arts::FlowSystemReceiver_base::_IID);
	assert(castedObject);
	return castedObject;
}

Arts::FlowSystemReceiver_base *Arts::FlowSystemReceiver_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return Arts::FlowSystemReceiver_base::_fromReference(r,true);
	return 0;
}

Arts::FlowSystemReceiver_base *Arts::FlowSystemReceiver_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	Arts::FlowSystemReceiver_base *result;
	result = (Arts::FlowSystemReceiver_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"Arts::FlowSystemReceiver");
	if(!result)
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new Arts::FlowSystemReceiver_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
		}
	}
	return result;
}

vector<std::string> Arts::FlowSystemReceiver_base::_defaultPortsIn() const {
	vector<std::string> ret;
	return ret;
}
vector<std::string> Arts::FlowSystemReceiver_base::_defaultPortsOut() const {
	vector<std::string> ret;
	return ret;
}

void *Arts::FlowSystemReceiver_base::_cast(unsigned long iid)
{
	if(iid == Arts::FlowSystemReceiver_base::_IID) return (Arts::FlowSystemReceiver_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

Arts::FlowSystemReceiver_stub::FlowSystemReceiver_stub()
{
	// constructor for subclasses (don't use directly)
}

Arts::FlowSystemReceiver_stub::FlowSystemReceiver_stub(Arts::Connection *connection, long objectID)
	: Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

long Arts::FlowSystemReceiver_stub::receiveHandlerID()
{
	long methodID = _lookupMethodFast("method:160000005f6765745f7265636569766548616e646c6572494400050000006c6f6e67000200000000000000");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return 0; // error occured
	long returnCode = result->readLong();
	delete result;
	return returnCode;
}

std::string Arts::FlowSystemReceiver_skel::_interfaceName()
{
	return "Arts::FlowSystemReceiver";
}

std::string Arts::FlowSystemReceiver_skel::_interfaceNameSkel()
{
	return "Arts::FlowSystemReceiver";
}

// _get_receiveHandlerID
static void _dispatch_Arts_FlowSystemReceiver_00(void *object, Arts::Buffer *, Arts::Buffer *result)
{
	result->writeLong(((Arts::FlowSystemReceiver_skel *)object)->receiveHandlerID());
}

void Arts::FlowSystemReceiver_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:160000005f6765745f7265636569766548616e646c657249440005"
        "0000006c6f6e67000200000000000000",
		"MethodTable"
	);
	_addMethod(_dispatch_Arts_FlowSystemReceiver_00,this,Arts::MethodDef(m));
}

Arts::FlowSystemReceiver_skel::FlowSystemReceiver_skel()
{
}

Arts::Object_base* Arts::FlowSystemReceiver::_Creator() {
	return Arts::FlowSystemReceiver_base::_create();
}

unsigned long Arts::FlowSystemReceiver_base::_IID = Arts::MCOPUtils::makeIID("Arts::FlowSystemReceiver");

Arts::FlowSystem_base *Arts::FlowSystem_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	Arts::FlowSystem_base *castedObject = (Arts::FlowSystem_base *)skel->_cast(Arts::FlowSystem_base::_IID);
	assert(castedObject);
	return castedObject;
}

Arts::FlowSystem_base *Arts::FlowSystem_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return Arts::FlowSystem_base::_fromReference(r,true);
	return 0;
}

Arts::FlowSystem_base *Arts::FlowSystem_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	Arts::FlowSystem_base *result;
	result = (Arts::FlowSystem_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"Arts::FlowSystem");
	if(!result)
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new Arts::FlowSystem_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
		}
	}
	return result;
}

vector<std::string> Arts::FlowSystem_base::_defaultPortsIn() const {
	vector<std::string> ret;
	return ret;
}
vector<std::string> Arts::FlowSystem_base::_defaultPortsOut() const {
	vector<std::string> ret;
	return ret;
}

void *Arts::FlowSystem_base::_cast(unsigned long iid)
{
	if(iid == Arts::FlowSystem_base::_IID) return (Arts::FlowSystem_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

Arts::FlowSystem_stub::FlowSystem_stub()
{
	// constructor for subclasses (don't use directly)
}

Arts::FlowSystem_stub::FlowSystem_stub(Arts::Connection *connection, long objectID)
	: Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

void Arts::FlowSystem_stub::startObject(Arts::Object node)
{
	long methodID = _lookupMethodFast("method:0c00000073746172744f626a6563740005000000766f6964000200000001000000070000006f626a65637400050000006e6f646500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	writeObject(*request,node._base());
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

void Arts::FlowSystem_stub::stopObject(Arts::Object node)
{
	long methodID = _lookupMethodFast("method:0b00000073746f704f626a6563740005000000766f6964000200000001000000070000006f626a65637400050000006e6f646500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	writeObject(*request,node._base());
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

void Arts::FlowSystem_stub::connectObject(Arts::Object sourceObject, const std::string& sourcePort, Arts::Object destObject, const std::string& destPort)
{
	long methodID = _lookupMethodFast("method:0e000000636f6e6e6563744f626a6563740005000000766f6964000200000004000000070000006f626a656374000d000000736f757263654f626a6563740007000000737472696e67000b000000736f75726365506f727400070000006f626a656374000b000000646573744f626a6563740007000000737472696e67000900000064657374506f727400");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	writeObject(*request,sourceObject._base());
	request->writeString(sourcePort);
	writeObject(*request,destObject._base());
	request->writeString(destPort);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

void Arts::FlowSystem_stub::disconnectObject(Arts::Object sourceObject, const std::string& sourcePort, Arts::Object destObject, const std::string& destPort)
{
	long methodID = _lookupMethodFast("method:11000000646973636f6e6e6563744f626a6563740005000000766f6964000200000004000000070000006f626a656374000d000000736f757263654f626a6563740007000000737472696e67000b000000736f75726365506f727400070000006f626a656374000b000000646573744f626a6563740007000000737472696e67000900000064657374506f727400");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	writeObject(*request,sourceObject._base());
	request->writeString(sourcePort);
	writeObject(*request,destObject._base());
	request->writeString(destPort);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

Arts::AttributeType Arts::FlowSystem_stub::queryFlags(Arts::Object node, const std::string& port)
{
	long methodID = _lookupMethodFast("method:0b0000007175657279466c6167730014000000417274733a3a41747472696275746554797065000200000002000000070000006f626a65637400050000006e6f64650007000000737472696e670005000000706f727400");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	writeObject(*request,node._base());
	request->writeString(port);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return (Arts::AttributeType)0; // error occured
	Arts::AttributeType returnCode = (Arts::AttributeType)result->readLong();
	delete result;
	return returnCode;
}

Arts::FlowSystemReceiver Arts::FlowSystem_stub::createReceiver(Arts::Object destObject, const std::string& destPort, Arts::FlowSystemSender sender)
{
	long methodID = _lookupMethodFast("method:0f00000063726561746552656365697665720019000000417274733a3a466c6f7753797374656d5265636569766572000200000003000000070000006f626a656374000b000000646573744f626a6563740007000000737472696e67000900000064657374506f72740017000000417274733a3a466c6f7753797374656d53656e646572000700000073656e64657200");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	writeObject(*request,destObject._base());
	request->writeString(destPort);
	writeObject(*request,sender._base());
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if (!result) return Arts::FlowSystemReceiver::null();
	Arts::FlowSystemReceiver_base* returnCode;
	readObject(*result,returnCode);
	delete result;
	return Arts::FlowSystemReceiver::_from_base(returnCode);
}

std::string Arts::FlowSystem_skel::_interfaceName()
{
	return "Arts::FlowSystem";
}

std::string Arts::FlowSystem_skel::_interfaceNameSkel()
{
	return "Arts::FlowSystem";
}

// startObject
static void _dispatch_Arts_FlowSystem_00(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	Arts::Object_base* _temp_node;
	readObject(*request,_temp_node);
	Arts::Object node = Arts::Object::_from_base(_temp_node);
	((Arts::FlowSystem_skel *)object)->startObject(node);
}

// stopObject
static void _dispatch_Arts_FlowSystem_01(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	Arts::Object_base* _temp_node;
	readObject(*request,_temp_node);
	Arts::Object node = Arts::Object::_from_base(_temp_node);
	((Arts::FlowSystem_skel *)object)->stopObject(node);
}

// connectObject
static void _dispatch_Arts_FlowSystem_02(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	Arts::Object_base* _temp_sourceObject;
	readObject(*request,_temp_sourceObject);
	Arts::Object sourceObject = Arts::Object::_from_base(_temp_sourceObject);
	std::string sourcePort;
	request->readString(sourcePort);
	Arts::Object_base* _temp_destObject;
	readObject(*request,_temp_destObject);
	Arts::Object destObject = Arts::Object::_from_base(_temp_destObject);
	std::string destPort;
	request->readString(destPort);
	((Arts::FlowSystem_skel *)object)->connectObject(sourceObject,sourcePort,destObject,destPort);
}

// disconnectObject
static void _dispatch_Arts_FlowSystem_03(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	Arts::Object_base* _temp_sourceObject;
	readObject(*request,_temp_sourceObject);
	Arts::Object sourceObject = Arts::Object::_from_base(_temp_sourceObject);
	std::string sourcePort;
	request->readString(sourcePort);
	Arts::Object_base* _temp_destObject;
	readObject(*request,_temp_destObject);
	Arts::Object destObject = Arts::Object::_from_base(_temp_destObject);
	std::string destPort;
	request->readString(destPort);
	((Arts::FlowSystem_skel *)object)->disconnectObject(sourceObject,sourcePort,destObject,destPort);
}

// queryFlags
static void _dispatch_Arts_FlowSystem_04(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	Arts::Object_base* _temp_node;
	readObject(*request,_temp_node);
	Arts::Object node = Arts::Object::_from_base(_temp_node);
	std::string port;
	request->readString(port);
	result->writeLong(((Arts::FlowSystem_skel *)object)->queryFlags(node,port));
}

// createReceiver
static void _dispatch_Arts_FlowSystem_05(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	Arts::Object_base* _temp_destObject;
	readObject(*request,_temp_destObject);
	Arts::Object destObject = Arts::Object::_from_base(_temp_destObject);
	std::string destPort;
	request->readString(destPort);
	Arts::FlowSystemSender_base* _temp_sender;
	readObject(*request,_temp_sender);
	Arts::FlowSystemSender sender = Arts::FlowSystemSender::_from_base(_temp_sender);
	Arts::FlowSystemReceiver returnCode = ((Arts::FlowSystem_skel *)object)->createReceiver(destObject,destPort,sender);
	writeObject(*result,returnCode._base());
}

void Arts::FlowSystem_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:0c00000073746172744f626a6563740005000000766f6964000200"
        "000001000000070000006f626a65637400050000006e6f6465000b00000073746f"
        "704f626a6563740005000000766f6964000200000001000000070000006f626a65"
        "637400050000006e6f6465000e000000636f6e6e6563744f626a65637400050000"
        "00766f6964000200000004000000070000006f626a656374000d000000736f7572"
        "63654f626a6563740007000000737472696e67000b000000736f75726365506f72"
        "7400070000006f626a656374000b000000646573744f626a656374000700000073"
        "7472696e67000900000064657374506f72740011000000646973636f6e6e656374"
        "4f626a6563740005000000766f6964000200000004000000070000006f626a6563"
        "74000d000000736f757263654f626a6563740007000000737472696e67000b0000"
        "00736f75726365506f727400070000006f626a656374000b000000646573744f62"
        "6a6563740007000000737472696e67000900000064657374506f7274000b000000"
        "7175657279466c6167730014000000417274733a3a417474726962757465547970"
        "65000200000002000000070000006f626a65637400050000006e6f646500070000"
        "00737472696e670005000000706f7274000f000000637265617465526563656976"
        "65720019000000417274733a3a466c6f7753797374656d52656365697665720002"
        "00000003000000070000006f626a656374000b000000646573744f626a65637400"
        "07000000737472696e67000900000064657374506f72740017000000417274733a"
        "3a466c6f7753797374656d53656e646572000700000073656e64657200",
		"MethodTable"
	);
	_addMethod(_dispatch_Arts_FlowSystem_00,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_FlowSystem_01,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_FlowSystem_02,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_FlowSystem_03,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_FlowSystem_04,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_FlowSystem_05,this,Arts::MethodDef(m));
}

Arts::FlowSystem_skel::FlowSystem_skel()
{
}

Arts::Object_base* Arts::FlowSystem::_Creator() {
	return Arts::FlowSystem_base::_create();
}

unsigned long Arts::FlowSystem_base::_IID = Arts::MCOPUtils::makeIID("Arts::FlowSystem");

Arts::GlobalComm_base *Arts::GlobalComm_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	Arts::GlobalComm_base *castedObject = (Arts::GlobalComm_base *)skel->_cast(Arts::GlobalComm_base::_IID);
	assert(castedObject);
	return castedObject;
}

Arts::GlobalComm_base *Arts::GlobalComm_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return Arts::GlobalComm_base::_fromReference(r,true);
	return 0;
}

Arts::GlobalComm_base *Arts::GlobalComm_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	Arts::GlobalComm_base *result;
	result = (Arts::GlobalComm_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"Arts::GlobalComm");
	if(!result)
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new Arts::GlobalComm_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
		}
	}
	return result;
}

vector<std::string> Arts::GlobalComm_base::_defaultPortsIn() const {
	vector<std::string> ret;
	return ret;
}
vector<std::string> Arts::GlobalComm_base::_defaultPortsOut() const {
	vector<std::string> ret;
	return ret;
}

void *Arts::GlobalComm_base::_cast(unsigned long iid)
{
	if(iid == Arts::GlobalComm_base::_IID) return (Arts::GlobalComm_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

Arts::GlobalComm_stub::GlobalComm_stub()
{
	// constructor for subclasses (don't use directly)
}

Arts::GlobalComm_stub::GlobalComm_stub(Arts::Connection *connection, long objectID)
	: Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

bool Arts::GlobalComm_stub::put(const std::string& variable, const std::string& value)
{
	long methodID = _lookupMethodFast("method:040000007075740008000000626f6f6c65616e00020000000200000007000000737472696e6700090000007661726961626c650007000000737472696e67000600000076616c756500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeString(variable);
	request->writeString(value);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return false; // error occured
	bool returnCode = result->readBool();
	delete result;
	return returnCode;
}

std::string Arts::GlobalComm_stub::get(const std::string& variable)
{
	long methodID = _lookupMethodFast("method:040000006765740007000000737472696e6700020000000100000007000000737472696e6700090000007661726961626c6500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeString(variable);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(!result) return""; // error occured
	std::string returnCode;
	result->readString(returnCode);
	delete result;
	return returnCode;
}

void Arts::GlobalComm_stub::erase(const std::string& variable)
{
	long methodID = _lookupMethodFast("method:0600000065726173650005000000766f696400020000000100000007000000737472696e6700090000007661726961626c6500");
	long requestID;
	Arts::Buffer *request, *result;
	request = Arts::Dispatcher::the()->createRequest(requestID,_objectID,methodID);
	request->writeString(variable);
	request->patchLength();
	_connection->qSendBuffer(request);

	result = Arts::Dispatcher::the()->waitForResult(requestID,_connection);
	if(result) delete result;
}

std::string Arts::GlobalComm_skel::_interfaceName()
{
	return "Arts::GlobalComm";
}

std::string Arts::GlobalComm_skel::_interfaceNameSkel()
{
	return "Arts::GlobalComm";
}

// put
static void _dispatch_Arts_GlobalComm_00(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	std::string variable;
	request->readString(variable);
	std::string value;
	request->readString(value);
	result->writeBool(((Arts::GlobalComm_skel *)object)->put(variable,value));
}

// get
static void _dispatch_Arts_GlobalComm_01(void *object, Arts::Buffer *request, Arts::Buffer *result)
{
	std::string variable;
	request->readString(variable);
	result->writeString(((Arts::GlobalComm_skel *)object)->get(variable));
}

// erase
static void _dispatch_Arts_GlobalComm_02(void *object, Arts::Buffer *request, Arts::Buffer *)
{
	std::string variable;
	request->readString(variable);
	((Arts::GlobalComm_skel *)object)->erase(variable);
}

void Arts::GlobalComm_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:040000007075740008000000626f6f6c65616e0002000000020000"
        "0007000000737472696e6700090000007661726961626c65000700000073747269"
        "6e67000600000076616c756500040000006765740007000000737472696e670002"
        "0000000100000007000000737472696e6700090000007661726961626c65000600"
        "000065726173650005000000766f69640002000000010000000700000073747269"
        "6e6700090000007661726961626c6500",
		"MethodTable"
	);
	_addMethod(_dispatch_Arts_GlobalComm_00,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_GlobalComm_01,this,Arts::MethodDef(m));
	_addMethod(_dispatch_Arts_GlobalComm_02,this,Arts::MethodDef(m));
}

Arts::GlobalComm_skel::GlobalComm_skel()
{
}

Arts::Object_base* Arts::GlobalComm::_Creator() {
	return Arts::GlobalComm_base::_create();
}

unsigned long Arts::GlobalComm_base::_IID = Arts::MCOPUtils::makeIID("Arts::GlobalComm");

Arts::TmpGlobalComm_base *Arts::TmpGlobalComm_base::_create(const std::string& subClass)
{
	Arts::Object_skel *skel = Arts::ObjectManager::the()->create(subClass);
	assert(skel);
	Arts::TmpGlobalComm_base *castedObject = (Arts::TmpGlobalComm_base *)skel->_cast(Arts::TmpGlobalComm_base::_IID);
	assert(castedObject);
	return castedObject;
}

Arts::TmpGlobalComm_base *Arts::TmpGlobalComm_base::_fromString(std::string objectref)
{
	Arts::ObjectReference r;

	if(Arts::Dispatcher::the()->stringToObjectReference(r,objectref))
		return Arts::TmpGlobalComm_base::_fromReference(r,true);
	return 0;
}

Arts::TmpGlobalComm_base *Arts::TmpGlobalComm_base::_fromReference(Arts::ObjectReference r, bool needcopy)
{
	Arts::TmpGlobalComm_base *result;
	result = (Arts::TmpGlobalComm_base *)Arts::Dispatcher::the()->connectObjectLocal(r,"Arts::TmpGlobalComm");
	if(!result)
	{
		Arts::Connection *conn = Arts::Dispatcher::the()->connectObjectRemote(r);
		if(conn)
		{
			result = new Arts::TmpGlobalComm_stub(conn,r.objectID);
			if(needcopy) result->_copyRemote();
			result->_useRemote();
		}
	}
	return result;
}

vector<std::string> Arts::TmpGlobalComm_base::_defaultPortsIn() const {
	vector<std::string> ret;
	return ret;
}
vector<std::string> Arts::TmpGlobalComm_base::_defaultPortsOut() const {
	vector<std::string> ret;
	return ret;
}

void *Arts::TmpGlobalComm_base::_cast(unsigned long iid)
{
	if(iid == Arts::TmpGlobalComm_base::_IID) return (Arts::TmpGlobalComm_base *)this;
	if(iid == Arts::GlobalComm_base::_IID) return (Arts::GlobalComm_base *)this;
	if(iid == Arts::Object_base::_IID) return (Arts::Object_base *)this;
	return 0;
}

Arts::TmpGlobalComm_stub::TmpGlobalComm_stub()
{
	// constructor for subclasses (don't use directly)
}

Arts::TmpGlobalComm_stub::TmpGlobalComm_stub(Arts::Connection *connection, long objectID)
	: Object_stub(connection, objectID)
{
	// constructor to create a stub for an object
}

std::string Arts::TmpGlobalComm_skel::_interfaceName()
{
	return "Arts::TmpGlobalComm";
}

std::string Arts::TmpGlobalComm_skel::_interfaceNameSkel()
{
	return "Arts::TmpGlobalComm";
}

void Arts::TmpGlobalComm_skel::_buildMethodTable()
{
	Arts::Buffer m;
	m.fromString(
        "MethodTable:",
		"MethodTable"
	);
	Arts::GlobalComm_skel::_buildMethodTable();
}

Arts::TmpGlobalComm_skel::TmpGlobalComm_skel()
{
}

Arts::Object_base* Arts::TmpGlobalComm::_Creator() {
	return Arts::TmpGlobalComm_base::_create();
}

unsigned long Arts::TmpGlobalComm_base::_IID = Arts::MCOPUtils::makeIID("Arts::TmpGlobalComm");

static Arts::IDLFileReg IDLFileReg_core("core",
    "IDLFile:0100000000000000000400000012000000417274733a3a4865616465724d61"
    "67696300010000000b0000004d434f505f4d41474943004d434f501200000041727473"
    "3a3a4d6573736167655479706500060000000f0000006d636f70496e766f636174696f"
    "6e00010000000b0000006d636f7052657475726e0002000000100000006d636f705365"
    "7276657248656c6c6f0003000000100000006d636f70436c69656e7448656c6c6f0004"
    "0000000f0000006d636f70417574684163636570740005000000150000006d636f704f"
    "6e65776179496e766f636174696f6e000600000011000000417274733a3a4d6574686f"
    "645479706500020000000d0000006d6574686f644f6e6577617900010000000d000000"
    "6d6574686f6454776f776179000200000014000000417274733a3a4174747269627574"
    "655479706500070000000900000073747265616d496e00010000000a00000073747265"
    "616d4f757400020000000c00000073747265616d4d756c746900040000001000000061"
    "747472696275746553747265616d000800000013000000617474726962757465417474"
    "72696275746500100000000c00000073747265616d4173796e6300200000000e000000"
    "73747265616d44656661756c7400400000000f0000000d000000417274733a3a486561"
    "646572000300000012000000417274733a3a4865616465724d6167696300060000006d"
    "6167696300050000006c6f6e67000e0000006d6573736167654c656e67746800120000"
    "00417274733a3a4d65737361676554797065000c0000006d6573736167655479706500"
    "11000000417274733a3a496e766f636174696f6e0003000000050000006c6f6e67000a"
    "00000072657175657374494400050000006c6f6e6700090000006f626a656374494400"
    "050000006c6f6e6700090000006d6574686f6449440017000000417274733a3a4f6e65"
    "776179496e766f636174696f6e0002000000050000006c6f6e6700090000006f626a65"
    "6374494400050000006c6f6e6700090000006d6574686f644944001200000041727473"
    "3a3a53657276657248656c6c6f000300000007000000737472696e6700090000007365"
    "72766572494400080000002a737472696e67000e0000006175746850726f746f636f6c"
    "730007000000737472696e67000900000061757468536565640012000000417274733a"
    "3a436c69656e7448656c6c6f000300000007000000737472696e670009000000736572"
    "76657249440007000000737472696e67000d0000006175746850726f746f636f6c0007"
    "000000737472696e67000900000061757468446174610016000000417274733a3a4f62"
    "6a6563745265666572656e6365000300000007000000737472696e6700090000007365"
    "72766572494400050000006c6f6e6700090000006f626a656374494400080000002a73"
    "7472696e67000500000075726c73000f000000417274733a3a506172616d4465660002"
    "00000007000000737472696e670005000000747970650007000000737472696e670005"
    "0000006e616d650010000000417274733a3a4d6574686f644465660004000000070000"
    "00737472696e6700050000006e616d650007000000737472696e670005000000747970"
    "650011000000417274733a3a4d6574686f64547970650006000000666c616773001000"
    "00002a417274733a3a506172616d446566000a0000007369676e617475726500130000"
    "00417274733a3a417474726962757465446566000300000007000000737472696e6700"
    "050000006e616d650007000000737472696e6700050000007479706500140000004172"
    "74733a3a417474726962757465547970650006000000666c6167730013000000417274"
    "733a3a496e74657266616365446566000500000007000000737472696e670005000000"
    "6e616d6500080000002a737472696e670014000000696e68657269746564496e746572"
    "666163657300110000002a417274733a3a4d6574686f6444656600080000006d657468"
    "6f647300140000002a417274733a3a417474726962757465446566000b000000617474"
    "7269627574657300080000002a737472696e67000d00000064656661756c74506f7274"
    "730014000000417274733a3a54797065436f6d706f6e656e7400020000000700000073"
    "7472696e670005000000747970650007000000737472696e6700050000006e616d6500"
    "0e000000417274733a3a54797065446566000200000007000000737472696e67000500"
    "00006e616d6500150000002a417274733a3a54797065436f6d706f6e656e7400090000"
    "00636f6e74656e74730014000000417274733a3a456e756d436f6d706f6e656e740002"
    "00000007000000737472696e6700050000006e616d6500050000006c6f6e6700060000"
    "0076616c7565000e000000417274733a3a456e756d4465660002000000070000007374"
    "72696e6700050000006e616d6500150000002a417274733a3a456e756d436f6d706f6e"
    "656e740009000000636f6e74656e74730010000000417274733a3a4d6f64756c654465"
    "66000500000007000000737472696e67000b0000006d6f64756c654e616d6500110000"
    "002a417274733a3a4d6f64756c6544656600080000006d6f64756c6573000f0000002a"
    "417274733a3a456e756d4465660006000000656e756d73000f0000002a417274733a3a"
    "547970654465660006000000747970657300140000002a417274733a3a496e74657266"
    "616365446566000b000000696e7465726661636573000600000014000000417274733a"
    "3a496e746572666163655265706f0000000000040000000d000000696e736572744d6f"
    "64756c6500050000006c6f6e6700020000000100000010000000417274733a3a4d6f64"
    "756c65446566000a0000006e65774d6f64756c65000d00000072656d6f76654d6f6475"
    "6c650005000000766f6964000200000001000000050000006c6f6e6700090000006d6f"
    "64756c654944000f0000007175657279496e746572666163650013000000417274733a"
    "3a496e7465726661636544656600020000000100000007000000737472696e67000500"
    "00006e616d65000a000000717565727954797065000e000000417274733a3a54797065"
    "44656600020000000100000007000000737472696e6700050000006e616d6500000000"
    "000000000017000000417274733a3a466c6f7753797374656d53656e64657200000000"
    "00010000000a00000070726f6365737365640005000000766f69640001000000000000"
    "00000000000000000019000000417274733a3a466c6f7753797374656d526563656976"
    "657200000000000000000001000000110000007265636569766548616e646c65724944"
    "00050000006c6f6e6700120000000000000011000000417274733a3a466c6f77537973"
    "74656d0000000000060000000c00000073746172744f626a6563740005000000766f69"
    "64000200000001000000070000006f626a65637400050000006e6f6465000b00000073"
    "746f704f626a6563740005000000766f6964000200000001000000070000006f626a65"
    "637400050000006e6f6465000e000000636f6e6e6563744f626a656374000500000076"
    "6f6964000200000004000000070000006f626a656374000d000000736f757263654f62"
    "6a6563740007000000737472696e67000b000000736f75726365506f72740007000000"
    "6f626a656374000b000000646573744f626a6563740007000000737472696e67000900"
    "000064657374506f72740011000000646973636f6e6e6563744f626a65637400050000"
    "00766f6964000200000004000000070000006f626a656374000d000000736f75726365"
    "4f626a6563740007000000737472696e67000b000000736f75726365506f7274000700"
    "00006f626a656374000b000000646573744f626a6563740007000000737472696e6700"
    "0900000064657374506f7274000b0000007175657279466c6167730014000000417274"
    "733a3a41747472696275746554797065000200000002000000070000006f626a656374"
    "00050000006e6f64650007000000737472696e670005000000706f7274000f00000063"
    "726561746552656365697665720019000000417274733a3a466c6f7753797374656d52"
    "65636569766572000200000003000000070000006f626a656374000b00000064657374"
    "4f626a6563740007000000737472696e67000900000064657374506f72740017000000"
    "417274733a3a466c6f7753797374656d53656e646572000700000073656e6465720000"
    "0000000000000011000000417274733a3a476c6f62616c436f6d6d0000000000030000"
    "00040000007075740008000000626f6f6c65616e000200000002000000070000007374"
    "72696e6700090000007661726961626c650007000000737472696e6700060000007661"
    "6c756500040000006765740007000000737472696e6700020000000100000007000000"
    "737472696e6700090000007661726961626c6500060000006572617365000500000076"
    "6f696400020000000100000007000000737472696e6700090000007661726961626c65"
    "00000000000000000014000000417274733a3a546d70476c6f62616c436f6d6d000100"
    "000011000000417274733a3a476c6f62616c436f6d6d00000000000000000000000000"
);
