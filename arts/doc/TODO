This is an approximation what remains todo to get aRts running on MCOP
as it was before on CORBA.

1. To get some kind of an audio server running

It does run. See kdelibs/arts/examples/artsd. However, there are a few
minor corrections missing to start to make it really useful for kde2.

These are:

- move required stuff
   => knotify should probably be in kdebase
- network transparency: ensure that clients do get object references and
  secret-cookie over the X11 server instead of files

2. To get everything up again

- namespaces (mapped to modules in the IDL) - currently MCOP puts every
  interface in the standard namespace
- do dynamic loading of plugins
- port visual objects
- do streaming between servers again
- more work on flow graph descriptions (Structure, etc.) -- external interfaces
- more work on dynamic N:M connectivity (SynthBus*)
- port artsbuilder
- port every object
- asynchronous streams (as opposed to synchronous) w/ language binding
- asynchronous invocations
- notifications when attributes change
- more work on streaming, for instance:
  - recursive scheduling again (with loops & cycles)
- reading/writing IEEE Floats needs proper documentation, testing on
  different architectures and probably different code for some machines
- more work on audio playing stuff (different sampling rates, different
  hardware, mono, tunable buffer sizes)
- make buffer sizes configurable
- write a kcontrol module

3. To have more fun

- tune the transfer protocol (although MCOP theoretically could do 30000+
  synchronous invocations per second, it can only do 8000+)

  possible tuning operations are
    * rewrite Buffer not to use vector<char> to store data, but malloc'd
	  blocks
    * try to write "zero allocation" invocations, that means, try not to
	  allocate memory on performing an invocation. For instance Buffers
	  could be kept in pools, and be reused for further invocations, without
	  the need to realloc another memory block
    * try to minimize the amount of copies of data, possibly even using
	  something like sharedmem to share data between the sending and
	  receiving buffer

- implement plugins that transfer non-standard datatypes such as midi events,
  video frames, fft packets, oscilloscope views, ... (which was impossible
  with aRts on CORBA)
- make aRts run inside Brahms, KWave or your-favourite-other-app, to do
  signal processing where it is needed (similar to AudioLogic Environment,
  for instance)
- convince other people to use aRts, so that the usefulness of universal
  plugins written for the API increases
- when being crazy, implement gatewaying from MCOP to DCOP, CORBA, XMLRPC
  or whatever else might be useful
