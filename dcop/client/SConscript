#! /usr/bin/python

Import('env')

progs1='dcop dcopstart dcopquit dcopfind'.split()
for prog in progs1:
	obj=env.qt4obj('program', env)
	obj.target    = prog
	obj.source    = prog+'.cpp'
	obj.libpaths  = '.. '
	obj.libs      = 'DCOP '
	if env['WINDOWS']:
		obj.libpaths += '../../win '
		obj.libs     += 'kdewin32 ws2_32'
		if env['CC'] == 'cl':
			# this is a really bad hack to get dcop compiling with msvc 
			# because otherwise class KURL will be marked as 
			# __declspec(dllimport) and not be found during link time
			obj.ccflags  += '-DKDECORE_EXPORT='
		elif env['CC'] == 'gcc':
			obj.ccflags  += '-Dkdemain=main'
		

	obj.uselib    = 'QT QTCORE QT3SUPPORT KDE4'
	obj.execute()

progs2='dcopclient dcopobject dcopref'.split()
for prog in progs2:
	obj=env.genobj('program', env)
	obj.target    = prog
	obj.source    = prog+'.c'
	obj.uselib    = 'QT QTCORE QT3SUPPORT KDE4'
	obj.instdir   = env['KDEBIN']
	if env['WINDOWS'] and env['CC'] == 'gcc':
		obj.ccflags  += '-Dkdemain=main'
	obj.execute()

"""
INCLUDES = $(all_includes)
AM_LDFLAGS   = $(all_libraries)
DCOP_LIB = ../libDCOP.la

####### Files

bin_PROGRAMS = dcop dcopfind dcopclient dcopobject dcopref dcopstart dcopquit

dcop_SOURCES = dcop.cpp
dcop_LDADD = $(LIB_QT) $(DCOP_LIB)
dcop_LDFLAGS = $(KDE_RPATH)

dcopstart_SOURCES = dcopstart.cpp
dcopstart_LDADD = $(LIB_QT) $(DCOP_LIB)
dcopstart_LDFLAGS = $(KDE_RPATH)

dcopquit_SOURCES = dcopquit.cpp
dcopquit_LDADD = $(LIB_QT) $(DCOP_LIB)
dcopquit_LDFLAGS = $(KDE_RPATH)

dcopfind_SOURCES = dcopfind.cpp
dcopfind_LDADD = $(LIB_QT) $(DCOP_LIB)
dcopfind_LDFLAGS = $(KDE_RPATH)

dcopclient_SOURCES = dcopclient.c
dcopobject_SOURCES = dcopobject.c
dcopref_SOURCES = dcopref.c
"""

