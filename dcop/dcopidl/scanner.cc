#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 48
#define YY_END_OF_BUFFER 49
static yyconst short int yy_acclist[491] =
    {   0,
        5,    5,   49,    5,   47,   48,    1,    5,   47,   48,
        2,   48,    5,   47,   48,    5,   47,   48,    5,   17,
       47,   48,    5,   47,   48,    5,   12,   47,   48,    5,
       13,   47,   48,    5,   47,   48,    5,   15,   47,   48,
        5,   47,   48,    5,   47,   48,    5,   31,   43,   47,
       48,    5,   42,   47,   48,    5,   14,   47,   48,    5,
       16,   47,   48,    5,   18,   47,   48,    5,   21,   47,
       48,    5,   19,   47,   48,    5,   36,   47,   48,    5,
       36,   47,   48,    5,   36,   47,   48,    5,   36,   47,
       48,    5,   36,   47,   48,    5,   36,   47,   48,    5,

       36,   47,   48,    5,   36,   47,   48,    5,   36,   47,
       48,    5,   10,   47,   48,    5,   11,   47,   48,    5,
        5,    5,    5,   46,    5,    5,    5,    9,    5,    7,
        5,    5,    5,    5,    5,    4,    5,    5,   40,    3,
        5,    5,    6,    5,    5,   43,    5,    5,    5,   44,
        5,   42,    5,   20,    5,   36,    5,   36,    5,   36,
        5,   36,    5,   36,    5,   36,    5,   36,    5,   36,
        5,   36,    5,   36,    5,   36,    4,    5,    5,    5,
        5,    7,    5,    7,    4,    5,    5,    5,   45,    5,
        5,    4,    5,    4,    5,    5,    3,    5,    3,    5,

        3,    4,    5,    5,    6,    5,    6,    5,   39,    5,
        5,   38,    5,   44,    5,   36,    5,   36,    5,   36,
        5,   36,    5,   36,    5,   36,    5,   36,    5,   36,
        5,   36,    5,   36,    4,    5,    4,    5,   46,    4,
        5,    4,    5,    5,    5,    4,    5,    7,    4,    5,
        4,    5,    5,    5,    5,    4,    5,    5,    5,   41,
        3,    5,    3,    4,    5,    4,    5,    4,    5,    6,
        5,    5,   36,    5,   36,    5,   36,    5,   36,    5,
       23,   36,    5,   36,    5,   36,    5,   36,    5,   36,
        5,   36,    4,    5,    4,    5,    4,    5,    5,    5,

        4,    5,    7,    4,    5,    7,    4,    5,    5,    5,
        3,    4,    5,    4,    5,    6,    4,    5,    6,    5,
        5,   37,    5,   36,    5,   36,    5,   24,   36,    5,
       22,   36,    5,   36,    5,   36,    5,   36,    5,   36,
        5,   36,    4,    5,    4,    5,    4,    5,    7,    5,
        3,    4,    5,    4,    5,    6,    5,   29,   36,    5,
       36,    5,   27,   36,    5,   36,    5,   26,   36,    5,
       36,    5,   36,    4,    5,    4,    5,    5,    5,   36,
        5,   36,    5,    5,   28,   36,    5,   25,   36,    5,
        5,   30,   36,    5,    5,    5,    5,    5,   35,    5,

        5,    5,    5,    5,   33,   35,    4,    5,    5,    5,
       33,    4,    5,    5,    4,    5,    4,    5,    4,    5,
        4,    5,   35,    5,    5,    9,    5,    5,    4,    5,
        4,    5,    4,    5,    4,    5,   33,    5,    4,    5,
        4,    5,    5,    4,    5,    8,    9,    5,    4,    5,
        4,    5,    5,    4,    5,    5,    8,    4,    5,    4,
        5,    4,    5,    4,    5,    5,    4,    5,    5,   34,
        4,    5,    4,    5,    4,    5,    5,   32,   34,    4,
        5,   32,    4,    5,    4,    5,   34,    4,    5,   32
    } ;

static yyconst short int yy_accept[259] =
    {   0,
        1,    2,    3,    4,    7,   11,   13,   16,   19,   23,
       26,   30,   34,   37,   41,   44,   47,   52,   56,   60,
       64,   68,   72,   76,   80,   84,   88,   92,   96,  100,
      104,  108,  112,  116,  120,  121,  122,  123,  125,  126,
      127,  128,  129,  131,  132,  133,  134,  135,  136,  138,
      140,  142,  144,  145,  147,  148,  149,  151,  153,  155,
      157,  159,  161,  163,  165,  167,  169,  171,  173,  175,
      177,  179,  180,  181,  183,  185,  187,  188,  190,  191,
      192,  194,  196,  197,  199,  200,  201,  204,  206,  208,
      210,  211,  213,  215,  217,  219,  221,  223,  225,  227,

      229,  231,  233,  235,  237,  240,  242,  244,  245,  246,
      249,  251,  253,  254,  255,  256,  258,  259,  261,  261,
      263,  266,  268,  271,  272,  274,  276,  278,  280,  283,
      285,  287,  289,  291,  293,  295,  297,  299,  300,  301,
      304,  307,  309,  310,  311,  314,  317,  320,  321,  323,
      325,  327,  330,  333,  335,  337,  339,  341,  343,  345,
      347,  350,  351,  354,  357,  360,  362,  365,  367,  370,
      372,  374,  376,  378,  379,  381,  383,  384,  387,  390,
      391,  394,  395,  396,  396,  397,  398,  400,  401,  402,
      402,  403,  404,  406,  406,  407,  409,  410,  411,  411,

      412,  414,  415,  415,  417,  419,  421,  424,  425,  426,
      427,  428,  429,  429,  431,  433,  435,  438,  439,  439,
      441,  443,  444,  444,  444,  446,  448,  449,  449,  451,
      453,  454,  454,  456,  457,  458,  458,  460,  462,  464,
      464,  466,  467,  467,  469,  471,  473,  475,  475,  477,
      479,  480,  482,  483,  485,  488,  491,  491
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   27,
       32,   32,   32,   33,   34,   32,   32,   32,   35,   36,
       37,   32,   32,   38,   32,   32,   32,   39,   32,   32,
        1,   40,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   32,   32,   48,   32,   49,   50,   51,   52,
       53,   54,   32,   55,   56,   57,   58,   59,   32,   60,
       61,   32,   62,    1,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[64] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[281] =
    {   0,
        0,    0,  844,  831,  830,  915,   62,   64,  826,   63,
      822,  820,   54,  814,   61,   65,   74,   79,   66,  807,
      804,  791,  789,  134,  757,  744,   35,  731,  739,   46,
      708,  707,  742,  739,  731,   72,  196,  728,  197,  232,
       97,  915,  103,  104,  201,   99,  105,  287,  721,  199,
      115,  717,  111,  208,  249,  244,  336,  291,  709,    0,
      680,  650,  641,  630,  620,  620,  606,  610,  598,  586,
      264,  296,  366,  116,  198,  121,  204,  627,  213,  396,
      625,  188,  305,  209,  621,  230,  231,  614,  223,  331,
      340,  356,    0,  596,  594,  565,  564,  568,  562,  541,

      539,  540,  527,  276,  550,  416,  451,  443,  510,  243,
      274,  282,  278,  380,  549,  549,  417,  432,  543,  328,
      309,  388,  547,  453,  514,  515,  491,  489,    0,  492,
      490,  476,  475,  461,  452,  483,  585,  474,  503,  329,
      501,  358,  475,  240,  514,  495,  321,  552,  563,  464,
      468,    0,    0,  443,  439,  438,  435,  432,  605,  644,
      418,  476,  472,  455,    0,  430,    0,  407,  427,  400,
      396,  596,  636,  539,  396,  411,  524,    0,    0,  562,
        0,  598,  606,  234,  632,  522,  631,  654,  648,  308,
      689,  655,  656,  390,  324,  667,  690,  695,  379,  339,

      696,  697,  374,  700,  701,  712,  711,  714,  719,  392,
      722,  532,  362,  724,  729,  725,  745,  753,  362,  758,
      759,  587,  379,  297,  764,  915,  769,  359,  765,  772,
      776,  348,  779,  783,  915,  316,  787,  793,  790,  337,
      797,  803,  315,  808,  323,  810,  821,  247,  827,  261,
      915,  824,  915,  828,  248,  217,  915,  222,  205,  882,
      136,  884,  125,  886,   95,   82,  888,  890,  892,  894,
       69,  896,  898,  900,  902,  904,  906,  908,  910,  912
    } ;

static yyconst short int yy_def[281] =
    {   0,
      257,    1,  257,  258,  258,  257,  259,  260,  258,  261,
      258,  258,  258,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  257,   24,   24,   24,   24,   24,   24,
       24,   24,  258,  258,  258,  258,  259,  258,  259,  258,
      260,  257,  262,  260,  260,  258,  258,   40,  263,  258,
      264,  265,  258,  258,  258,  258,  258,  258,  258,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
      266,  259,   57,  262,  262,  267,  260,  258,  258,   57,
      263,  263,  258,  264,  268,  264,  269,  265,  265,  258,
      258,  258,   57,   24,   24,   24,   24,   24,   24,   24,

       24,   24,   24,  266,  263,  266,  263,  259,  259,  270,
      267,  267,  260,  258,   57,  263,  258,  258,  268,  264,
      269,  269,  271,  258,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,  266,  266,  263,  259,  259,  270,
      270,  267,  260,  258,  269,  271,  271,  258,  258,   24,
       24,   24,   24,   24,   24,   24,   24,   24,  266,  266,
      270,  260,  269,  271,   24,   24,   24,   24,   24,   24,
       24,  266,  266,  260,   24,   24,  272,   24,   24,  260,
       24,  273,  272,  274,  272,  272,  272,  260,  273,  275,
      273,  273,  273,  274,  274,  276,  272,  277,  275,  275,

      278,  273,  274,  276,  276,  276,  276,  272,  277,  279,
      277,  260,  275,  278,  278,  278,  278,  273,  274,  276,
      276,  272,  279,  257,  280,  257,  260,  275,  278,  278,
      273,  274,  276,  272,  257,  257,  280,  280,  267,  275,
      278,  273,  274,  276,  258,  280,  267,  275,  278,  258,
      257,  276,  257,  278,  263,  263,    0,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257
    } ;

static yyconst short int yy_nxt[979] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,   11,
       12,   13,    4,   14,    4,   15,   16,   17,   18,   18,
       19,   20,   21,   22,   23,    4,   24,   24,   24,   24,
       24,   24,   24,   25,   24,   24,   26,   24,   24,    4,
       24,   24,   24,   27,   24,   28,   24,   24,   29,   24,
       24,   24,   24,   30,   24,   24,   31,   24,   32,   24,
       24,   33,   34,   35,   35,   36,   42,   38,   43,  146,
       49,   35,   36,   39,   47,   44,   51,   36,   50,   50,
       50,   52,  104,   36,   63,   36,   59,   64,   49,   53,
       36,   54,   54,   55,   53,   88,   58,   58,   58,   42,

       67,   40,   48,   68,   56,   42,   42,   78,   44,   56,
       36,   45,   57,   78,   75,   44,   36,   85,   42,   56,
       76,   49,   36,   42,   56,   81,   86,   75,   90,   90,
       90,   87,  112,   57,   35,   35,   46,   35,   35,   35,
       35,   35,   35,   35,   35,   36,   35,   35,   35,   35,
       35,   60,   60,   60,   35,   35,   35,   35,   35,   35,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   35,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   35,   35,   35,   35,   82,

       42,   38,   38,   42,  116,   37,   42,   39,   39,   75,
       36,   85,   44,   71,  110,   44,   50,   50,   50,   36,
       86,   78,   35,   53,   36,   54,   54,   55,   82,   83,
      114,  114,   85,   85,   89,   40,   40,   37,   56,  123,
       37,  120,  122,   36,   83,   42,   49,  113,   78,   72,
       72,   36,   77,   56,  141,   36,   91,   37,   91,   82,
       36,   92,   92,   92,   53,   81,   55,   55,   55,  105,
       73,   37,   36,   37,   37,  106,   42,   81,   37,   56,
       42,  105,  194,   37,   42,  112,   37,  106,   37,   44,
       37,   73,   46,  112,   56,   46,  195,   35,  142,  235,

      253,   38,   36,  107,   79,   79,   53,   39,   58,   58,
       58,   85,   46,  108,  108,  107,   36,  117,  235,  117,
      122,   56,  118,  118,  118,   80,   46,  143,   46,   46,
       85,   42,  147,   46,   36,   40,   56,  164,   46,   86,
      141,   46,   36,   46,   87,   46,   80,   36,   90,   90,
       90,   36,  236,   93,   93,   93,  199,   92,   92,   92,
       42,  124,   93,   93,   93,   93,   93,   36,  251,  112,
      200,  236,  194,   92,   92,   92,  124,   93,   93,   93,
       93,   93,   93,  109,  109,  109,  195,  199,   78,  248,
       85,   36,  109,  109,  109,  109,  109,   46,   46,  145,

      243,  200,  240,  224,  116,  232,  228,  109,  109,  109,
      109,  109,  109,  115,  115,  115,  224,   81,  219,  213,
       42,  105,  115,  115,  115,  115,  115,  106,   36,  141,
      203,  182,  135,  181,  118,  118,  118,  115,  115,  115,
      115,  115,  115,   36,   35,  179,  178,  177,   38,  118,
      118,  118,  176,   81,   39,  107,  104,  105,  175,  104,
      138,  138,   82,  106,   36,  148,  147,  148,  136,  136,
      149,  149,  149,  171,   85,   35,  104,   42,   42,   38,
      170,  169,   40,  122,   81,   39,   44,   44,  105,  137,
      104,  107,  104,  104,  106,  168,  167,  104,  166,  165,

      159,  159,  104,   42,   35,  104,  147,  104,   38,  104,
      137,   35,  141,   40,   39,   38,   85,  161,  158,  157,
      174,   39,  107,  156,  184,  122,  184,  139,  139,  139,
      163,  155,  162,  185,  226,  185,  139,  139,  139,  139,
      139,   42,   40,   44,  154,  153,  152,  151,  150,   40,
       44,  139,  139,  139,  139,  139,  139,   78,  147,  257,
       82,   82,  197,   36,   42,  188,  144,  144,  144,  149,
      149,  149,  186,   44,   36,  144,  144,  144,  144,  144,
      149,  149,  149,  134,  180,  133,  187,  227,  132,  184,
      144,  144,  144,  144,  144,  144,   82,   81,  185,  131,

      190,  105,  160,  160,  160,  130,   81,  106,  184,  191,
      105,  160,  160,  160,  160,  160,  106,  185,  129,  128,
      127,  126,  172,  172,  125,   89,  160,  160,  160,  160,
      160,  160,  119,  184,  184,  107,   82,   81,   36,  234,
      103,  105,  185,  185,  107,   81,  192,  106,  196,  105,
      190,  102,  101,  100,  186,  106,   42,  190,  190,  191,
      193,  173,  173,  173,   99,   44,  191,  191,  187,  184,
      173,  173,  173,  173,  173,  107,  198,   98,  205,  186,
      186,   97,   96,  107,   95,  173,  173,  173,  173,  173,
      173,  190,  184,  187,  187,  202,  192,  210,  190,  190,

      191,  185,  184,  184,  192,  201,  211,  215,  191,   94,
      193,  205,  205,  184,  184,  206,  184,  220,  193,  212,
       36,  210,  205,  205,  210,  185,  190,  190,   89,  207,
      211,  190,   82,  211,  208,  215,  215,  192,  225,   36,
      215,  218,   36,  212,  216,  229,  212,  190,  206,  206,
       36,  193,  221,   36,   70,  190,  215,  222,  217,  206,
      184,  184,  207,  207,  191,  230,  210,  190,   69,  205,
      205,  226,  216,  207,  190,  238,  215,  216,  190,   66,
       44,  184,   65,  215,   62,  184,  217,  191,  239,  210,
      205,  217,  226,  216,  185,  210,  231,   61,  238,  190,

       36,  112,   36,  233,  238,  190,  206,  217,  215,  246,
      184,  239,  210,  216,  191,   36,  241,  239,   36,  205,
      207,  238,  244,  226,  227,   36,  184,  217,  242,  190,
      190,   36,  112,   36,  239,  205,  245,   36,  215,  215,
      249,   36,   36,  257,  257,  247,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  250,  257,  257,  257,
      252,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  247,  255,  257,  254,
      257,  256,   41,   41,   74,   74,   84,   84,  111,  111,
       85,   85,  121,  121,  140,  140,  183,  183,  189,  189,

      184,  184,  190,  190,  204,  204,  209,  209,  214,  214,
      223,  223,  237,  237,    3,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257
    } ;

static yyconst short int yy_chk[979] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    7,   10,   13,    8,    7,    8,  271,
       13,   10,   15,    7,   10,    8,   16,   19,   15,   15,
       15,   16,  266,   36,   27,   17,   19,   27,   36,   17,
       18,   17,   17,   17,   18,  265,   18,   18,   18,   41,

       30,    7,   10,   30,   17,   43,   44,   46,   41,   18,
       46,    8,   17,   47,   43,   44,   47,   51,   74,   17,
       44,   47,   53,   76,   18,  263,   51,   74,   53,   53,
       53,   51,   76,   17,   24,   24,  261,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   37,   39,   82,

       75,   37,   39,   45,   82,  259,   77,   37,   39,   75,
       50,   84,   45,   39,   75,   77,   50,   50,   50,   54,
       84,   79,  258,   54,   79,   54,   54,   54,  256,   50,
       79,   79,   86,   87,   89,   37,   39,   40,   54,   89,
       40,   86,   87,   40,   50,  110,   86,   77,  144,   40,
       40,  144,   45,   54,  110,   56,   56,   40,   56,  255,
       55,   56,   56,   56,   55,   71,   55,   55,   55,   71,
       40,   40,  250,   40,   40,   71,  111,  104,   40,   55,
      113,  104,  184,   40,  112,  111,   40,  104,   40,  113,
       40,   40,   48,  112,   55,   48,  184,   72,  112,  224,

      248,   72,   58,   71,   48,   48,   58,   72,   58,   58,
       58,  121,   48,   72,   72,  104,   83,   83,  236,   83,
      121,   58,   83,   83,   83,   48,   48,  113,   48,   48,
      120,  140,  147,   48,  245,   72,   58,  147,   48,  120,
      140,   48,   90,   48,  120,   48,   48,   57,   90,   90,
       90,   91,  224,   57,   57,   57,  190,   91,   91,   91,
      142,   90,   57,   57,   57,   57,   57,   92,  243,  142,
      190,  236,  195,   92,   92,   92,   90,   57,   57,   57,
       57,   57,   57,   73,   73,   73,  195,  200,  114,  240,
      122,  114,   73,   73,   73,   73,   73,  114,  114,  122,

      232,  200,  228,  223,  122,  219,  213,   73,   73,   73,
       73,   73,   73,   80,   80,   80,  210,  106,  203,  199,
      161,  106,   80,   80,   80,   80,   80,  106,  117,  161,
      194,  176,  106,  175,  117,  117,  117,   80,   80,   80,
       80,   80,   80,  118,  108,  171,  170,  169,  108,  118,
      118,  118,  168,  135,  108,  106,  107,  135,  166,  107,
      108,  108,  107,  135,  124,  124,  164,  124,  107,  107,
      124,  124,  124,  158,  163,  138,  107,  143,  162,  138,
      157,  156,  108,  163,  136,  138,  143,  162,  136,  107,
      107,  135,  107,  107,  136,  155,  154,  107,  151,  150,

      136,  136,  107,  141,  139,  107,  146,  107,  139,  107,
      107,  109,  141,  138,  139,  109,  145,  141,  134,  133,
      162,  109,  136,  132,  186,  145,  177,  109,  109,  109,
      145,  131,  143,  186,  212,  177,  109,  109,  109,  109,
      109,  174,  139,  212,  130,  128,  127,  126,  125,  109,
      174,  109,  109,  109,  109,  109,  109,  115,  123,  119,
      116,  105,  186,  148,  180,  180,  115,  115,  115,  148,
      148,  148,  177,  180,  149,  115,  115,  115,  115,  115,
      149,  149,  149,  103,  174,  102,  177,  212,  101,  222,
      115,  115,  115,  115,  115,  115,  137,  172,  222,  100,

      182,  172,  137,  137,  137,   99,  159,  172,  183,  182,
      159,  137,  137,  137,  137,  137,  159,  183,   98,   97,
       96,   95,  159,  159,   94,   88,  137,  137,  137,  137,
      137,  137,   85,  187,  185,  172,   81,  173,   78,  222,
       70,  173,  187,  185,  159,  160,  182,  173,  185,  160,
      189,   69,   68,   67,  183,  160,  188,  192,  193,  189,
      182,  160,  160,  160,   66,  188,  192,  193,  183,  196,
      160,  160,  160,  160,  160,  173,  188,   65,  196,  187,
      185,   64,   63,  160,   62,  160,  160,  160,  160,  160,
      160,  191,  197,  187,  185,  192,  189,  198,  201,  202,

      191,  197,  204,  205,  193,  191,  198,  201,  202,   61,
      189,  204,  205,  207,  206,  196,  208,  205,  193,  198,
       59,  209,  207,  206,  211,  208,  214,  216,   52,  196,
      209,  215,   49,  211,  197,  214,  216,  191,  211,   38,
      215,  202,   35,  209,  201,  215,  211,  217,  204,  205,
       34,  191,  206,   33,   32,  218,  217,  208,  201,  207,
      220,  221,  204,  205,  218,  216,  225,  229,   31,  220,
      221,  227,  214,  207,  230,  225,  229,  215,  231,   29,
      227,  233,   28,  230,   26,  234,  214,  231,  225,  237,
      233,  215,  239,  217,  234,  238,  218,   25,  237,  241,

       23,  239,   22,  221,  238,  242,  220,  217,  241,  238,
      244,  237,  246,  229,  242,   21,  230,  238,   20,  244,
      220,  246,  233,  247,  227,   14,  252,  229,  231,  249,
      254,   12,  247,   11,  246,  252,  234,    9,  249,  254,
      241,    5,    4,    3,    0,  239,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  242,    0,    0,    0,
      244,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  247,  252,    0,  249,
        0,  254,  260,  260,  262,  262,  264,  264,  267,  267,
      268,  268,  269,  269,  270,  270,  272,  272,  273,  273,

      274,  274,  275,  275,  276,  276,  277,  277,  278,  278,
      279,  279,  280,  280,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
#line 2 "scanner.ll"

#define YY_NO_UNPUT
#include <stdlib.h>
#include <ctype.h>

class QString;

#ifndef KDE_USE_FINAL
#include "yacc.cc.h"
#endif

extern int idl_line_no;
int comment_mode;

#include <qstring.h>

static long ascii_to_longlong( long base, const char *s )
{
  long ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static double ascii_to_longdouble (const char *s)
{
  double d;
#ifdef HAVE_SCANF_LF
  sscanf (s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod (s, NULL);
#endif
  return d;
}

static char translate_char( const char *s )
{
  char c = *s++;

  if( c != '\\' )
    return c;
  c = *s++;
  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    return (char) ascii_to_longlong( 16, s );
  default:
    // Gotta be an octal
    return (char) ascii_to_longlong( 8, s );
  }
}


/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 825 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 126 "scanner.ll"


#line 979 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 258 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 257 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 128 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 129 "scanner.ll"
{ idl_line_no++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 131 "scanner.ll"
{ comment_mode = 1; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 132 "scanner.ll"
{ comment_mode = 0; /* this also eats one-line comments */ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 133 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 135 "scanner.ll"
;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 136 "scanner.ll"
{
                          exit( 1 );
                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 139 "scanner.ll"
{
			  QString s( yytext );
			  yylval._str = new QString( s.mid( 10, s.stripWhiteSpace().length() - 11 ) );
                          idl_line_no++;
                          return T_INCLUDE;
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "scanner.ll"
{
                          idl_line_no++;
                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 148 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 150 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "scanner.ll"
return T_COLON;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 153 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 154 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 155 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "scanner.ll"
return T_LESS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "scanner.ll"
return T_GREATER;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "scanner.ll"
return T_SCOPE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 161 "scanner.ll"
return T_CONST;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 162 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 163 "scanner.ll"
return T_CLASS;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 164 "scanner.ll"
return T_VIRTUAL;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 165 "scanner.ll"
return T_PUBLIC;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 166 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 167 "scanner.ll"
return T_TYPEDEF;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 168 "scanner.ll"
return T_DCOP;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 169 "scanner.ll"
;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 170 "scanner.ll"
return T_NULL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 172 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 173 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 174 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 175 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 177 "scanner.ll"
{
			  yylval._str = new QString( yytext );
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 37:
#line 182 "scanner.ll"
case 38:
#line 183 "scanner.ll"
case 39:
#line 184 "scanner.ll"
case 40:
#line 185 "scanner.ll"
case 41:
YY_RULE_SETUP
#line 185 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_DOUBLE_LITERAL;
			}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 189 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 193 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 197 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 201 "scanner.ll"
{
                          QCString s( yytext );
	                  s = s.mid( 1, s.length() - 2 );
			  yylval._char = translate_char( s );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 207 "scanner.ll"
{
                          QString s( yytext );
                          yylval._str = new QString( s.mid( 1, s.length() - 2 ) );
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 212 "scanner.ll"
{
                          return T_UNKNOWN;
                        }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 216 "scanner.ll"
ECHO;
	YY_BREAK
#line 1326 "scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 258 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 258 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 257);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 216 "scanner.ll"


void dcopidlInitFlex( const char *_code )
{
   comment_mode = 0;
   yy_switch_to_buffer( yy_scan_string( _code ) );
}
