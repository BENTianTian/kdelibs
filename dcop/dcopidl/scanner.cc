#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
static yyconst short int yy_acclist[371] =
    {   0,
        5,    5,   53,    5,   51,   52,    1,    5,   51,   52,
        2,   52,    5,   51,   52,    5,   51,   52,    5,   20,
       51,   52,    5,   51,   52,    5,   13,   51,   52,    5,
       14,   51,   52,    6,   18,   51,   52,    5,   17,   51,
       52,    5,   51,   52,    5,   51,   52,    5,   39,   47,
       51,   52,    5,   46,   51,   52,    5,   15,   51,   52,
        5,   19,   51,   52,    5,   21,   51,   52,    5,   24,
       51,   52,    5,   22,   51,   52,    5,   40,   51,   52,
        5,   40,   51,   52,    5,   40,   51,   52,    5,   40,
       51,   52,    5,   40,   51,   52,    5,   40,   51,   52,

        5,   40,   51,   52,    5,   40,   51,   52,    5,   40,
       51,   52,    5,   40,   51,   52,    5,   11,   51,   52,
        5,   12,   51,   52,    5,   16,   51,   52,    5,    5,
        5,   50,    5,    5,   10,    5,    8,    5,    5,    5,
        4,    5,   44,    3,    5,    7,    5,    5,   47,    5,
        5,    5,   48,    5,   46,    5,   23,    5,   40,    5,
        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   40,    5,   40,    5,   40,   50,    5,    5,    5,
        8,    8,    5,    5,   49,   49,    5,    5,    5,    5,

        7,    7,    5,   43,    5,    5,   42,    5,   48,    5,
        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   40,    5,   40,    5,   40,    5,   40,    5,    5,
        5,    5,    5,    5,    5,   45,    5,    5,   40,    5,
       40,    5,   40,    5,   40,    5,   40,    5,   26,   40,
        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   34,   40,    5,   40,    5,   40,    5,   40,    5,
        5,    5,    5,    5,    5,   41,    5,   40,    5,   40,
        5,   27,   40,    5,   25,   40,    5,   40,    5,   40,

        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   40,    5,    5,   37,   40,    5,   40,    5,   35,
       40,    5,   40,    5,   40,    5,   30,   40,    5,   33,
       40,    5,   28,   40,    5,   40,    5,   40,    5,    5,
       40,    5,   32,   40,    5,   40,    5,   36,   40,    5,
       29,   40,    5,    5,   38,   40,    5,   40,    5,    5,
       31,   40,    5,    5,   10,    5,    9,   10,    5,    9
    } ;

static yyconst short int yy_accept[193] =
    {   0,
        1,    2,    3,    4,    7,   11,   13,   16,   19,   23,
       26,   30,   34,   38,   42,   45,   48,   53,   57,   61,
       65,   69,   73,   77,   81,   85,   89,   93,   97,  101,
      105,  109,  113,  117,  121,  125,  129,  130,  131,  133,
      133,  134,  135,  136,  138,  138,  139,  140,  140,  141,
      142,  144,  145,  147,  148,  150,  151,  152,  154,  156,
      158,  160,  161,  163,  165,  167,  169,  171,  173,  175,
      177,  179,  181,  183,  185,  187,  188,  188,  189,  190,
      192,  193,  194,  196,  197,  198,  199,  200,  202,  203,
      205,  206,  208,  210,  211,  213,  215,  217,  219,  221,

      223,  225,  227,  229,  231,  233,  235,  237,  239,  239,
      239,  240,  241,  242,  243,  244,  245,  247,  248,  250,
      252,  254,  256,  258,  261,  263,  265,  267,  269,  271,
      274,  276,  278,  280,  280,  280,  281,  282,  283,  284,
      285,  287,  289,  291,  294,  297,  299,  301,  303,  305,
      307,  309,  311,  313,  313,  313,  314,  317,  319,  322,
      324,  326,  329,  332,  335,  337,  339,  340,  342,  345,
      347,  350,  353,  354,  357,  359,  360,  363,  364,  365,
      366,  366,  367,  367,  367,  367,  369,  370,  371,  371,
      371,  371

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   27,
       32,   32,   32,   33,   34,   32,   32,   32,   35,   36,
       37,   32,   32,   38,   32,   32,   32,   39,   32,   32,
        1,   40,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   48,   32,   49,   32,   50,   51,   52,   53,
       54,   55,   32,   56,   57,   58,   59,   60,   32,   61,
       62,   32,   63,    1,   64,   65,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[66] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    4,    1,
        1,    5,    1,    1,    1,    1,    1,    6,    6,    7,
        1,    1,    1,    1,    1,    4,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        1,    6,    6,    7,    7,    7,    6,    1,    1,    1,
        1,    1,    4,    1,    1,    4,    1,    4,    1,    4,
        4,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[208] =
    {   0,
        0,    0,  654,    0,    0,  778,   64,   66,    0,   65,
        0,    0,  636,    0,   61,   56,   67,   72,  625,    0,
        0,    0,    0,  128,  193,  603,   43,   48,  602,   52,
       58,   34,   61,    0,    0,    0,    0,  115,    0,  106,
      253,  111,  778,  119,  639,  158,  631,  630,  309,  778,
      138,  778,  626,  106,  144,  204,  158,  353,  209,    0,
      596,  610,  118,  131,   78,  126,   41,  140,  133,  145,
       99,  142,  124,  171,  180,  778,  212,  235,  383,  236,
      624,  240,    0,  778,  251,  413,  248,  610,    0,  258,
      226,  262,    0,  460,  245,  257,  148,  208,  242,  246,

      172,  247,  250,  266,  258,  261,  262,  271,  304,    0,
      319,  524,  327,  315,  563,  322,  327,  372,  580,  291,
      317,  319,  295,  576,  314,  322,  320,  345,  333,  575,
      313,  197,  347,  398,  605,  525,  533,  526,  593,  389,
      400,  398,  348,  557,  556,  380,  364,  404,  405,  396,
      395,  487,  382,  337,  534,  544,  555,  422,  546,  500,
      491,  539,  509,  493,  516,  507,  572,  521,  431,  554,
      411,  276,  574,  256,  409,  576,  223,  601,  616,   70,
      390,  600,   47,  557,  558,  778,  617,  778,  573,  598,
      778,  674,  681,  688,  695,  702,  709,  716,  723,  730,

      734,  740,  747,  749,  756,  763,  770
    } ;

static yyconst short int yy_def[208] =
    {   0,
      191,    1,  191,  192,  192,  191,  193,  194,  192,  195,
      192,  192,  191,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  196,  196,   25,   25,   25,   25,   25,
       25,   25,   25,  192,  192,  192,  192,  193,  192,  197,
      192,  194,  191,  198,  199,  194,  192,  191,  192,  191,
      192,  191,  200,  192,  192,  192,  192,  192,  192,  192,
       25,  192,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  191,  201,  193,  192,  198,
      202,  194,  192,  191,  192,  192,  192,  200,  203,  192,
      192,  192,   58,  191,   25,   25,   25,   25,   25,   25,

       25,   25,   25,   25,   25,   25,   25,   25,  197,  204,
      193,  193,  194,  192,  192,  192,  192,  192,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  197,  197,  193,  193,  194,  192,  192,
      192,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,  197,  197,  194,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  194,   25,   25,   25,
       25,   25,  194,   25,   25,  194,   25,  205,  205,  206,
      207,  194,  206,  191,  199,  191,  194,  191,  191,  199,
        0,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191
    } ;

static yyconst short int yy_nxt[844] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,   11,
       12,   13,    4,   14,    4,   15,   16,   17,   18,   18,
       19,   20,   21,   22,   23,    4,   24,   24,   24,   24,
       24,   24,   24,   25,   24,   24,   26,   24,   24,    4,
       24,   24,   24,   27,   24,   28,   24,   24,   24,   29,
       24,   24,   24,   24,   30,   24,   31,   32,   24,   33,
       24,   24,   34,   35,   36,   37,   37,   52,   43,   39,
       44,  184,   53,   37,   61,   40,   48,   45,   51,   51,
       51,   61,   54,   61,   55,   55,   56,   54,   61,   59,
       59,   59,   61,   65,  184,   74,   66,   57,   61,   99,

       67,   61,   57,   41,   49,   58,   71,   69,   72,   75,
       70,   76,   57,   43,   46,   73,   37,   57,   61,   97,
       39,   43,   45,   90,   90,   90,   40,   58,   37,   37,
       81,   37,   37,   37,   37,   37,   37,   37,   37,   61,
       37,   37,   37,   37,   37,   77,  104,   95,   62,   37,
       37,   37,   37,   37,   41,   51,   51,   51,   61,   54,
       43,   55,   55,   56,   61,   96,   61,   37,   87,   45,
       91,   61,   91,   61,   57,   92,   92,   92,   98,  106,
       61,  101,   61,   87,  100,   61,  102,  103,   61,   57,
       37,   37,   37,   37,   37,  105,   37,   37,   37,   37,

       37,   37,   37,   37,  122,   37,   37,   37,   37,   37,
       82,   61,   61,   62,   37,   37,   37,   37,   37,   54,
       61,   56,   56,   56,   54,  107,   59,   59,   59,  109,
      109,  126,   37,   63,   57,  108,   37,   61,   43,   57,
       39,  152,   43,   92,   92,   92,   40,   81,   61,   57,
      110,   45,  111,  111,   57,   37,   37,   37,   38,   83,
      116,   38,  116,   61,  123,  117,  117,  117,  114,  114,
       78,   78,  110,  120,   41,   90,   90,   90,   38,   92,
       92,   92,   61,  113,  121,   61,   61,   61,  118,  125,
       61,   79,   38,  124,   38,   38,   61,   61,   61,   38,

      128,   61,   61,  118,  127,   38,   61,  132,   38,   76,
       38,   61,   38,   79,   47,  130,   61,   47,  129,  131,
       37,  134,  134,   83,   39,  142,   85,   85,  133,   43,
       40,   61,   47,   47,   47,   61,  136,  136,   45,  117,
      117,  117,   76,   77,  117,  117,  117,   86,   47,  143,
       47,   47,  145,   61,   61,   47,  151,   61,   41,   61,
       61,   47,   61,  147,   47,  148,   47,  146,   47,   86,
       93,   93,   93,   61,  150,  144,   77,  138,  158,   93,
       93,   93,   93,   93,  140,   61,  140,   61,   61,  141,
      141,  141,  180,  149,   93,   93,   93,   93,   93,   93,

      112,  112,  112,   76,   61,  153,  141,  141,  141,  112,
      112,  112,  112,  112,  185,  154,  154,  141,  141,  141,
       61,  160,   61,  166,  112,  112,  112,  112,  112,  112,
      115,  115,  115,  157,  159,   61,   61,   77,   61,  115,
      115,  115,  115,  115,   61,   61,  163,  161,  162,   61,
      168,   61,  164,  177,  115,  115,  115,  115,  115,  115,
       37,   37,   61,   37,   37,   37,   37,   37,   37,   37,
       37,   61,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,   37,

      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,   37,   37,   37,   37,   37,   61,   43,   39,
       39,   61,  165,   61,   37,   40,   40,   45,   39,   76,
       61,  137,  137,  137,   40,  169,   43,   61,  170,   61,
      137,  137,  137,  137,  137,   45,   61,  172,  174,  188,
      186,   61,  171,   41,   41,  137,  137,  137,  137,  137,
      137,   83,   41,   77,   43,  188,   43,  176,   43,   61,
      139,  139,  139,   45,  156,   45,   61,   45,  167,  139,
      139,  139,  139,  139,   61,   61,   61,   61,  178,  175,

      186,   83,  186,  180,  139,  139,  139,  139,  139,  139,
       76,   45,  181,  189,  190,   61,   61,  173,  180,  186,
       61,   89,  155,  155,  155,  182,   43,  181,   45,  189,
       94,  155,  155,  155,  155,  155,   61,   89,   84,   83,
      182,   43,   68,   64,   77,   60,  155,  155,  155,  155,
      155,  155,   50,  191,  190,  191,  187,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  187,   37,   37,  191,   37,  191,   37,
       37,   38,   38,  191,   38,   38,   38,   38,   42,   42,
       42,   42,   42,   42,   42,   47,   47,  191,   47,   47,

       47,   47,   61,   61,  191,   61,  191,   61,   61,   40,
      191,  191,   40,   40,   40,   40,   80,   80,   80,   80,
       80,   80,   80,   45,   45,   45,   45,   45,   45,   45,
       88,   88,  191,   88,   88,   88,   88,   40,  191,   40,
       81,   81,   81,   81,   81,   81,   81,   89,   89,  191,
       89,   89,   89,   89,  135,  135,  179,  179,  179,  179,
      179,  179,  179,  183,  183,  183,  183,  183,  183,  183,
      181,  181,  181,  181,  181,  181,  181,    3,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191
    } ;

static yyconst short int yy_chk[844] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    7,   10,   16,    8,    7,
        8,  183,   16,   10,   32,    7,   10,    8,   15,   15,
       15,   67,   17,   27,   17,   17,   17,   18,   28,   18,
       18,   18,   30,   27,  180,   32,   27,   17,   31,   67,

       28,   33,   18,    7,   10,   17,   31,   30,   31,   33,
       30,   40,   17,   42,    8,   31,   38,   18,   65,   65,
       38,   44,   42,   54,   54,   54,   38,   17,   24,   24,
       44,   24,   24,   24,   24,   24,   24,   24,   24,   71,
       24,   24,   24,   24,   24,   40,   71,   63,   24,   24,
       24,   24,   24,   24,   38,   51,   51,   51,   63,   55,
       46,   55,   55,   55,   73,   64,   66,   24,   51,   46,
       57,   64,   57,   69,   55,   57,   57,   57,   66,   73,
       68,   69,   72,   51,   68,   70,   69,   70,   97,   55,
       24,   24,   24,   25,   25,   72,   25,   25,   25,   25,

       25,   25,   25,   25,   97,   25,   25,   25,   25,   25,
       46,   74,  101,   25,   25,   25,   25,   25,   25,   56,
       75,   56,   56,   56,   59,   74,   59,   59,   59,   77,
       77,  101,   25,   25,   56,   75,   78,  132,   80,   59,
       78,  132,   82,   91,   91,   91,   78,   80,   98,   56,
       77,   82,   78,   78,   59,   25,   25,   25,   41,   85,
       87,   41,   87,  177,   98,   87,   87,   87,   85,   85,
       41,   41,   77,   95,   78,   90,   90,   90,   41,   92,
       92,   92,   99,   82,   96,   95,  100,  102,   90,  100,
      103,   41,   41,   99,   41,   41,  174,   96,  105,   41,

      103,  106,  107,   90,  102,   41,  104,  107,   41,  109,
       41,  108,   41,   41,   49,  105,  172,   49,  104,  106,
      111,  109,  109,  114,  111,  120,   49,   49,  108,  113,
      111,  120,  114,  114,   49,  123,  111,  111,  113,  116,
      116,  116,  154,  109,  117,  117,  117,   49,   49,  121,
       49,   49,  123,  131,  125,   49,  131,  121,  111,  122,
      127,   49,  126,  126,   49,  127,   49,  125,   49,   49,
       58,   58,   58,  129,  129,  122,  154,  113,  143,   58,
       58,   58,   58,   58,  118,  128,  118,  133,  143,  118,
      118,  118,  181,  128,   58,   58,   58,   58,   58,   58,

       79,   79,   79,  134,  147,  133,  140,  140,  140,   79,
       79,   79,   79,   79,  181,  134,  134,  141,  141,  141,
      146,  147,  153,  153,   79,   79,   79,   79,   79,   79,
       86,   86,   86,  142,  146,  151,  150,  134,  142,   86,
       86,   86,   86,   86,  148,  149,  150,  148,  149,  175,
      158,  171,  151,  175,   86,   86,   86,   86,   86,   86,
       94,   94,  158,   94,   94,   94,   94,   94,   94,   94,
       94,  169,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   94,   94,   94,  112,  136,  152,  138,  112,
      136,  161,  152,  164,  137,  112,  136,  138,  137,  155,
      160,  112,  112,  112,  137,  160,  156,  166,  161,  163,
      112,  112,  112,  112,  112,  156,  165,  166,  168,  184,
      185,  168,  165,  112,  136,  112,  112,  112,  112,  112,
      112,  115,  137,  155,  167,  189,  173,  173,  176,  162,
      115,  115,  115,  167,  138,  173,  159,  176,  156,  115,
      115,  115,  115,  115,  170,  157,  145,  144,  176,  170,

      190,  139,  182,  178,  115,  115,  115,  115,  115,  115,
      135,  182,  178,  184,  185,  130,  124,  167,  179,  187,
      119,   88,  135,  135,  135,  178,   81,  179,  187,  189,
       62,  135,  135,  135,  135,  135,   61,   53,   48,   47,
      179,   45,   29,   26,  135,   19,  135,  135,  135,  135,
      135,  135,   13,    3,  190,    0,  182,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  187,  192,  192,    0,  192,    0,  192,
      192,  193,  193,    0,  193,  193,  193,  193,  194,  194,
      194,  194,  194,  194,  194,  195,  195,    0,  195,  195,

      195,  195,  196,  196,    0,  196,    0,  196,  196,  197,
        0,    0,  197,  197,  197,  197,  198,  198,  198,  198,
      198,  198,  198,  199,  199,  199,  199,  199,  199,  199,
      200,  200,    0,  200,  200,  200,  200,  201,    0,  201,
      202,  202,  202,  202,  202,  202,  202,  203,  203,    0,
      203,  203,  203,  203,  204,  204,  205,  205,  205,  205,
      205,  205,  205,  206,  206,  206,  206,  206,  206,  206,
      207,  207,  207,  207,  207,  207,  207,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
#line 2 "scanner.ll"

#define YY_NO_UNPUT
#include <stdlib.h>
#include <ctype.h>

class QString;

#ifndef KDE_USE_FINAL
#include "yacc.cc.h"
#endif

extern int idl_line_no;
int comment_mode;

#include <qstring.h>

static long ascii_to_longlong( long base, const char *s )
{
  long ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static double ascii_to_longdouble (const char *s)
{
  double d;
#ifdef HAVE_SCANF_LF
  sscanf (s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod (s, NULL);
#endif
  return d;
}

static char translate_char( const char *s )
{
  char c = *s++;

  if( c != '\\' )
    return c;
  c = *s++;
  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    return (char) ascii_to_longlong( 16, s );
  default:
    // Gotta be an octal
    return (char) ascii_to_longlong( 8, s );
  }
}


/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 764 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 125 "scanner.ll"


#line 918 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 192 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 191 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 127 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 128 "scanner.ll"
{ idl_line_no++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 130 "scanner.ll"
{ comment_mode = 1; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 131 "scanner.ll"
{ if (!comment_mode) { REJECT; } else { comment_mode = 0; } }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 132 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 133 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 135 "scanner.ll"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 136 "scanner.ll"
{
                          exit( 1 );
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 139 "scanner.ll"
{
			  QString s( yytext );
			  yylval._str = new QString( s.mid( 10, s.stripWhiteSpace().length() - 11 ) );
                          idl_line_no++;
                          return T_INCLUDE;
                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 145 "scanner.ll"
{
                          idl_line_no++;
                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 148 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 149 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 150 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 151 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 152 "scanner.ll"
return T_COLON;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 153 "scanner.ll"
return T_TILDE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 154 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 155 "scanner.ll"
return T_ASTERISK;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 157 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 158 "scanner.ll"
return T_LESS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "scanner.ll"
return T_GREATER;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 160 "scanner.ll"
return T_SCOPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 161 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 163 "scanner.ll"
return T_CONST;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 164 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 165 "scanner.ll"
return T_CLASS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 166 "scanner.ll"
return T_STRUCT;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 167 "scanner.ll"
return T_VIRTUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 168 "scanner.ll"
return T_PUBLIC;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "scanner.ll"
return T_PROTECTED;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 170 "scanner.ll"
return T_PRIVATE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 171 "scanner.ll"
return T_SIGNAL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 172 "scanner.ll"
return T_SLOT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 173 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 174 "scanner.ll"
return T_TYPEDEF;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 175 "scanner.ll"
return T_DCOP;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 176 "scanner.ll"
;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "scanner.ll"
return T_NULL;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 179 "scanner.ll"
{
			  yylval._str = new QString( yytext );
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 41:
#line 184 "scanner.ll"
case 42:
#line 185 "scanner.ll"
case 43:
#line 186 "scanner.ll"
case 44:
#line 187 "scanner.ll"
case 45:
YY_RULE_SETUP
#line 187 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_DOUBLE_LITERAL;
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 191 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 195 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 199 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 203 "scanner.ll"
{
                          QCString s( yytext );
	                  s = s.mid( 1, s.length() - 2 );
			  yylval._char = translate_char( s );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 209 "scanner.ll"
{
                          QString s( yytext );
                          yylval._str = new QString( s.mid( 1, s.length() - 2 ) );
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 214 "scanner.ll"
{
                          return T_UNKNOWN;
                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 218 "scanner.ll"
ECHO;
	YY_BREAK
#line 1285 "scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 192 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 192 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 191);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 218 "scanner.ll"


void dcopidlInitFlex( const char *_code )
{
   comment_mode = 0;
   yy_switch_to_buffer( yy_scan_string( _code ) );
}
