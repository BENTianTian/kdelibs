#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 62
#define YY_END_OF_BUFFER 63
static yyconst short int yy_acclist[467] =
    {   0,
        5,    5,   63,    5,   61,   62,    1,    5,   61,   62,
        2,   62,    5,   61,   62,    5,   61,   62,    5,   20,
       61,   62,    5,   61,   62,    5,   13,   61,   62,    5,
       14,   61,   62,    6,   18,   61,   62,    5,   17,   61,
       62,    5,   61,   62,    5,   25,   61,   62,    5,   61,
       62,    5,   49,   57,   61,   62,    5,   56,   61,   62,
        5,   15,   61,   62,    5,   19,   61,   62,    5,   21,
       61,   62,    5,   24,   61,   62,    5,   22,   61,   62,
        5,   50,   61,   62,    5,   50,   61,   62,    5,   50,
       61,   62,    5,   50,   61,   62,    5,   50,   61,   62,

        5,   50,   61,   62,    5,   50,   61,   62,    5,   50,
       61,   62,    5,   50,   61,   62,    5,   50,   61,   62,
        5,   50,   61,   62,    5,   50,   61,   62,    5,   50,
       61,   62,    5,   50,   61,   62,    5,   50,   61,   62,
        5,   11,   61,   62,    5,   12,   61,   62,    5,   16,
       61,   62,    5,    5,    5,   60,    5,    5,   10,    5,
        8,    5,    5,    5,    4,    5,   26,    5,   54,    3,
        5,    7,    5,    5,   57,    5,    5,    5,   58,    5,
       56,    5,   23,    5,   50,    5,   50,    5,   50,    5,
       50,    5,   50,    5,   50,    5,   50,    5,   50,    5,

       50,    5,   50,    5,   50,    5,   50,    5,   50,    5,
       50,    5,   50,    5,   50,    5,   50,    5,   50,    5,
       50,    5,   50,   60,    5,    5,    5,    8,    8,    5,
        5,   59,   59,    5,    5,    5,    5,    7,    7,    5,
       53,    5,    5,   52,    5,   58,    5,   50,    5,   50,
        5,   50,    5,   50,    5,   50,    5,   50,    5,   50,
        5,   50,    5,   50,    5,   50,    5,   50,    5,   50,
        5,   50,    5,   50,    5,   50,    5,   50,    5,   50,
        5,   50,    5,   50,    5,   50,    5,   50,    5,    5,
        5,    5,    5,    5,    5,   55,    5,    5,   50,    5,

       50,    5,   50,    5,   43,   50,    5,   50,    5,   50,
        5,   28,   50,    5,   50,    5,   50,    5,   50,    5,
       50,    5,   50,    5,   50,    5,   50,    5,   50,    5,
       50,    5,   50,    5,   41,   50,    5,   50,    5,   50,
        5,   50,    5,    5,    5,    5,    5,    5,   51,    5,
       44,   50,    5,   50,    5,   50,    5,   29,   50,    5,
       27,   50,    5,   42,   50,    5,   50,    5,   50,    5,
       50,    5,   50,    5,   50,    5,   50,    5,   50,    5,
       40,   50,    5,   50,    5,   50,    5,   50,    5,   50,
        5,   50,    5,    5,   47,   50,    5,   50,    5,   45,

       50,    5,   50,    5,   50,    5,   32,   50,    5,   39,
       50,    5,   38,   50,    5,   34,   50,    5,   33,   50,
        5,   30,   50,    5,   50,    5,   50,    5,   50,    5,
        5,   50,    5,   37,   50,    5,   50,    5,   46,   50,
        5,   50,    5,   31,   50,    5,    5,   48,   50,    5,
       50,    5,   35,   50,    5,    5,   36,   50,    5,    5,
       10,    5,    9,   10,    5,    9
    } ;

static yyconst short int yy_accept[230] =
    {   0,
        1,    2,    3,    4,    7,   11,   13,   16,   19,   23,
       26,   30,   34,   38,   42,   45,   49,   52,   57,   61,
       65,   69,   73,   77,   81,   85,   89,   93,   97,  101,
      105,  109,  113,  117,  121,  125,  129,  133,  137,  141,
      145,  149,  153,  154,  155,  157,  157,  158,  159,  160,
      162,  162,  163,  164,  164,  165,  166,  168,  170,  171,
      173,  174,  176,  177,  178,  180,  182,  184,  186,  188,
      190,  192,  194,  196,  198,  200,  202,  204,  206,  208,
      210,  212,  214,  216,  218,  220,  222,  224,  225,  225,
      226,  227,  229,  230,  231,  233,  234,  235,  236,  237,

      239,  240,  242,  243,  245,  247,  249,  251,  253,  255,
      257,  259,  261,  263,  265,  267,  269,  271,  273,  275,
      277,  279,  281,  283,  285,  287,  289,  289,  289,  290,
      291,  292,  293,  294,  295,  297,  298,  300,  302,  304,
      307,  309,  311,  314,  316,  318,  320,  322,  324,  326,
      328,  330,  332,  334,  337,  339,  341,  343,  343,  343,
      344,  345,  346,  347,  348,  350,  353,  355,  357,  360,
      363,  366,  368,  370,  372,  374,  376,  378,  380,  383,
      385,  387,  389,  391,  393,  393,  393,  394,  397,  399,
      402,  404,  406,  409,  412,  415,  418,  421,  424,  426,

      428,  430,  431,  433,  436,  438,  441,  443,  446,  447,
      450,  452,  455,  456,  459,  460,  461,  462,  462,  463,
      463,  463,  463,  465,  466,  467,  467,  467,  467
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   33,   34,   35,   36,   33,   33,   37,   38,
       39,   40,   41,   42,   43,   33,   33,   44,   33,   33,
        1,   45,    1,    1,   46,    1,   47,   48,   49,   50,

       51,   52,   53,   33,   54,   33,   55,   56,   57,   58,
       59,   60,   33,   61,   62,   63,   64,   65,   33,   66,
       67,   33,   68,    1,   69,   70,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[71] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    4,    1,
        1,    5,    1,    1,    1,    1,    1,    6,    6,    7,
        1,    1,    1,    1,    1,    4,    7,    7,    7,    7,
        7,    7,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    4,    4,    1,    6,    6,    7,    7,
        7,    6,    1,    1,    1,    1,    1,    4,    1,    1,
        4,    1,    4,    1,    4,    4,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[245] =
    {   0,
        0,    0,  662,    0,    0,  800,   69,   71,    0,   70,
        0,    0,  644,    0,  635,   66,   61,   72,   77,  635,
        0,    0,    0,    0,  138,  208,   53,   60,   62,   71,
       73,   74,   67,  105,   78,  114,   50,   77,   80,    0,
        0,    0,    0,  182,    0,  112,  273,  107,  800,  121,
      652,  153,  645,  644,  334,  800,    0,  154,  800,  640,
      160,  220,  229,  177,  383,  236,    0,  624,  131,   82,
       99,  144,  154,  162,  164,  148,  149,  210,  155,  123,
      173,  214,  223,  217,  215,  231,  234,  800,  244,  284,
      418,  190,  647,  256,    0,  800,  288,  453,  296,  637,

        0,  304,  308,  326,    0,  216,   93,  238,  258,  271,
      285,  247,  286,  245,  292,  274,  303,  219,  305,  314,
      322,  323,  315,  324,  329,  327,  398,    0,  504,  548,
      362,  349,  592,  351,  387,  406,  345,  357,  346,  611,
      334,  335,  609,  337,  364,  362,  393,  400,  381,  412,
      366,  402,  413,  608,  414,  424,  425,  468,  639,  486,
      506,  508,  625,  475,  506,  604,  452,  426,  603,  601,
      598,  395,  433,  448,  472,  449,  482,  464,  590,  488,
      490,  492,  500,  431,  524,  526,  532,  587,  507,  582,
      501,  502,  575,  565,  564,  560,  558,  529,  512,  506,

      514,  543,  520,  521,  532,  518,  513,  515,  601,  434,
      534,  281,  603,  273,  578,  604,  173,  583,  615,  112,
      570,  571,  800,  634,  800,  585,  586,  800,  696,  703,
      710,  717,  724,  731,  738,  745,  752,  756,  762,  769,
      771,  778,  785,  792
    } ;

static yyconst short int yy_def[245] =
    {   0,
      228,    1,  228,  229,  229,  228,  230,  231,  229,  232,
      229,  229,  228,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  233,  233,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,  229,
      229,  229,  229,  230,  229,  234,  229,  231,  228,  235,
      236,  231,  229,  228,  229,  228,  229,  229,  228,  237,
      229,  229,  229,  229,  229,  229,  229,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  228,  238,  230,
      229,  235,  239,  231,  229,  228,  229,  229,  229,  237,

      240,  229,  229,  229,   65,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  234,  241,  230,  230,
      231,  229,  229,  229,  229,  229,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,  234,  234,  230,
      230,  231,  229,  229,  229,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,  234,  234,  231,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,

       26,  231,   26,   26,   26,   26,   26,   26,  231,   26,
       26,   26,  231,   26,  242,  242,  243,  244,  231,  243,
      228,  236,  228,  231,  228,  228,  236,    0,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228
    } ;

static yyconst short int yy_nxt[871] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,   11,
       12,   13,    4,   14,   15,   16,   17,   18,   19,   19,
       20,   21,   22,   23,   24,    4,   25,   25,   25,   25,
       25,   26,   25,   25,   27,   25,   25,   25,   28,   25,
       25,   29,   25,   25,    4,   25,   25,   25,   30,   25,
       31,   32,   25,   25,   33,   25,   25,   25,   25,   34,
       35,   36,   37,   38,   39,   25,   25,   40,   41,   42,
       43,   43,   59,   49,   45,   50,   68,   60,   43,   68,
       46,   54,   51,   58,   58,   58,   68,   61,   68,   62,
       62,   63,   61,   68,   66,   66,   66,   68,   70,   68,

       68,   72,   64,   68,   68,   71,   68,   64,   68,   49,
       84,  107,   77,   47,   55,   65,   85,   88,   51,   68,
       76,  138,   64,   49,   52,   68,   73,   64,   80,   74,
       75,   68,   93,   87,   86,  108,  221,   65,   43,   43,
       68,   43,   43,   43,   43,   43,   43,   43,   43,   68,
       43,   43,   43,   43,   43,   49,   89,   68,   43,   43,
       43,   43,   43,   43,   51,   78,  106,   81,   79,   82,
       68,   58,   58,   58,   68,   68,   83,  102,  102,  102,
       68,   68,   43,   43,   99,  118,  109,   45,   68,  103,
       68,  103,   49,   46,  104,  104,  104,  221,  114,   68,

      110,   93,  117,  113,   99,   43,   43,   43,   43,   43,
       94,   43,   43,   43,   43,   43,   43,   43,   43,  111,
       43,   43,   43,   43,   43,  119,   47,  112,   43,   43,
       43,   43,   43,   43,   69,   61,   68,   62,   62,   63,
       68,   68,   68,   68,   61,   68,   63,   63,   63,   68,
       64,   61,   43,   66,   66,   66,  137,   68,   49,   64,
       68,  127,  127,  115,   68,  139,   64,   51,  116,  121,
       64,   68,  120,   68,  124,   43,   43,   43,   44,   64,
      123,   44,  149,  122,   68,   43,   64,  128,  140,   45,
       90,   90,  125,  145,  126,   46,   95,   68,   44,   68,

       68,  129,  129,  143,  131,  132,  132,   68,  134,  128,
      134,   68,   68,  135,  135,  135,   91,   44,   68,   44,
       44,  102,  102,  102,   44,  104,  104,  104,   47,   68,
       44,   68,  141,   44,  136,   44,  147,   44,   91,   53,
       68,   68,   53,  104,  104,  104,  142,  144,   68,   68,
       68,   97,   97,   68,  136,   68,  146,   95,  148,   53,
       68,   68,  150,   68,   49,  154,   53,   53,  135,  135,
      135,   68,   68,   51,  155,  166,  151,   98,   53,  168,
       53,   53,  156,   68,  152,   53,  153,  171,   68,  157,
       68,   53,   68,  167,   53,  169,   53,  170,   53,   98,

      105,  105,  105,   88,  135,  135,  135,   68,  173,  105,
      105,  105,  105,  105,  105,  158,  158,  162,  164,   68,
      164,   68,  172,  165,  165,  165,   68,  179,   68,  105,
      105,  105,  105,  105,  105,  130,  130,  130,   68,   68,
       68,  176,   89,  174,  130,  130,  130,  130,  130,  130,
       68,   68,   68,  175,  190,  180,  189,   68,  177,   68,
       68,  181,  178,  182,  130,  130,  130,  130,  130,  130,
      133,  133,  133,   88,   68,   68,  183,  201,   68,  133,
      133,  133,  133,  133,  133,  185,  185,   43,  184,  188,
       68,   45,  165,  165,  165,  191,  192,   46,   68,  133,

      133,  133,  133,  133,  133,   43,  194,   43,   68,   45,
       49,   45,   89,  196,   68,   46,   68,   46,   68,   51,
      193,  160,  160,  165,  165,  165,   68,   68,   68,   88,
       47,   88,   68,   68,   49,  203,  197,  195,   68,   68,
       68,   68,  199,   51,   68,   49,   68,   68,   47,   43,
       47,  204,  198,   45,   51,   68,  207,  200,   68,   46,
       68,  210,  212,  206,  205,  161,  161,  161,   89,  208,
       89,  187,  225,  223,  161,  161,  161,  161,  161,  161,
      217,  202,  211,  214,   68,  217,   68,  225,  223,  218,
       68,   68,   47,  209,  161,  161,  161,  161,  161,  161,

       95,   68,  219,   49,  213,   49,  217,  222,   68,  163,
      163,  163,   51,   68,   51,  218,   68,  223,  163,  163,
      163,  163,  163,  163,   68,  215,   51,   68,  219,   68,
       68,  226,  227,   95,   68,   68,  223,   68,  163,  163,
      163,  163,  163,  163,   88,   51,  226,  227,  101,   49,
       68,  101,   96,   95,   49,   67,  186,  186,  186,   57,
       56,  228,  228,  228,  228,  186,  186,  186,  186,  186,
      186,  228,  228,  228,  228,  228,  224,  228,  228,  228,
      228,  228,  228,   89,  228,  186,  186,  186,  186,  186,
      186,  228,  228,  228,  228,  224,   43,   43,  228,   43,

      228,   43,   43,   44,   44,  228,   44,   44,   44,   44,
       48,   48,   48,   48,   48,   48,   48,   53,   53,  228,
       53,   53,   53,   53,   68,   68,  228,   68,  228,   68,
       68,   46,  228,  228,   46,   46,   46,   46,   92,   92,
       92,   92,   92,   92,   92,   51,   51,   51,   51,   51,
       51,   51,  100,  100,  228,  100,  100,  100,  100,   46,
      228,   46,   93,   93,   93,   93,   93,   93,   93,  101,
      101,  228,  101,  101,  101,  101,  159,  159,  216,  216,
      216,  216,  216,  216,  216,  220,  220,  220,  220,  220,
      220,  220,  218,  218,  218,  218,  218,  218,  218,    3,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228
    } ;

static yyconst short int yy_chk[871] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        7,   10,   17,    8,    7,    8,   37,   17,   10,   27,
        7,   10,    8,   16,   16,   16,   28,   18,   29,   18,
       18,   18,   19,   33,   19,   19,   19,   30,   27,   31,

       32,   29,   18,   38,   35,   28,   39,   19,   70,   48,
       37,   70,   33,    7,   10,   18,   37,   46,   48,  107,
       32,  107,   18,   50,    8,   71,   30,   19,   35,   30,
       31,   34,   50,   39,   38,   71,  220,   18,   25,   25,
       36,   25,   25,   25,   25,   25,   25,   25,   25,   80,
       25,   25,   25,   25,   25,   52,   46,   69,   25,   25,
       25,   25,   25,   25,   52,   34,   69,   36,   34,   36,
       72,   58,   58,   58,   76,   77,   36,   61,   61,   61,
       73,   79,   25,   44,   58,   80,   72,   44,   74,   64,
       75,   64,   92,   44,   64,   64,   64,  217,   77,   81,

       73,   92,   79,   76,   58,   25,   25,   25,   26,   26,
       52,   26,   26,   26,   26,   26,   26,   26,   26,   74,
       26,   26,   26,   26,   26,   81,   44,   75,   26,   26,
       26,   26,   26,   26,   26,   62,   78,   62,   62,   62,
       82,   85,  106,   84,   63,  118,   63,   63,   63,   83,
       62,   66,   26,   66,   66,   66,  106,   86,   94,   63,
       87,   89,   89,   78,  108,  108,   66,   94,   78,   83,
       62,  114,   82,  112,   85,   26,   26,   26,   47,   63,
       84,   47,  118,   83,  109,   90,   66,   89,  109,   90,
       47,   47,   86,  114,   87,   90,   97,  110,   47,  214,

      116,   90,   90,  112,   94,   97,   97,  212,   99,   89,
       99,  111,  113,   99,   99,   99,   47,   47,  115,   47,
       47,  102,  102,  102,   47,  103,  103,  103,   90,  117,
       47,  119,  110,   47,  102,   47,  116,   47,   47,   55,
      120,  123,   55,  104,  104,  104,  111,  113,  121,  122,
      124,   55,   55,  126,  102,  125,  115,  132,  117,   55,
      141,  142,  119,  144,  131,  123,  132,  132,  134,  134,
      134,  137,  139,  131,  124,  137,  120,   55,   55,  139,
       55,   55,  125,  138,  121,   55,  122,  144,  146,  126,
      145,   55,  151,  138,   55,  141,   55,  142,   55,   55,

       65,   65,   65,  127,  135,  135,  135,  149,  146,   65,
       65,   65,   65,   65,   65,  127,  127,  131,  136,  147,
      136,  172,  145,  136,  136,  136,  148,  151,  152,   65,
       65,   65,   65,   65,   65,   91,   91,   91,  150,  153,
      155,  149,  127,  147,   91,   91,   91,   91,   91,   91,
      156,  157,  168,  148,  172,  152,  168,  184,  150,  173,
      210,  153,  150,  155,   91,   91,   91,   91,   91,   91,
       98,   98,   98,  158,  174,  176,  156,  184,  167,   98,
       98,   98,   98,   98,   98,  158,  158,  160,  157,  167,
      178,  160,  164,  164,  164,  173,  174,  160,  175,   98,

       98,   98,   98,   98,   98,  129,  176,  161,  177,  129,
      162,  161,  158,  178,  180,  129,  181,  161,  182,  162,
      175,  129,  129,  165,  165,  165,  183,  191,  192,  185,
      160,  186,  200,  189,  187,  189,  180,  177,  199,  207,
      201,  208,  182,  187,  206,  202,  203,  204,  129,  130,
      161,  191,  181,  130,  202,  198,  200,  183,  205,  130,
      211,  203,  207,  199,  192,  130,  130,  130,  185,  201,
      186,  162,  221,  222,  130,  130,  130,  130,  130,  130,
      215,  187,  205,  211,  197,  218,  196,  226,  227,  215,
      195,  194,  130,  202,  130,  130,  130,  130,  130,  130,

      133,  193,  215,  209,  209,  213,  216,  218,  190,  133,
      133,  133,  209,  188,  213,  216,  179,  219,  133,  133,
      133,  133,  133,  133,  171,  213,  219,  170,  216,  169,
      166,  221,  222,  163,  154,  143,  224,  140,  133,  133,
      133,  133,  133,  133,  159,  224,  226,  227,  100,   93,
       68,   60,   54,   53,   51,   20,  159,  159,  159,   15,
       13,    3,    0,    0,    0,  159,  159,  159,  159,  159,
      159,    0,    0,    0,    0,    0,  219,    0,    0,    0,
        0,    0,    0,  159,    0,  159,  159,  159,  159,  159,
      159,    0,    0,    0,    0,  224,  229,  229,    0,  229,

        0,  229,  229,  230,  230,    0,  230,  230,  230,  230,
      231,  231,  231,  231,  231,  231,  231,  232,  232,    0,
      232,  232,  232,  232,  233,  233,    0,  233,    0,  233,
      233,  234,    0,    0,  234,  234,  234,  234,  235,  235,
      235,  235,  235,  235,  235,  236,  236,  236,  236,  236,
      236,  236,  237,  237,    0,  237,  237,  237,  237,  238,
        0,  238,  239,  239,  239,  239,  239,  239,  239,  240,
      240,    0,  240,  240,  240,  240,  241,  241,  242,  242,
      242,  242,  242,  242,  242,  243,  243,  243,  243,  243,
      243,  243,  244,  244,  244,  244,  244,  244,  244,  228,

      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228,
      228,  228,  228,  228,  228,  228,  228,  228,  228,  228
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
#line 2 "scanner.ll"

#define YY_NO_UNPUT
#include <stdlib.h>
#include <ctype.h>

class QString;

#ifndef KDE_USE_FINAL
#include "yacc.cc.h"
#endif

extern int idl_line_no;
int comment_mode;

#include <qstring.h>

static long ascii_to_longlong( long base, const char *s )
{
  long ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static double ascii_to_longdouble (const char *s)
{
  double d;
#ifdef HAVE_SCANF_LF
  sscanf (s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod (s, NULL);
#endif
  return d;
}

static char translate_char( const char *s )
{
  char c = *s++;

  if( c != '\\' )
    return c;
  c = *s++;
  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    return (char) ascii_to_longlong( 16, s );
  default:
    // Gotta be an octal
    return (char) ascii_to_longlong( 8, s );
  }
}


/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 790 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 124 "scanner.ll"


#line 944 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 229 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 228 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 126 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "scanner.ll"
{ idl_line_no++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 129 "scanner.ll"
{ comment_mode = 1; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 130 "scanner.ll"
{ if (!comment_mode) { REJECT; } else { comment_mode = 0; } }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 131 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 132 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 134 "scanner.ll"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 135 "scanner.ll"
{
                          exit( 1 );
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 138 "scanner.ll"
{
			  QString s( yytext );
			  yylval._str = new QString( s.mid( 10, s.stripWhiteSpace().length() - 11 ) );
                          idl_line_no++;
                          return T_INCLUDE;
                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 144 "scanner.ll"
{
                          idl_line_no++;
                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "scanner.ll"
return T_COLON;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "scanner.ll"
return T_TILDE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "scanner.ll"
return T_ASTERISK;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "scanner.ll"
return T_LESS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "scanner.ll"
return T_GREATER;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "scanner.ll"
return T_SCOPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "scanner.ll"
return T_ACCESS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "scanner.ll"
return T_ACCESS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 164 "scanner.ll"
return T_CONST;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 165 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 166 "scanner.ll"
return T_CLASS;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 167 "scanner.ll"
return T_STRUCT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 168 "scanner.ll"
return T_VIRTUAL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 169 "scanner.ll"
return T_PUBLIC;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 170 "scanner.ll"
return T_STATIC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 171 "scanner.ll"
return T_SIGNED;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 172 "scanner.ll"
return T_UNSIGNED;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 173 "scanner.ll"
return T_PROTECTED;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 174 "scanner.ll"
return T_PRIVATE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 175 "scanner.ll"
return T_SIGNAL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 176 "scanner.ll"
return T_RETURN;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 177 "scanner.ll"
return T_SLOT;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 178 "scanner.ll"
return T_TRUE;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 179 "scanner.ll"
return T_FALSE;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 180 "scanner.ll"
return T_TRUE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 181 "scanner.ll"
return T_FALSE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 182 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 183 "scanner.ll"
return T_TYPEDEF;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 184 "scanner.ll"
return T_DCOP;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 185 "scanner.ll"
;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 186 "scanner.ll"
return T_NULL;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "scanner.ll"
{
			  yylval._str = new QString( yytext );
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 51:
#line 193 "scanner.ll"
case 52:
#line 194 "scanner.ll"
case 53:
#line 195 "scanner.ll"
case 54:
#line 196 "scanner.ll"
case 55:
YY_RULE_SETUP
#line 196 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_DOUBLE_LITERAL;
			}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 200 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 204 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 208 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 212 "scanner.ll"
{
                          QCString s( yytext );
	                  s = s.mid( 1, s.length() - 2 );
			  yylval._char = translate_char( s );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 218 "scanner.ll"
{
                          QString s( yytext );
                          yylval._str = new QString( s.mid( 1, s.length() - 2 ) );
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 223 "scanner.ll"
return T_UNKNOWN;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 225 "scanner.ll"
ECHO;
	YY_BREAK
#line 1359 "scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 229 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 229 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 228);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 225 "scanner.ll"


void dcopidlInitFlex( const char *_code )
{
   comment_mode = 0;
   yy_switch_to_buffer( yy_scan_string( _code ) );
}
