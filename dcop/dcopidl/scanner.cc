#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 52
#define YY_END_OF_BUFFER 53
static yyconst short int yy_acclist[458] =
    {   0,
        5,    5,   53,    5,   51,   52,    1,    5,   51,   52,
        2,   52,    5,   51,   52,    5,   51,   52,    5,   18,
       51,   52,    5,   51,   52,    5,   13,   51,   52,    5,
       14,   51,   52,    6,   51,   52,    5,   16,   51,   52,
        5,   51,   52,    5,   51,   52,    5,   33,   47,   51,
       52,    5,   46,   51,   52,    5,   15,   51,   52,    5,
       17,   51,   52,    5,   19,   51,   52,    5,   22,   51,
       52,    5,   20,   51,   52,    5,   40,   51,   52,    5,
       40,   51,   52,    5,   40,   51,   52,    5,   40,   51,
       52,    5,   40,   51,   52,    5,   40,   51,   52,    5,

       40,   51,   52,    5,   40,   51,   52,    5,   40,   51,
       52,    5,   40,   51,   52,    5,   11,   51,   52,    5,
       12,   51,   52,    5,    5,    5,   50,    5,    5,   10,
        5,    8,    5,    5,    5,    4,    5,   44,    3,    5,
        7,    5,    5,   47,    5,    5,    5,   48,    5,   46,
        5,   21,    5,   40,    5,    5,   40,    5,   40,    5,
       40,    5,   40,    5,   40,    5,   40,    5,   40,    5,
       40,    5,   40,    5,   40,    5,   40,   50,    5,    5,
        5,    8,    8,    5,    5,   49,   49,    5,    5,    5,
        5,    7,    7,    5,   43,    5,    5,   42,    5,   48,

        5,    5,   40,    5,   40,    5,   40,    5,   40,    5,
       40,    5,   40,    5,   40,    5,   40,    5,   40,    5,
       40,    5,   40,    5,   40,    5,    5,    5,    5,    5,
        5,    5,   45,    5,    5,   40,    5,   40,    5,   40,
        5,   40,    5,   40,    5,   24,   40,    5,   40,    5,
       40,    5,   40,    5,   40,    5,   40,    5,   40,    5,
       40,    5,    5,    5,    5,    5,    5,   41,    5,   40,
        5,   40,    5,   25,   40,    5,   23,   40,    5,   40,
        5,   40,    5,   40,    5,   40,    5,   40,    5,   40,
        5,   40,    5,    5,   31,   40,    5,   40,    5,   29,

       40,    5,   40,    5,   40,    5,   28,   40,    5,   26,
       40,    5,   40,    5,   40,    5,    5,   40,    5,   40,
        5,   40,    5,    5,    5,   30,   40,    5,   27,   40,
        5,    5,   32,   40,    5,    5,   40,    5,    5,    5,
        5,    5,   37,    5,    5,    5,    5,    5,   35,    5,
       40,    5,   37,    5,   40,    5,   40,    5,    5,   35,
        5,   40,    5,   40,    5,    5,    5,    5,   40,    5,
        5,   40,    5,   40,    5,    5,   10,    5,    5,   40,
        5,    5,   40,    5,   40,    5,    5,    5,    5,    5,
       38,    5,    5,   40,    5,    9,   10,    5,    5,   40,

        5,   38,    5,   40,    5,   40,    5,    5,    5,   40,
        5,    9,    5,   40,    5,    5,   40,    5,    5,   40,
        5,   40,    5,    5,    5,   40,    5,   36,    5,   40,
        5,   34,    5,   40,    5,    5,    5,    5,   39,   36,
        5,   36,   40,   34,    5,   34,   40,    5,   40,    5,
       39,    5,    5,   40,    5,    5,    5
    } ;

static yyconst short int yy_accept[286] =
    {   0,
        1,    2,    3,    4,    7,   11,   13,   16,   19,   23,
       26,   30,   34,   37,   41,   44,   47,   52,   56,   60,
       64,   68,   72,   76,   80,   84,   88,   92,   96,  100,
      104,  108,  112,  116,  120,  124,  125,  126,  128,  128,
      129,  130,  131,  133,  133,  134,  135,  135,  136,  137,
      139,  140,  142,  143,  145,  146,  147,  149,  151,  153,
      155,  156,  158,  160,  162,  164,  166,  168,  170,  172,
      174,  176,  178,  179,  179,  180,  181,  183,  184,  185,
      187,  188,  189,  190,  191,  193,  194,  196,  197,  199,
      201,  202,  204,  206,  208,  210,  212,  214,  216,  218,

      220,  222,  224,  226,  226,  226,  227,  228,  229,  230,
      231,  232,  234,  235,  237,  239,  241,  243,  245,  248,
      250,  252,  254,  256,  258,  260,  262,  262,  262,  263,
      264,  265,  266,  267,  269,  271,  273,  276,  279,  281,
      283,  285,  287,  289,  291,  293,  293,  293,  294,  297,
      299,  302,  304,  306,  309,  312,  314,  316,  317,  319,
      321,  323,  324,  325,  328,  331,  332,  335,  336,  338,
      339,  340,  340,  341,  342,  344,  345,  346,  346,  347,
      348,  350,  352,  353,  353,  354,  356,  358,  359,  360,
      360,  361,  363,  365,  366,  367,  368,  368,  370,  371,

      373,  375,  376,  377,  378,  378,  379,  379,  381,  382,
      384,  386,  387,  388,  388,  389,  390,  392,  393,  393,
      395,  396,  396,  396,  396,  398,  399,  399,  401,  402,
      402,  403,  405,  407,  408,  409,  409,  411,  412,  413,
      413,  413,  413,  415,  416,  416,  418,  419,  421,  423,
      424,  425,  425,  427,  429,  429,  431,  433,  433,  435,
      436,  437,  437,  438,  440,  441,  444,  445,  448,  448,
      450,  451,  451,  452,  453,  453,  455,  455,  456,  456,
      457,  457,  458,  458,  458
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    1,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   27,
       32,   32,   32,   33,   34,   32,   32,   32,   35,   36,
       37,   32,   32,   38,   32,   32,   32,   39,   32,   32,
        1,   40,    1,    1,   41,    1,   42,   43,   44,   45,

       46,   47,   32,   32,   48,   32,   49,   50,   51,   52,
       53,   54,   32,   55,   56,   57,   58,   59,   32,   60,
       61,   32,   62,    1,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[64] =
    {   0,
        1,    2,    3,    1,    1,    4,    1,    1,    4,    1,
        1,    5,    1,    1,    1,    1,    1,    6,    6,    7,
        1,    1,    1,    1,    1,    4,    7,    7,    7,    7,
        7,    1,    1,    1,    1,    1,    1,    1,    4,    4,
        1,    6,    6,    7,    7,    7,    6,    1,    1,    1,
        1,    4,    1,    1,    4,    1,    4,    1,    4,    4,
        1,    1,    1
    } ;

static yyconst short int yy_base[310] =
    {   0,
        0,    0, 1069,    0,    0, 1518,   62,   64,    0,   63,
        0,    0, 1051,    0,   59,   54,   65,   70, 1046,    0,
        0,    0,    0,  125,  188, 1025,   41,   46, 1024,   51,
       56,   32,   59,    0,    0,    0,  112,    0,  104,  246,
       96, 1518,  116, 1061,  154, 1053, 1052,  301, 1518,  136,
     1518,  894,  102,  154,  199,  207,  344,  215,    0,  861,
      880,  123,   82,  117,  119,  104,  134,  128,  120,  136,
      167,  182, 1518,  220,  230,  374,  204,  897,  250,    0,
     1518,  238,  404,  256,  887,    0,  277,  248,  259,    0,
      451,  139,  213,   39,  202,   64,  142,  222,  183,  232,

      242,  246,  203,  293,    0,  312,  513,  301,  307,  552,
      316,  319,  363,  853,  102,  276,  291,  288,  851,  249,
      280,  308,  243,  324,  301,  309,  389,  594,  514,  522,
      354,  882,  378,  391,  343,  328,  848,  841,  274,  358,
      336,  384,  373,  395,  385,  400,  511,  518,  839,  413,
      838,  397,  481,  525,  830,  137,  477,  561,  498,  524,
      398,  725,  566,  737,  734,  564,  729,  581,  507,  709,
      598,  474,  661,  605,  722,  608,  723,  486,  786,  615,
      847,  564,  696,  692,  525,  910,  594,  574,  630,  686,
      526,  973,  687,  728, 1034,  603,  613,    0, 1035,  688,

      693,  736,  729,  629,  601,  848,  608,    0, 1036,  703,
      698,  849, 1037,  543, 1100,  743, 1161,  596,  607,  713,
      850,  625,  547,  727, 1518,  851,  605,  714,  852,  607,
      596, 1224,  704,  853,  611,  575,  711,  854, 1518, 1038,
     1039,  563,  716,  855,  564,    0, 1285,  827,  824, 1047,
     1286,  537,  821,    0,  536,  823,    0,  503,  834, 1040,
     1287,  719, 1041, 1288, 1518,  422, 1518,  404,  384,  832,
     1042,  372,  825, 1162,  346, 1009,  340, 1048,  326, 1163,
      302, 1164,   16, 1518, 1351, 1358, 1365, 1372, 1379, 1386,
     1393, 1400, 1407, 1411, 1417, 1424, 1426, 1433, 1440, 1447,

     1454, 1461, 1468, 1475, 1482, 1489, 1496, 1503, 1510
    } ;

static yyconst short int yy_def[310] =
    {   0,
      284,    1,  284,  285,  285,  284,  286,  287,  285,  288,
      285,  285,  284,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  289,  289,   25,   25,   25,   25,   25,
       25,   25,   25,  285,  285,  285,  286,  285,  290,  285,
      287,  284,  291,  292,  287,  285,  284,  285,  284,  285,
      284,  293,  285,  285,  285,  285,  285,  285,  285,   25,
      285,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,  284,  294,  286,  285,  291,  295,  287,  285,
      284,  285,  285,  285,  293,  296,  285,  285,  285,   57,
      284,   25,   25,   25,   25,   25,   25,   25,   25,   25,

       25,   25,   25,  290,  297,  286,  286,  287,  285,  285,
      285,  285,  285,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,  290,  290,  286,  286,
      287,  285,  285,  285,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,  290,  290,  287,   25,   25,
       25,   25,   25,   25,   25,   25,   25,  287,   25,   25,
       25,  285,  298,   25,   25,  287,   25,  299,   25,  285,
      298,  300,  284,  298,  298,  287,  299,  301,  284,  299,
      299,   25,  285,  300,  300,  284,  186,  298,  302,  301,
      301,  284,  192,  299,  303,  285,  300,  186,  298,  186,

      186,  298,  302,  304,  305,  287,  301,  192,  299,  192,
      192,  299,  303,  306,  284,  303,  303,  285,  300,  186,
      298,  304,  284,  307,  284,  287,  301,  192,  299,  306,
      306,  284,  232,  303,  285,  300,  186,  298,  284,  284,
      307,  301,  192,  299,  306,  232,  303,  232,  232,  303,
      308,  300,  186,  285,  301,  192,  285,  306,  232,  303,
      308,  309,  308,  308,  284,   25,  284,   25,  306,  232,
      303,  309,  309,  308,  306,  232,  309,  308,  309,  308,
      309,  308,  309,    0,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  284,  284,  284,  284,  284
    } ;

static yyconst short int yy_nxt[1582] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,   10,   11,
       12,   13,    4,   14,    4,   15,   16,   17,   18,   18,
       19,   20,   21,   22,   23,    4,   24,   24,   24,   24,
       24,   24,   24,   25,   24,   24,   26,   24,   24,    4,
       24,   24,   24,   27,   24,   28,   24,   24,   29,   24,
       24,   24,   24,   30,   24,   31,   32,   24,   33,   24,
       24,   34,   35,   36,   36,   51,   42,   38,   43,  284,
       52,   36,   60,   39,   47,   44,   50,   50,   50,   60,
       53,   60,   54,   54,   55,   53,   60,   58,   58,   58,
       64,   60,   71,   65,  117,   56,   60,   66,   42,   60,

       56,   40,   48,   57,   60,   68,   72,   44,   69,   73,
       56,   45,   70,   36,  119,   56,   93,   38,   42,   87,
       87,   87,   60,   39,   57,   36,   36,   78,   36,   36,
       36,   36,   36,   36,   36,   36,  135,   36,   36,   36,
       36,   36,   60,   74,   60,   61,   36,   36,   36,   36,
       36,   40,   92,   50,   50,   50,   42,   60,   94,   60,
       60,   96,  100,   60,   36,   44,   84,  115,   60,   53,
       95,   54,   54,   55,   60,   98,   60,   60,   97,   60,
       99,   84,   60,  164,   56,  120,   36,   36,   36,   36,
      101,   36,   36,   36,   36,   36,   36,   36,   36,   56,

       36,   36,   36,   36,   36,   79,   42,   60,   61,   36,
       36,   36,   36,   36,   53,   78,   55,   55,   55,   88,
      102,   88,   60,   60,   89,   89,   89,   36,   62,   56,
       53,   36,   58,   58,   58,   38,  103,  104,  104,  122,
      116,   39,   60,   60,   56,   56,   80,  106,  106,   36,
       36,   37,   42,   60,   37,  109,  109,  118,  105,  126,
       56,   44,   60,   75,   75,   89,   89,   89,  111,   40,
      111,   37,   60,  112,  112,  112,   89,   89,   89,  105,
      121,  123,   60,   60,   76,   37,   60,   37,   37,   60,
      142,  125,   37,  108,   87,   87,   87,   37,   73,  124,

       37,  139,   37,   42,   37,   76,   46,  113,  136,   46,
      127,  127,   44,   36,   60,   80,   60,   38,   82,   82,
       60,  140,  113,   39,   46,   46,   46,  151,   60,  129,
      129,   60,   74,  112,  112,  112,  112,  112,  112,   83,
       46,   60,   46,   46,  138,  144,  137,   46,   60,   60,
      131,   40,   46,  141,  283,   46,   42,   46,  150,   46,
       83,   90,   90,   90,   60,   44,  145,  143,   60,  281,
       90,   90,   90,   90,   90,  133,   60,  133,  149,  153,
      134,  134,  134,   60,  279,   90,   90,   90,   90,   90,
       90,  107,  107,  107,   73,  134,  134,  134,   60,  284,

      107,  107,  107,  107,  107,   73,  146,  146,  134,  134,
      134,  148,  277,   60,  152,  107,  107,  107,  107,  107,
      107,  110,  110,  110,   60,   60,  157,  154,   74,  155,
      110,  110,  110,  110,  110,   60,  275,   60,   60,   74,
      156,  159,  160,  169,   60,  110,  110,  110,  110,  110,
      110,   36,   36,   60,   36,   36,   36,   36,   36,   36,
       36,   36,   60,   36,   36,   36,   36,   36,   36,   36,
       36,   36,   36,   36,   36,   36,   36,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
       36,  114,  114,  114,  114,  114,  114,  114,  114,  114,

      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,   36,   36,   36,   36,   73,   60,   38,   38,
       42,   60,  184,   36,   39,   39,  165,   38,  162,   44,
      130,  130,  130,   39,  190,  167,  185,  161,   60,  130,
      130,  130,  130,  130,  168,  163,  269,   60,  191,  239,
       74,  182,   40,   40,  130,  130,  130,  130,  130,  130,
       80,   40,  158,   42,   60,   60,   42,  176,  172,  132,
      132,  132,   44,  184,  190,   44,  172,  172,  132,  132,
      132,  132,  132,  178,  195,  172,  173,  185,  191,  267,
      265,  230,  178,  132,  132,  132,  132,  132,  132,   73,

      172,  179,  240,  204,   60,  231,  166,  172,  258,  172,
       42,  147,  147,  147,  174,  255,  172,  178,  202,   44,
      147,  147,  147,  147,  147,  224,  178,  252,  175,  180,
      189,  251,  204,   74,  201,  147,  147,  147,  147,  147,
      147,  205,  198,  181,  230,  188,  174,  245,  242,  223,
      236,  235,  227,  223,  206,  194,  171,  219,  231,  218,
      175,  171,  171,  172,  171,  171,  171,  171,  171,  171,
      171,  171,  172,  171,  171,  171,  171,  171,  171,  171,
      171,  171,  171,  171,  171,  171,  171,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      171,  186,  186,  186,  186,  186,  186,  186,  186,  187,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  171,  175,  172,  178,  207,  211,  201,  225,
      178,  204,  197,  172,  178,  208,  198,  220,  172,  178,
      205,  198,  228,  211,  249,  214,  208,  172,  196,  177,
      171,  208,  246,  206,  214,  171,  237,  243,  183,  198,
      177,  198,  208,  253,  208,  177,  213,  272,  256,   60,
      174,  180,  212,  171,   60,  171,  177,   60,  177,  221,
      170,  273,  241,  234,  175,  181,  177,  177,  178,  177,
      177,  177,  177,  177,  177,  177,  177,  178,  177,  177,

      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  177,  192,  192,  192,  192,
      192,  192,  192,  192,  193,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  177,  181,  178,
      225,  178,  172,  225,  178,  214,  172,  178,  178,   44,
      178,  172,   44,  178,  214,  172,  178,  249,  259,  198,
       60,  208,  246,  272,  266,  246,  268,  270,   60,   60,
      246,   60,  246,  171,  276,  177,  213,  273,   60,  213,
       80,   60,  229,   60,  213,  180,  213,  250,   86,   42,

       91,   60,  238,  226,  244,   86,  226,  254,  257,  181,
      171,  171,  172,  171,  171,  171,  171,  171,  171,  171,
      171,  172,  171,  171,  171,  171,  171,  198,  198,  198,
      199,  171,  171,  171,  171,  171,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  171,
      198,  198,  198,  198,  198,  198,  198,  198,  200,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  171,  175,  177,  177,  178,  177,  177,  177,  177,
      177,  177,  177,  177,  178,  177,  177,  177,  177,  177,
      208,  208,  208,  209,  177,  177,  177,  177,  177,  208,

      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  177,  208,  208,  208,  208,  208,  208,  208,
      208,  210,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  177,  181,  214,  172,  178,  214,
      239,  225,  214,  262,  214,  214,  172,  178,  214,  214,
      262,  214,  262,  214,  215,  173,  179,  246,  214,  262,
       81,   80,   60,   42,   67,   63,   59,   49,  284,  284,
      284,  213,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  274,  216,  174,  180,  216,  284,  284,  284,  284,
      260,  280,  271,  240,  241,   36,  217,  175,  181,  217,

      213,  213,  214,  213,  213,  213,  213,  213,  213,  213,
      213,  214,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  213,
      232,  232,  232,  232,  232,  232,  232,  232,  233,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  213,  217,  214,  262,  262,  262,  284,  284,  284,
      284,  284,  214,  262,  262,  262,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,

      284,  284,  284,  284,  284,  284,  278,  284,  284,  216,
      284,  284,  284,  284,  284,  282,  284,   36,  284,  284,
      284,  284,  284,  217,  213,  213,  214,  213,  213,  213,
      213,  213,  213,  213,  213,  214,  213,  213,  213,  213,
      213,  246,  246,  246,  247,  213,  213,  213,  213,  213,
      246,  246,  246,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  213,  246,  246,  246,  246,  246,  246,
      246,  246,  248,  246,  246,  246,  246,  246,  246,  246,
      246,  246,  246,  246,  246,  213,  217,  214,  262,  262,
      262,  284,  284,  284,  284,  284,  214,  262,  262,  262,

      284,  284,  284,  284,  284,  215,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  216,  263,  263,  263,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  217,  264,  264,
      264,   36,   36,  284,   36,  284,   36,   36,   37,   37,
      284,   37,   37,   37,   37,   41,   41,   41,   41,   41,
       41,   41,   46,   46,  284,   46,   46,   46,   46,   60,
       60,  284,   60,  284,   60,   60,   39,  284,  284,   39,
       39,   39,   39,   77,   77,   77,   77,   77,   77,   77,

       44,   44,   44,   44,   44,   44,   44,   85,   85,  284,
       85,   85,   85,   85,   39,  284,   39,   78,   78,   78,
       78,   78,   78,   78,   86,   86,  284,   86,   86,   86,
       86,  128,  128,  171,  171,  171,  171,  171,  171,  171,
      177,  177,  177,  177,  177,  177,  177,  172,  172,  172,
      172,  172,  172,  172,  178,  178,  178,  178,  178,  178,
      178,  203,  203,  203,  203,  203,  203,  203,  213,  213,
      213,  213,  213,  213,  213,  222,  222,  222,  222,  222,
      222,  222,  205,  205,  205,  205,  205,  205,  205,  214,
      214,  214,  214,  214,  214,  214,   44,   44,   44,   44,

       44,   44,   44,  261,  261,  261,  261,  261,  261,  261,
      262,  262,  262,  262,  262,  262,  262,    3,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284
    } ;

static yyconst short int yy_chk[1582] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    7,   10,   16,    8,    7,    8,  283,
       16,   10,   32,    7,   10,    8,   15,   15,   15,   94,
       17,   27,   17,   17,   17,   18,   28,   18,   18,   18,
       27,   30,   32,   27,   94,   17,   31,   28,   41,   33,

       18,    7,   10,   17,   96,   30,   33,   41,   30,   39,
       17,    8,   31,   37,   96,   18,   63,   37,   43,   53,
       53,   53,   63,   37,   17,   24,   24,   43,   24,   24,
       24,   24,   24,   24,   24,   24,  115,   24,   24,   24,
       24,   24,  115,   39,   66,   24,   24,   24,   24,   24,
       24,   37,   62,   50,   50,   50,   45,   64,   64,   65,
       69,   66,   69,   62,   24,   45,   50,   92,   68,   54,
       65,   54,   54,   54,   67,   68,   70,  156,   67,   92,
       68,   50,   97,  156,   54,   97,   24,   24,   25,   25,
       70,   25,   25,   25,   25,   25,   25,   25,   25,   54,

       25,   25,   25,   25,   25,   45,   77,   71,   25,   25,
       25,   25,   25,   25,   55,   77,   55,   55,   55,   56,
       71,   56,   72,   99,   56,   56,   56,   25,   25,   55,
       58,   75,   58,   58,   58,   75,   72,   74,   74,   99,
       93,   75,   95,  103,   55,   58,   82,   75,   75,   25,
       25,   40,   79,   93,   40,   82,   82,   95,   74,  103,
       58,   79,   98,   40,   40,   88,   88,   88,   84,   75,
       84,   40,  100,   84,   84,   84,   89,   89,   89,   74,
       98,  100,  101,  123,   40,   40,  102,   40,   40,  120,
      123,  102,   40,   79,   87,   87,   87,   40,  104,  101,

       40,  120,   40,  108,   40,   40,   48,   87,  116,   48,
      104,  104,  108,  106,  139,  109,  116,  106,   48,   48,
      121,  121,   87,  106,  109,  109,   48,  139,  118,  106,
      106,  117,  104,  111,  111,  111,  112,  112,  112,   48,
       48,  125,   48,   48,  118,  125,  117,   48,  122,  126,
      108,  106,   48,  122,  281,   48,  131,   48,  136,   48,
       48,   57,   57,   57,  124,  131,  126,  124,  136,  279,
       57,   57,   57,   57,   57,  113,  141,  113,  135,  141,
      113,  113,  113,  135,  277,   57,   57,   57,   57,   57,
       57,   76,   76,   76,  127,  133,  133,  133,  140,  275,

       76,   76,   76,   76,   76,  146,  127,  127,  134,  134,
      134,  131,  272,  143,  140,   76,   76,   76,   76,   76,
       76,   83,   83,   83,  142,  145,  145,  142,  127,  143,
       83,   83,   83,   83,   83,  144,  269,  152,  161,  146,
      144,  150,  152,  161,  268,   83,   83,   83,   83,   83,
       83,   91,   91,  150,   91,   91,   91,   91,   91,   91,
       91,   91,  266,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,

       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,  107,  129,  147,  157,  107,  129,
      148,  153,  172,  130,  107,  129,  157,  130,  154,  148,
      107,  107,  107,  130,  178,  159,  172,  153,  159,  107,
      107,  107,  107,  107,  160,  154,  258,  169,  178,  223,
      147,  169,  107,  129,  107,  107,  107,  107,  107,  107,
      110,  130,  148,  158,  160,  154,  166,  166,  163,  110,
      110,  110,  158,  185,  191,  166,  188,  163,  110,  110,
      110,  110,  110,  168,  182,  188,  163,  185,  191,  255,
      252,  214,  168,  110,  110,  110,  110,  110,  110,  128,

      171,  168,  223,  205,  182,  214,  158,  174,  245,  171,
      176,  128,  128,  128,  163,  242,  174,  180,  188,  176,
      128,  128,  128,  128,  128,  205,  180,  236,  163,  168,
      176,  235,  189,  128,  187,  128,  128,  128,  128,  128,
      128,  189,  187,  168,  231,  174,  171,  230,  227,  222,
      219,  218,  207,  204,  189,  180,  187,  197,  231,  196,
      171,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  175,  177,  190,  193,  200,  224,
      194,  203,  184,  175,  177,  193,  200,  201,  202,  194,
      203,  201,  211,  210,  233,  216,  211,  202,  183,  193,
      200,  210,  233,  203,  216,  201,  220,  228,  170,  237,
      211,  220,  228,  237,  243,  210,  233,  262,  243,  167,
      175,  177,  194,  237,  165,  220,  228,  164,  243,  202,
      162,  262,  224,  216,  175,  177,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  181,
      206,  212,  221,  226,  229,  234,  238,  244,  181,  206,
      212,  221,  226,  229,  234,  238,  244,  248,  249,  253,
      155,  256,  249,  273,  253,  248,  256,  259,  151,  149,
      270,  138,  259,  253,  270,  256,  249,  273,  137,  248,
      132,  119,  212,  114,  270,  181,  259,  234,   85,   78,

       61,   60,  221,  206,  229,   52,  226,  238,  244,  181,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,

      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  192,  195,  199,  209,  213,
      240,  241,  260,  263,  271,  195,  199,  209,  213,  250,
      278,  260,  263,  271,  195,  199,  209,  276,  250,  278,
       47,   46,  276,   44,   29,   26,   19,   13,    3,    0,
        0,  276,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  263,  195,  199,  209,  213,    0,    0,    0,    0,
      250,  278,  260,  240,  241,  271,  195,  199,  209,  213,

      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  217,  274,  280,  282,    0,    0,    0,
        0,    0,  217,  274,  280,  282,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  274,    0,    0,  217,
        0,    0,    0,    0,    0,  280,    0,  282,    0,    0,
        0,    0,    0,  217,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  247,  251,  261,
      264,    0,    0,    0,    0,    0,  247,  251,  261,  264,

        0,    0,    0,    0,    0,  247,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  247,  251,  261,  264,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  247,  251,  261,
      264,  285,  285,    0,  285,    0,  285,  285,  286,  286,
        0,  286,  286,  286,  286,  287,  287,  287,  287,  287,
      287,  287,  288,  288,    0,  288,  288,  288,  288,  289,
      289,    0,  289,    0,  289,  289,  290,    0,    0,  290,
      290,  290,  290,  291,  291,  291,  291,  291,  291,  291,

      292,  292,  292,  292,  292,  292,  292,  293,  293,    0,
      293,  293,  293,  293,  294,    0,  294,  295,  295,  295,
      295,  295,  295,  295,  296,  296,    0,  296,  296,  296,
      296,  297,  297,  298,  298,  298,  298,  298,  298,  298,
      299,  299,  299,  299,  299,  299,  299,  300,  300,  300,
      300,  300,  300,  300,  301,  301,  301,  301,  301,  301,
      301,  302,  302,  302,  302,  302,  302,  302,  303,  303,
      303,  303,  303,  303,  303,  304,  304,  304,  304,  304,
      304,  304,  305,  305,  305,  305,  305,  305,  305,  306,
      306,  306,  306,  306,  306,  306,  307,  307,  307,  307,

      307,  307,  307,  308,  308,  308,  308,  308,  308,  308,
      309,  309,  309,  309,  309,  309,  309,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
#line 2 "scanner.ll"

#define YY_NO_UNPUT
#include <stdlib.h>
#include <ctype.h>

class QString;

#ifndef KDE_USE_FINAL
#include "yacc.cc.h"
#endif

extern int idl_line_no;
int comment_mode;

#include <qstring.h>

static long ascii_to_longlong( long base, const char *s )
{
  long ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static double ascii_to_longdouble (const char *s)
{
  double d;
#ifdef HAVE_SCANF_LF
  sscanf (s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod (s, NULL);
#endif
  return d;
}

static char translate_char( const char *s )
{
  char c = *s++;

  if( c != '\\' )
    return c;
  c = *s++;
  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    return (char) ascii_to_longlong( 16, s );
  default:
    // Gotta be an octal
    return (char) ascii_to_longlong( 8, s );
  }
}


/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 967 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 127 "scanner.ll"


#line 1121 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 285 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 284 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 129 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 130 "scanner.ll"
{ idl_line_no++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 132 "scanner.ll"
{ comment_mode = 1; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 133 "scanner.ll"
{ if (!comment_mode) { REJECT; } else { comment_mode = 0; } }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 134 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 135 "scanner.ll"
{ if (!comment_mode) { REJECT; } }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 137 "scanner.ll"
;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 138 "scanner.ll"
{
                          exit( 1 );
                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 141 "scanner.ll"
{
			  QString s( yytext );
			  yylval._str = new QString( s.mid( 10, s.stripWhiteSpace().length() - 11 ) );
                          idl_line_no++;
                          return T_INCLUDE;
                        }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 147 "scanner.ll"
{
                          idl_line_no++;
                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 150 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 151 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 152 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 153 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 154 "scanner.ll"
return T_COLON;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 155 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 156 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 157 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 158 "scanner.ll"
return T_LESS;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 159 "scanner.ll"
return T_GREATER;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 160 "scanner.ll"
return T_SCOPE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 161 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 163 "scanner.ll"
return T_CONST;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 164 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 165 "scanner.ll"
return T_CLASS;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 166 "scanner.ll"
return T_STRUCT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 167 "scanner.ll"
return T_VIRTUAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 168 "scanner.ll"
return T_PUBLIC;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 169 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 170 "scanner.ll"
return T_TYPEDEF;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 171 "scanner.ll"
return T_DCOP;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 172 "scanner.ll"
;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 173 "scanner.ll"
return T_NULL;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 175 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 176 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 177 "scanner.ll"
return T_DCOP_AREA;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 178 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 179 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 180 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 182 "scanner.ll"
{
			  yylval._str = new QString( yytext );
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 41:
#line 187 "scanner.ll"
case 42:
#line 188 "scanner.ll"
case 43:
#line 189 "scanner.ll"
case 44:
#line 190 "scanner.ll"
case 45:
YY_RULE_SETUP
#line 190 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_DOUBLE_LITERAL;
			}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 194 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 198 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 202 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 206 "scanner.ll"
{
                          QCString s( yytext );
	                  s = s.mid( 1, s.length() - 2 );
			  yylval._char = translate_char( s );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 212 "scanner.ll"
{
                          QString s( yytext );
                          yylval._str = new QString( s.mid( 1, s.length() - 2 ) );
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 217 "scanner.ll"
{
                          return T_UNKNOWN;
                        }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 221 "scanner.ll"
ECHO;
	YY_BREAK
#line 1488 "scanner.cc"
			case YY_STATE_EOF(INITIAL):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 285 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 285 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 284);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 221 "scanner.ll"


void dcopidlInitFlex( const char *_code )
{
   comment_mode = 0;
   yy_switch_to_buffer( yy_scan_string( _code ) );
}
