#! /usr/bin/env python

import os
Import('env')

# TODO tests directory is incomplete (ita)

env.subdirs('dcopidl2cpp dcopidlng client tests')

if env['WINDOWS']:
	ice_ccflags = ' -DICE_t -DTRANS_SERVER -DTRANS_CLIENT -DTCPCONN -DANSICPP ' 
else:
	ice_ccflags = '-DICE_t -DTRANS_SERVER -DTRANS_CLIENT -DUNIXCONN -DANSICPP'

ice_sources="""
KDE-ICE/accept.c
KDE-ICE/authutil.c
KDE-ICE/connect.c
KDE-ICE/error.c
KDE-ICE/getauth.c
KDE-ICE/globals.c
KDE-ICE/iceauth.c
KDE-ICE/listen.c
KDE-ICE/listenwk.c
KDE-ICE/locking.c
KDE-ICE/misc.c
KDE-ICE/ping.c
KDE-ICE/process.c
KDE-ICE/protosetup.c
KDE-ICE/register.c
KDE-ICE/replywait.c
KDE-ICE/setauth.c
KDE-ICE/shutdown.c
KDE-ICE/transport.c
KDE-ICE/watch.c
"""

# libDCOP - library for DCOP support
obj = env.qt4obj('shlib',env)
obj.vnum     = '6.0.2'
obj.target   = 'DCOP'
obj.source   = 'dcopstub.cpp dcopref.cpp dcopobject.cpp dcopclient.cpp' + ice_sources
obj.uselib   = 'QT QTCORE QT3SUPPORT KDE4'
obj.includes = 'KDE-ICE'
obj.ccflags += ice_ccflags
if env['WINDOWS']:
	obj.ccflags  += ' -DKICE_EXPORT=DCOP_EXPORT -DKDECORE_EXPORT= '
	obj.libpaths += ' ../win/'
	obj.libs     += ' kdewin32 ws2_32'
obj.execute()

# dcopserver program
obj = env.kdeinitobj(env)
obj.target   = 'dcopserver'
obj.source   = 'dcopserver.cpp dcopsignals.cpp'
obj.uselib   = 'QT QTCORE QT3SUPPORT KDE4'
obj.libpaths = '.'
obj.libs     = 'DCOP'

if env['WINDOWS']: 
	if env['CC'] != 'cl':
		obj.ccflags  += ' -Dkdemain=main'

	obj.libpaths += ' ../win/'
	obj.libs     += ' kdewin32 ws2_32'
 		
obj.execute()

# generate dcop-path.h, depends on PREFIX (rebuild if the variable PREFIX changes)
def build_dcopfile(target = None, source = None, env = None):
	dest = open(str(target[0]), 'w')
	dest.write('#define DCOP_PATH "%s"\n' % env.join(env['PREFIX'], 'bin'))
	dest.close()
def string_dcopfile(target, source, env):
	return "creating %s" % (target[0].path)
act=env.Action(build_dcopfile, string_dcopfile, varlist=['PREFIX'])
	
env.Command('dcop-path.h', '', act) # no source needed

# dcopserver_shutdown - program for forcing dcopserver to shutdown
obj=env.genobj('program', env)
obj.target='dcopserver_shutdown'
obj.source='dcopserver_shutdown.c'
obj.instdir  = env['KDEBIN']
if env['WINDOWS']:
	obj.libpaths = '../win/'
	obj.libs     = 'kdewin32 ws2_32'

obj.execute()

install_headers = "dcopclient.h dcopobject.h dcopstub.h dcopref.h dcoptypes.h kdatastream.h"

env.bksys_insttype( 'KDEINCLUDE', '', install_headers )

