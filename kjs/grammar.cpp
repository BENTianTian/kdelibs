
/*  A Bison parser, made from grammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse kjsyyparse
#define yylex kjsyylex
#define yyerror kjsyyerror
#define yylval kjsyylval
#define yychar kjsyychar
#define yydebug kjsyydebug
#define yynerrs kjsyynerrs
#define YYLSP_NEEDED

#define	NULLTOKEN	257
#define	TRUETOKEN	258
#define	FALSETOKEN	259
#define	STRING	260
#define	NUMBER	261
#define	BREAK	262
#define	CASE	263
#define	DEFAULT	264
#define	FOR	265
#define	NEW	266
#define	VAR	267
#define	CONTINUE	268
#define	FUNCTION	269
#define	RETURN	270
#define	VOID	271
#define	DELETE	272
#define	IF	273
#define	THIS	274
#define	DO	275
#define	WHILE	276
#define	ELSE	277
#define	IN	278
#define	INSTANCEOF	279
#define	TYPEOF	280
#define	SWITCH	281
#define	WITH	282
#define	RESERVED	283
#define	THROW	284
#define	TRY	285
#define	CATCH	286
#define	FINALLY	287
#define	EQEQ	288
#define	NE	289
#define	STREQ	290
#define	STRNEQ	291
#define	LE	292
#define	GE	293
#define	OR	294
#define	AND	295
#define	PLUSPLUS	296
#define	MINUSMINUS	297
#define	LSHIFT	298
#define	RSHIFT	299
#define	URSHIFT	300
#define	PLUSEQUAL	301
#define	MINUSEQUAL	302
#define	MULTEQUAL	303
#define	DIVEQUAL	304
#define	LSHIFTEQUAL	305
#define	RSHIFTEQUAL	306
#define	URSHIFTEQUAL	307
#define	ANDEQUAL	308
#define	MODEQUAL	309
#define	XOREQUAL	310
#define	OREQUAL	311
#define	IDENT	312
#define	AUTOPLUSPLUS	313
#define	AUTOMINUSMINUS	314

#line 1 "grammar.y"


/*
 *  This file is part of the KDE libraries
 *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *  $Id$
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <string.h>
#include <stdlib.h>
#include "value.h"
#include "object.h"
#include "types.h"
#include "interpreter.h"
#include "nodes.h"
#include "lexer.h"
#include "internal.h"

/* default values for bison */
#define YYDEBUG 0
#define YYMAXDEPTH 0
#define YYERROR_VERBOSE
#define DBG(l, s, e) { l->setLoc(s.first_line, e.last_line, Parser::sid); } // location

extern int yylex();
int yyerror (const char *);
bool automatic();

using namespace KJS;


#line 51 "grammar.y"
typedef union {
  int                 ival;
  double              dval;
  UString             *ustr;
  Node                *node;
  StatementNode       *stat;
  ParameterNode       *param;
  FunctionBodyNode    *body;
  FuncDeclNode        *func;
  ProgramNode         *prog;
  AssignExprNode      *init;
  SourceElementNode   *src;
  SourceElementsNode  *srcs;
  StatListNode        *slist;
  ArgumentsNode       *args;
  ArgumentListNode    *alist;
  VarDeclNode         *decl;
  VarDeclListNode     *vlist;
  CaseBlockNode       *cblk;
  ClauseListNode      *clist;
  CaseClauseNode      *ccl;
  ElementNode         *elm;
  ElisionNode         *eli;
  Operator            op;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		357
#define	YYFLAG		-32768
#define	YYNTBASE	85

#define YYTRANSLATE(x) ((unsigned)(x) <= 314 ? yytranslate[x] : 149)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    74,     2,     2,     2,    76,    79,     2,    62,
    63,    75,    71,    68,    72,    70,    61,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    69,    84,    77,
    83,    78,    82,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    66,     2,    67,    80,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    64,    81,    65,    73,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    24,    27,    31,    35,    39,    45,    48,    53,    54,
    56,    58,    61,    65,    71,    73,    75,    77,    79,    81,
    86,    90,    94,    96,    99,   102,   105,   110,   114,   117,
   121,   123,   127,   129,   131,   133,   136,   139,   141,   144,
   147,   150,   153,   156,   159,   162,   165,   168,   171,   174,
   176,   180,   184,   188,   190,   194,   198,   200,   204,   208,
   212,   214,   218,   222,   226,   230,   234,   238,   240,   244,
   248,   252,   256,   258,   262,   264,   268,   270,   274,   276,
   280,   282,   286,   288,   294,   296,   300,   302,   304,   306,
   308,   310,   312,   314,   316,   318,   320,   322,   324,   326,
   330,   332,   334,   336,   338,   340,   342,   344,   346,   348,
   350,   352,   354,   356,   358,   361,   365,   367,   370,   374,
   378,   380,   384,   386,   389,   392,   394,   397,   400,   406,
   414,   421,   427,   437,   448,   456,   465,   475,   476,   478,
   481,   484,   488,   492,   495,   498,   502,   506,   509,   512,
   516,   520,   526,   532,   536,   542,   543,   545,   547,   550,
   554,   559,   562,   566,   570,   574,   578,   582,   587,   593,
   596,   602,   609,   614,   620,   622,   626,   629,   633,   634,
   636,   638,   641,   643
};

static const short yyrhs[] = {     3,
     0,     4,     0,     5,     0,     7,     0,     6,     0,    61,
     0,    20,     0,    58,     0,    85,     0,    87,     0,    62,
   114,    63,     0,    64,    65,     0,    64,    91,    65,     0,
    66,    89,    67,     0,    66,    88,    67,     0,    66,    88,
    68,    89,    67,     0,    89,   112,     0,    88,    68,    89,
   112,     0,     0,    90,     0,    68,     0,    90,    68,     0,
    92,    69,   112,     0,    91,    68,    92,    69,   112,     0,
    58,     0,     6,     0,     7,     0,    86,     0,   143,     0,
    93,    66,   114,    67,     0,    93,    70,    58,     0,    12,
    93,    96,     0,    93,     0,    12,    94,     0,    93,    96,
     0,    95,    96,     0,    95,    66,   114,    67,     0,    95,
    70,    58,     0,    62,    63,     0,    62,    97,    63,     0,
   112,     0,    97,    68,   112,     0,    94,     0,    95,     0,
    98,     0,    98,    42,     0,    98,    43,     0,    99,     0,
    18,   100,     0,    17,   100,     0,    26,   100,     0,    42,
   100,     0,    59,   100,     0,    43,   100,     0,    60,   100,
     0,    71,   100,     0,    72,   100,     0,    73,   100,     0,
    74,   100,     0,   100,     0,   101,    75,   100,     0,   101,
    61,   100,     0,   101,    76,   100,     0,   101,     0,   102,
    71,   101,     0,   102,    72,   101,     0,   102,     0,   103,
    44,   102,     0,   103,    45,   102,     0,   103,    46,   102,
     0,   103,     0,   104,    77,   103,     0,   104,    78,   103,
     0,   104,    38,   103,     0,   104,    39,   103,     0,   104,
    25,   103,     0,   104,    24,   103,     0,   104,     0,   105,
    34,   104,     0,   105,    35,   104,     0,   105,    36,   104,
     0,   105,    37,   104,     0,   105,     0,   106,    79,   105,
     0,   106,     0,   107,    80,   105,     0,   107,     0,   108,
    81,   105,     0,   108,     0,   109,    41,   108,     0,   109,
     0,   110,    40,   109,     0,   110,     0,   110,    82,   112,
    69,   112,     0,   111,     0,    98,   113,   112,     0,    83,
     0,    47,     0,    48,     0,    49,     0,    50,     0,    51,
     0,    52,     0,    53,     0,    54,     0,    56,     0,    57,
     0,    55,     0,   112,     0,   114,    68,   112,     0,   116,
     0,   118,     0,   122,     0,   123,     0,   124,     0,   125,
     0,   127,     0,   128,     0,   129,     0,   130,     0,   131,
     0,   137,     0,   138,     0,   139,     0,    64,    65,     0,
    64,   117,    65,     0,   115,     0,   117,   115,     0,    13,
   119,    84,     0,    13,   119,     1,     0,   120,     0,   119,
    68,   120,     0,    58,     0,    58,   121,     0,    83,   112,
     0,    84,     0,   114,    84,     0,   114,     1,     0,    19,
    62,   114,    63,   115,     0,    19,    62,   114,    63,   115,
    23,   115,     0,    21,   115,    22,    62,   114,    63,     0,
    22,    62,   114,    63,   115,     0,    11,    62,   126,    84,
   126,    84,   126,    63,   115,     0,    11,    62,    13,   119,
    84,   126,    84,   126,    63,   115,     0,    11,    62,    98,
    24,   114,    63,   115,     0,    11,    62,    13,    58,    24,
   114,    63,   115,     0,    11,    62,    13,    58,   121,    24,
   114,    63,   115,     0,     0,   114,     0,    14,    84,     0,
    14,     1,     0,    14,    58,    84,     0,    14,    58,     1,
     0,     8,    84,     0,     8,     1,     0,     8,    58,    84,
     0,     8,    58,     1,     0,    16,    84,     0,    16,     1,
     0,    16,   114,    84,     0,    16,   114,     1,     0,    28,
    62,   114,    63,   115,     0,    27,    62,   114,    63,   132,
     0,    64,   133,    65,     0,    64,   133,   136,   133,    65,
     0,     0,   134,     0,   135,     0,   134,   135,     0,     9,
   114,    69,     0,     9,   114,    69,   117,     0,    10,    69,
     0,    10,    69,   117,     0,    58,    69,   115,     0,    30,
   114,    84,     0,    31,   116,   140,     0,    31,   116,   141,
     0,    31,   116,   140,   141,     0,    32,    62,    58,    63,
   116,     0,    33,   116,     0,    15,    58,    62,    63,   145,
     0,    15,    58,    62,   144,    63,   145,     0,    15,    62,
    63,   145,     0,    15,    62,   144,    63,   145,     0,    58,
     0,   144,    68,    58,     0,    64,    65,     0,    64,   147,
    65,     0,     0,   147,     0,   148,     0,   147,   148,     0,
   115,     0,   142,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   158,   160,   161,   162,   163,   164,   169,   171,   173,   174,
   175,   176,   177,   180,   182,   183,   186,   188,   192,   194,
   197,   199,   202,   204,   208,   211,   212,   215,   217,   218,
   219,   221,   224,   226,   229,   231,   232,   233,   236,   238,
   241,   243,   246,   248,   251,   253,   254,   257,   259,   260,
   261,   262,   263,   264,   265,   266,   267,   268,   269,   272,
   274,   275,   276,   279,   281,   282,   285,   287,   288,   289,
   292,   294,   296,   298,   300,   302,   304,   308,   310,   311,
   312,   313,   316,   318,   321,   323,   326,   328,   331,   333,
   337,   339,   343,   345,   349,   351,   355,   357,   358,   359,
   360,   361,   362,   363,   364,   365,   366,   367,   370,   372,
   375,   377,   378,   379,   380,   381,   382,   383,   384,   385,
   386,   387,   388,   389,   392,   394,   397,   399,   402,   405,
   414,   416,   420,   422,   425,   429,   433,   436,   443,   445,
   449,   451,   452,   455,   458,   461,   465,   471,   473,   476,
   478,   482,   484,   491,   493,   497,   499,   507,   509,   513,
   514,   520,   525,   530,   532,   536,   538,   541,   543,   546,
   548,   551,   553,   556,   562,   566,   568,   569,   572,   576,
   580,   583,   587,   589,   594,   596,   600,   603,   607,   610,
   614,   616,   619,   621
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NULLTOKEN",
"TRUETOKEN","FALSETOKEN","STRING","NUMBER","BREAK","CASE","DEFAULT","FOR","NEW",
"VAR","CONTINUE","FUNCTION","RETURN","VOID","DELETE","IF","THIS","DO","WHILE",
"ELSE","IN","INSTANCEOF","TYPEOF","SWITCH","WITH","RESERVED","THROW","TRY","CATCH",
"FINALLY","EQEQ","NE","STREQ","STRNEQ","LE","GE","OR","AND","PLUSPLUS","MINUSMINUS",
"LSHIFT","RSHIFT","URSHIFT","PLUSEQUAL","MINUSEQUAL","MULTEQUAL","DIVEQUAL",
"LSHIFTEQUAL","RSHIFTEQUAL","URSHIFTEQUAL","ANDEQUAL","MODEQUAL","XOREQUAL",
"OREQUAL","IDENT","AUTOPLUSPLUS","AUTOMINUSMINUS","'/'","'('","')'","'{'","'}'",
"'['","']'","','","':'","'.'","'+'","'-'","'~'","'!'","'*'","'%'","'<'","'>'",
"'&'","'^'","'|'","'?'","'='","';'","Literal","PrimaryExpr","ArrayLiteral","ElementList",
"ElisionOpt","Elision","PropertyNameAndValueList","PropertyName","MemberExpr",
"NewExpr","CallExpr","Arguments","ArgumentList","LeftHandSideExpr","PostfixExpr",
"UnaryExpr","MultiplicativeExpr","AdditiveExpr","ShiftExpr","RelationalExpr",
"EqualityExpr","BitwiseANDExpr","BitwiseXORExpr","BitwiseORExpr","LogicalANDExpr",
"LogicalORExpr","ConditionalExpr","AssignmentExpr","AssignmentOperator","Expr",
"Statement","Block","StatementList","VariableStatement","VariableDeclarationList",
"VariableDeclaration","Initializer","EmptyStatement","ExprStatement","IfStatement",
"IterationStatement","ExprOpt","ContinueStatement","BreakStatement","ReturnStatement",
"WithStatement","SwitchStatement","CaseBlock","CaseClausesOpt","CaseClauses",
"CaseClause","DefaultClause","LabelledStatement","ThrowStatement","TryStatement",
"Catch","Finally","FunctionDeclaration","FunctionExpr","FormalParameterList",
"FunctionBody","Program","SourceElements","SourceElement", NULL
};
#endif

static const short yyr1[] = {     0,
    85,    85,    85,    85,    85,    85,    86,    86,    86,    86,
    86,    86,    86,    87,    87,    87,    88,    88,    89,    89,
    90,    90,    91,    91,    92,    92,    92,    93,    93,    93,
    93,    93,    94,    94,    95,    95,    95,    95,    96,    96,
    97,    97,    98,    98,    99,    99,    99,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   101,
   101,   101,   101,   102,   102,   102,   103,   103,   103,   103,
   104,   104,   104,   104,   104,   104,   104,   105,   105,   105,
   105,   105,   106,   106,   107,   107,   108,   108,   109,   109,
   110,   110,   111,   111,   112,   112,   113,   113,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   114,   114,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115,   115,   115,   115,   116,   116,   117,   117,   118,   118,
   119,   119,   120,   120,   121,   122,   123,   123,   124,   124,
   125,   125,   125,   125,   125,   125,   125,   126,   126,   127,
   127,   127,   127,   128,   128,   128,   128,   129,   129,   129,
   129,   130,   131,   132,   132,   133,   133,   134,   134,   135,
   135,   136,   136,   137,   138,   139,   139,   139,   140,   141,
   142,   142,   143,   143,   144,   144,   145,   145,   146,   146,
   147,   147,   148,   148
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     2,     3,     3,     3,     5,     2,     4,     0,     1,
     1,     2,     3,     5,     1,     1,     1,     1,     1,     4,
     3,     3,     1,     2,     2,     2,     4,     3,     2,     3,
     1,     3,     1,     1,     1,     2,     2,     1,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
     3,     3,     3,     1,     3,     3,     1,     3,     3,     3,
     1,     3,     3,     3,     3,     3,     3,     1,     3,     3,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     3,     1,     5,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     3,     1,     2,     3,     3,
     1,     3,     1,     2,     2,     1,     2,     2,     5,     7,
     6,     5,     9,    10,     7,     8,     9,     0,     1,     2,
     2,     3,     3,     2,     2,     3,     3,     2,     2,     3,
     3,     5,     5,     3,     5,     0,     1,     1,     2,     3,
     4,     2,     3,     3,     3,     3,     3,     4,     5,     2,
     5,     6,     4,     5,     1,     3,     2,     3,     0,     1,
     1,     2,     1,     1
};

static const short yydefact[] = {   189,
     1,     2,     3,     5,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     8,     0,     0,     6,     0,
     0,    19,     0,     0,     0,     0,   136,     9,    28,    10,
    33,    43,    44,    45,    48,    60,    64,    67,    71,    78,
    83,    85,    87,    89,    91,    93,    95,   109,     0,   193,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   194,    29,   190,   191,   155,     0,
   154,   148,     0,     8,     0,    33,    34,   133,     0,   131,
   151,     0,   150,     0,     0,   159,   158,     0,    45,    50,
    49,     0,     0,     0,    51,     0,     0,     0,     0,     0,
    52,    54,     0,    53,    55,     0,     5,     4,     8,    12,
     0,     0,   127,     0,    21,     0,     0,    20,    56,    57,
    58,    59,     0,     0,     0,    35,     0,     0,    36,    46,
    47,    98,    99,   100,   101,   102,   103,   104,   105,   108,
   106,   107,    97,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   138,     0,
   137,   192,   157,   156,     0,    45,   149,     0,    26,    27,
    25,    12,    32,     0,   134,   130,     0,   129,   153,   152,
     0,   185,     0,     0,   161,   160,     0,     0,     0,     0,
     0,   175,   125,     0,     0,   176,   177,   174,    11,    13,
     0,     0,   126,   128,    15,    19,    14,    17,    22,    39,
     0,    41,     0,    31,     0,    38,    96,    62,    61,    63,
    65,    66,    68,    69,    70,    77,    76,    74,    75,    72,
    73,    79,    80,    81,    82,    84,    86,    88,    90,    92,
     0,   110,   133,     0,     0,   148,   135,   132,     0,     0,
     0,   183,     0,     0,     0,     0,     0,     0,     0,     0,
   180,   178,     0,    23,     0,    40,     0,    30,    37,     0,
     0,   134,   148,     0,     0,   181,     0,   187,     0,   184,
   186,   139,     0,   142,   166,   163,   162,     0,     0,    16,
    18,    42,    94,     0,     0,     0,     0,   148,   182,   188,
     0,   141,     0,     0,   167,   168,     0,    24,     0,     0,
   148,   145,     0,   140,     0,     0,   164,   166,   169,   179,
   146,     0,     0,     0,   170,   172,     0,   147,     0,   143,
   171,   173,   165,   144,     0,     0,     0
};

static const short yydefgoto[] = {    38,
    39,    40,   126,   127,   128,   121,   122,    41,    42,    43,
   136,   231,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   154,    59,    60,
    61,   124,    62,    89,    90,   195,    63,    64,    65,    66,
   188,    67,    68,    69,    70,    71,   306,   324,   325,   326,
   338,    72,    73,    74,   216,   217,    75,    76,   204,   272,
   355,    77,    78
};

static const short yypact[] = {   726,
-32768,-32768,-32768,-32768,-32768,    21,     0,  1016,    36,    29,
    -2,    60,  1127,  1127,    61,-32768,   800,    74,  1127,    78,
    81,  1127,   -25,  1127,  1127,    39,  1127,  1127,-32768,  1127,
   356,    59,  1127,  1127,  1127,  1127,-32768,-32768,-32768,-32768,
    75,-32768,    80,   238,-32768,-32768,   -32,   -13,    38,   114,
   185,    50,    71,    88,   131,   -28,-32768,-32768,     6,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   726,-32768,-32768,     7,
-32768,   170,   127,-32768,    46,    75,-32768,    95,    17,-32768,
-32768,    22,-32768,   139,   -23,-32768,-32768,    32,   112,-32768,
-32768,  1127,   211,  1127,-32768,  1127,  1127,   -36,   430,   148,
-32768,-32768,   800,-32768,-32768,   -21,   138,   166,    39,   882,
   -19,   179,-32768,   504,-32768,   143,   911,   191,-32768,-32768,
-32768,-32768,   983,  1127,   195,-32768,  1127,   203,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1127,  1127,  1127,  1127,  1127,  1127,  1127,
  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,
  1127,  1127,  1127,  1127,  1127,  1127,  1127,  1127,-32768,  1127,
-32768,-32768,-32768,-32768,   208,  1052,   202,   187,-32768,-32768,
-32768,-32768,-32768,  1127,-32768,-32768,    36,-32768,-32768,-32768,
    51,-32768,   209,    47,-32768,-32768,    49,   210,    67,   100,
   102,-32768,-32768,   212,   -25,   242,-32768,-32768,-32768,-32768,
    30,  1127,-32768,-32768,-32768,    59,-32768,-32768,-32768,-32768,
   103,-32768,   182,-32768,   184,-32768,-32768,-32768,-32768,-32768,
   -32,   -32,   -13,   -13,   -13,    38,    38,    38,    38,    38,
    38,   114,   114,   114,   114,   185,   185,   185,    88,   131,
   207,-32768,   -15,   -34,  1127,  1127,-32768,-32768,   209,   116,
   578,-32768,   209,   219,   800,  1127,   800,   214,   800,   221,
-32768,-32768,   227,-32768,  1055,-32768,  1127,-32768,-32768,  1127,
  1127,   259,  1127,   134,   213,-32768,   209,-32768,   652,-32768,
-32768,   275,   135,-32768,   290,-32768,-32768,   239,  1127,-32768,
-32768,-32768,-32768,   136,  1127,   217,   800,  1127,-32768,-32768,
   800,-32768,  1127,     5,   290,-32768,   -25,-32768,   800,   155,
  1127,-32768,   240,-32768,   186,   241,-32768,   290,-32768,-32768,
-32768,   800,   244,   800,   800,   800,   243,-32768,   800,-32768,
   800,   800,-32768,-32768,   311,   313,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    89,-32768,-32768,    96,   308,   310,-32768,
    -5,-32768,   181,-32768,    -8,   106,    65,    -7,    68,    72,
-32768,-32768,   144,   142,-32768,-32768,  -123,-32768,    -9,   -17,
   -22,   -77,-32768,   141,   126,    70,-32768,-32768,-32768,-32768,
  -242,-32768,-32768,-32768,-32768,-32768,-32768,   -14,-32768,    40,
-32768,-32768,-32768,-32768,-32768,   115,-32768,-32768,   129,  -228,
-32768,   108,   -75
};


#define	YYLAST		1201


static const short yytable[] = {   103,
   110,   182,    98,   228,   100,   101,   179,   183,   291,   232,
   105,   177,   108,   123,   336,   111,   112,   196,   114,   115,
   116,    79,   199,   295,   129,   130,   131,   132,   155,    91,
   237,   180,   205,   197,   202,   189,   190,   139,   109,   203,
   296,   219,   156,   157,   300,   220,   180,   212,   221,   293,
   316,   189,   190,   178,   261,    94,   262,   158,   159,    95,
    96,    82,     1,     2,     3,     4,     5,   194,   319,   337,
   267,     8,   187,   180,    83,   333,    13,    14,    80,    16,
   193,   160,   161,   162,   197,    19,    92,   191,   343,   181,
   184,   123,   207,    88,   209,   218,   210,   211,   284,   180,
   198,    24,    25,   191,    81,   200,   224,   113,   202,   273,
   192,   275,    93,   269,   274,   206,   180,    84,    27,    28,
    29,    30,   102,    85,   233,    32,   125,   235,   173,   277,
    33,    34,    35,    36,   180,   104,   133,   163,   164,   106,
   134,   133,   107,    97,   135,   137,   238,   239,   240,   138,
   174,   165,   166,   140,   141,   246,   247,   248,   249,   250,
   251,   311,   278,   312,   279,   286,   313,   180,   175,   180,
   287,   176,     1,     2,     3,     4,     5,   194,   297,   214,
   215,     8,   185,   274,    83,   328,    13,    14,    95,    16,
   167,   168,   281,    99,    99,    19,   317,   322,   329,    99,
   201,   180,   180,   180,    99,    99,   -26,    99,    99,   225,
   226,    24,    25,    99,    99,    99,    99,   342,   169,   170,
   171,   172,   180,   182,   243,   244,   245,    84,    27,    28,
    29,    30,   208,    85,   -27,    32,   252,   253,   254,   255,
    33,    34,    35,    36,   256,   257,   258,   222,   288,   180,
   289,   180,   234,   180,   345,   294,   187,   302,   229,   304,
   236,   307,   186,   241,   242,   263,   303,   351,   352,   180,
   266,   276,   271,   280,   215,   290,   301,   305,   308,   140,
   141,   314,   315,   187,   142,   143,   144,   145,   146,   147,
   148,   149,   150,   151,   152,   309,   318,   321,   323,   332,
   331,   327,   344,   334,   340,   330,   349,   353,   187,   346,
   356,   341,   357,   335,   285,    86,   283,    87,   260,   259,
   153,   187,   268,   347,   348,   264,   350,   123,   123,   270,
   282,   354,   292,   224,   224,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,     1,     2,
     3,   117,   118,     6,   339,     0,     7,     8,     9,    10,
    83,    12,    13,    14,    15,    16,    17,    18,   299,     0,
     0,    19,    20,    21,     0,    22,    23,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    25,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   119,    27,    28,    29,    30,     0,    31,
   120,    32,     0,     0,     0,     0,    33,    34,    35,    36,
     0,     0,     1,     2,     3,     4,     5,     6,     0,    37,
     7,     8,     9,    10,    83,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,    19,    20,    21,     0,    22,
    23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
    29,    30,     0,    31,   213,    32,     0,     0,     0,     0,
    33,    34,    35,    36,     0,     0,     1,     2,     3,     4,
     5,     6,     0,    37,     7,     8,     9,    10,    83,    12,
    13,    14,    15,    16,    17,    18,     0,     0,     0,    19,
    20,    21,     0,    22,    23,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    24,    25,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    26,    27,    28,    29,    30,     0,    31,   223,    32,
     0,     0,     0,     0,    33,    34,    35,    36,     0,     0,
     1,     2,     3,     4,     5,     6,     0,    37,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
     0,     0,     0,    19,    20,    21,     0,    22,    23,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
    25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    26,    27,    28,    29,    30,
     0,    31,   298,    32,     0,     0,     0,     0,    33,    34,
    35,    36,     0,     0,     1,     2,     3,     4,     5,     6,
     0,    37,     7,     8,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,     0,     0,     0,    19,    20,    21,
     0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    24,    25,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
    27,    28,    29,    30,     0,    31,   320,    32,     0,     0,
     0,     0,    33,    34,    35,    36,     0,     0,     1,     2,
     3,     4,     5,     6,     0,    37,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,    19,    20,    21,     0,    22,    23,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    25,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    26,    27,    28,    29,    30,     0,    31,
     0,    32,     0,     0,     0,     0,    33,    34,    35,    36,
     0,     0,     1,     2,     3,     4,     5,     6,     0,    37,
     7,     8,     9,    10,    83,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,    19,    20,    21,     0,    22,
    23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
    29,    30,     0,    31,     0,    32,     0,     0,     0,     0,
    33,    34,    35,    36,     0,     0,     0,     0,     0,     0,
     0,  -125,     0,    37,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,     0,     0,  -125,  -125,  -125,
     0,  -125,  -125,     1,     2,     3,     4,     5,     0,     0,
     0,     0,     8,     0,     0,    83,     0,    13,    14,     0,
    16,     0,     0,     0,     0,     0,    19,     0,     0,  -125,
  -125,  -125,     0,     0,     0,  -125,  -125,     0,     0,     0,
     0,     0,    24,    25,  -125,  -125,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    84,    27,
    28,    29,    30,     0,    85,     0,    32,   227,     0,     0,
     0,    33,    34,    35,    36,     1,     2,     3,     4,     5,
     0,     0,     0,     0,     8,     0,     0,    83,     0,    13,
    14,     0,    16,     0,     0,     0,     0,     0,    19,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     1,     2,
     3,     4,     5,     0,    24,    25,     0,     8,     0,     0,
    83,     0,     0,     0,     0,    16,     0,     0,     0,     0,
    84,    27,    28,    29,    30,   230,    85,     0,    32,     0,
     0,     0,     0,    33,    34,    35,    36,     1,     2,     3,
     4,     5,     0,     0,     0,     0,     8,     0,     0,    83,
     0,    13,    14,    84,    16,   265,    29,    30,     0,    85,
    19,    32,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   140,   141,     0,    24,    25,   142,   143,
   144,   145,   146,   147,   148,   149,   150,   151,   152,     0,
     0,     0,    84,    27,    28,    29,    30,     0,    85,     0,
    32,   310,     0,     0,     0,    33,    34,    35,    36,     1,
     2,     3,     4,     5,   153,     0,     0,     0,     8,     0,
     0,    83,     0,    13,    14,     0,    16,     0,     0,     0,
     0,     0,    19,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    84,    27,    28,    29,    30,     0,
    85,     0,    32,     0,     0,     0,     0,    33,    34,    35,
    36
};

static const short yycheck[] = {    17,
    23,    77,    12,   127,    13,    14,     1,     1,    24,   133,
    19,    40,    22,    31,    10,    24,    25,     1,    27,    28,
    30,     1,     1,   266,    33,    34,    35,    36,    61,     1,
   154,    68,     1,    68,    58,     6,     7,    43,    64,    63,
   269,    63,    75,    76,   273,    65,    68,    84,    68,    84,
   293,     6,     7,    82,   178,    58,   180,    71,    72,    62,
     1,    62,     3,     4,     5,     6,     7,    83,   297,    65,
   194,    12,    82,    68,    15,   318,    17,    18,    58,    20,
    86,    44,    45,    46,    68,    26,    58,    58,   331,    84,
    84,   109,   102,    58,   104,   113,   106,   107,   222,    68,
    84,    42,    43,    58,    84,    84,   124,    69,    58,    63,
    65,    63,    84,    63,    68,    84,    68,    58,    59,    60,
    61,    62,    62,    64,   134,    66,    68,   137,    79,    63,
    71,    72,    73,    74,    68,    62,    62,    24,    25,    62,
    66,    62,    62,    84,    70,    66,   155,   156,   157,    70,
    80,    38,    39,    42,    43,   163,   164,   165,   166,   167,
   168,   285,    63,   287,    63,    63,   290,    68,    81,    68,
    68,    41,     3,     4,     5,     6,     7,    83,    63,    32,
    33,    12,    13,    68,    15,   309,    17,    18,    62,    20,
    77,    78,   215,    13,    14,    26,    63,    63,    63,    19,
    62,    68,    68,    68,    24,    25,    69,    27,    28,    67,
    68,    42,    43,    33,    34,    35,    36,    63,    34,    35,
    36,    37,    68,   299,   160,   161,   162,    58,    59,    60,
    61,    62,    22,    64,    69,    66,   169,   170,   171,   172,
    71,    72,    73,    74,   173,   174,   175,    69,    67,    68,
    67,    68,    58,    68,    69,   265,   266,   275,    68,   277,
    58,   279,    82,   158,   159,    58,   276,   345,   346,    68,
    84,    62,    64,    62,    33,    69,    58,    64,    58,    42,
    43,   291,    24,   293,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    69,    84,    23,     9,   317,
    84,    63,    63,   321,   327,   315,    63,    65,   318,    69,
     0,   329,     0,   323,   226,     8,   221,     8,   177,   176,
    83,   331,   197,   338,   342,   185,   344,   345,   346,   201,
   216,   349,   263,   351,   352,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,     3,     4,
     5,     6,     7,     8,   325,    -1,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,   271,    -1,
    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    60,    61,    62,    -1,    64,
    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,    84,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    -1,    64,    65,    66,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    -1,    -1,     3,     4,     5,     6,
     7,     8,    -1,    84,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,    26,
    27,    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    58,    59,    60,    61,    62,    -1,    64,    65,    66,
    -1,    -1,    -1,    -1,    71,    72,    73,    74,    -1,    -1,
     3,     4,     5,     6,     7,     8,    -1,    84,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    -1,    -1,    -1,    26,    27,    28,    -1,    30,    31,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,
    -1,    64,    65,    66,    -1,    -1,    -1,    -1,    71,    72,
    73,    74,    -1,    -1,     3,     4,     5,     6,     7,     8,
    -1,    84,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    -1,    -1,    -1,    26,    27,    28,
    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    62,    -1,    64,    65,    66,    -1,    -1,
    -1,    -1,    71,    72,    73,    74,    -1,    -1,     3,     4,
     5,     6,     7,     8,    -1,    84,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    60,    61,    62,    -1,    64,
    -1,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,    84,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    -1,    64,    -1,    66,    -1,    -1,    -1,    -1,
    71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,     0,    -1,    84,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    -1,    -1,    26,    27,    28,
    -1,    30,    31,     3,     4,     5,     6,     7,    -1,    -1,
    -1,    -1,    12,    -1,    -1,    15,    -1,    17,    18,    -1,
    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    58,
    59,    60,    -1,    -1,    -1,    64,    65,    -1,    -1,    -1,
    -1,    -1,    42,    43,    73,    74,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    62,    -1,    64,    -1,    66,    67,    -1,    -1,
    -1,    71,    72,    73,    74,     3,     4,     5,     6,     7,
    -1,    -1,    -1,    -1,    12,    -1,    -1,    15,    -1,    17,
    18,    -1,    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,
     5,     6,     7,    -1,    42,    43,    -1,    12,    -1,    -1,
    15,    -1,    -1,    -1,    -1,    20,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    62,    63,    64,    -1,    66,    -1,
    -1,    -1,    -1,    71,    72,    73,    74,     3,     4,     5,
     6,     7,    -1,    -1,    -1,    -1,    12,    -1,    -1,    15,
    -1,    17,    18,    58,    20,    24,    61,    62,    -1,    64,
    26,    66,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    42,    43,    47,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,
    -1,    -1,    58,    59,    60,    61,    62,    -1,    64,    -1,
    66,    67,    -1,    -1,    -1,    71,    72,    73,    74,     3,
     4,     5,     6,     7,    83,    -1,    -1,    -1,    12,    -1,
    -1,    15,    -1,    17,    18,    -1,    20,    -1,    -1,    -1,
    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    -1,
    64,    -1,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
    74
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 159 "grammar.y"
{ yyval.node = new NullNode(); ;
    break;}
case 2:
#line 160 "grammar.y"
{ yyval.node = new BooleanNode(true); ;
    break;}
case 3:
#line 161 "grammar.y"
{ yyval.node = new BooleanNode(false); ;
    break;}
case 4:
#line 162 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].dval); ;
    break;}
case 5:
#line 163 "grammar.y"
{ yyval.node = new StringNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 6:
#line 164 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(l->pattern,l->flags);;
    break;}
case 7:
#line 170 "grammar.y"
{ yyval.node = new ThisNode(); ;
    break;}
case 8:
#line 171 "grammar.y"
{ yyval.node = new ResolveNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 11:
#line 175 "grammar.y"
{ yyval.node = new GroupNode(yyvsp[-1].node); ;
    break;}
case 12:
#line 176 "grammar.y"
{ yyval.node = new ObjectLiteralNode(0L); ;
    break;}
case 13:
#line 177 "grammar.y"
{ yyval.node = new ObjectLiteralNode(yyvsp[-1].node); ;
    break;}
case 14:
#line 181 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli); ;
    break;}
case 15:
#line 182 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].elm); ;
    break;}
case 16:
#line 183 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli, yyvsp[-3].elm); ;
    break;}
case 17:
#line 187 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 18:
#line 189 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-3].elm, yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 19:
#line 193 "grammar.y"
{ yyval.eli = 0L; ;
    break;}
case 21:
#line 198 "grammar.y"
{ yyval.eli = new ElisionNode(0L); ;
    break;}
case 22:
#line 199 "grammar.y"
{ yyval.eli = new ElisionNode(yyvsp[-1].eli); ;
    break;}
case 23:
#line 203 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 24:
#line 205 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node, yyvsp[-4].node); ;
    break;}
case 25:
#line 209 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 26:
#line 211 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 27:
#line 212 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].dval); ;
    break;}
case 30:
#line 218 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 31:
#line 219 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 32:
#line 221 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 34:
#line 226 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[0].node); ;
    break;}
case 35:
#line 230 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 36:
#line 231 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 37:
#line 232 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 38:
#line 233 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr); ;
    break;}
case 39:
#line 237 "grammar.y"
{ yyval.args = new ArgumentsNode(0L); ;
    break;}
case 40:
#line 238 "grammar.y"
{ yyval.args = new ArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 41:
#line 242 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[0].node); ;
    break;}
case 42:
#line 243 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 46:
#line 253 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 47:
#line 254 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 49:
#line 259 "grammar.y"
{ yyval.node = new DeleteNode(yyvsp[0].node); ;
    break;}
case 50:
#line 260 "grammar.y"
{ yyval.node = new VoidNode(yyvsp[0].node); ;
    break;}
case 51:
#line 261 "grammar.y"
{ yyval.node = new TypeOfNode(yyvsp[0].node); ;
    break;}
case 52:
#line 262 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 53:
#line 263 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 54:
#line 264 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 55:
#line 265 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 56:
#line 266 "grammar.y"
{ yyval.node = new UnaryPlusNode(yyvsp[0].node); ;
    break;}
case 57:
#line 267 "grammar.y"
{ yyval.node = new NegateNode(yyvsp[0].node); ;
    break;}
case 58:
#line 268 "grammar.y"
{ yyval.node = new BitwiseNotNode(yyvsp[0].node); ;
    break;}
case 59:
#line 269 "grammar.y"
{ yyval.node = new LogicalNotNode(yyvsp[0].node); ;
    break;}
case 61:
#line 274 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 62:
#line 275 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 63:
#line 276 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 65:
#line 281 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 66:
#line 282 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 68:
#line 287 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 69:
#line 288 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 70:
#line 289 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 72:
#line 295 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 73:
#line 297 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 74:
#line 299 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 75:
#line 301 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 76:
#line 303 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 77:
#line 305 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpIn, yyvsp[0].node); ;
    break;}
case 79:
#line 310 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 80:
#line 311 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 81:
#line 312 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 82:
#line 313 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 84:
#line 318 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 86:
#line 323 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 88:
#line 328 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 90:
#line 334 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 92:
#line 340 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 94:
#line 346 "grammar.y"
{ yyval.node = new ConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 96:
#line 352 "grammar.y"
{ yyval.node = new AssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 97:
#line 356 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 98:
#line 357 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 99:
#line 358 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 100:
#line 359 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 101:
#line 360 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 102:
#line 361 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 103:
#line 362 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 104:
#line 363 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 105:
#line 364 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 106:
#line 365 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 107:
#line 366 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 108:
#line 367 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 110:
#line 372 "grammar.y"
{ yyval.node = new CommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 125:
#line 393 "grammar.y"
{ yyval.stat = new BlockNode(0L); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 126:
#line 394 "grammar.y"
{ yyval.stat = new BlockNode(yyvsp[-1].slist); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 127:
#line 398 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[0].stat); ;
    break;}
case 128:
#line 399 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 129:
#line 403 "grammar.y"
{ yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
                                      DBG(yyval.stat, yylsp[-2], yylsp[0]); ;
    break;}
case 130:
#line 405 "grammar.y"
{ if (automatic()) {
                                          yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
					  DBG(yyval.stat, yylsp[-2], yylsp[-1]);
                                        } else {
					  YYABORT;
					}
                                      ;
    break;}
case 131:
#line 415 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[0].decl); ;
    break;}
case 132:
#line 417 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[-2].vlist, yyvsp[0].decl); ;
    break;}
case 133:
#line 421 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[0].ustr, 0); delete yyvsp[0].ustr; ;
    break;}
case 134:
#line 422 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[-1].ustr, yyvsp[0].init); delete yyvsp[-1].ustr; ;
    break;}
case 135:
#line 426 "grammar.y"
{ yyval.init = new AssignExprNode(yyvsp[0].node); ;
    break;}
case 136:
#line 430 "grammar.y"
{ yyval.stat = new EmptyStatementNode(); ;
    break;}
case 137:
#line 434 "grammar.y"
{ yyval.stat = new ExprStatementNode(yyvsp[-1].node);
                                     DBG(yyval.stat, yylsp[-1], yylsp[0]); ;
    break;}
case 138:
#line 436 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ExprStatementNode(yyvsp[-1].node);
				       DBG(yyval.stat, yylsp[-1], yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 139:
#line 444 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-2].node,yyvsp[0].stat,0L);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 140:
#line 446 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-4].node,yyvsp[-2].stat,yyvsp[0].stat);DBG(yyval.stat,yylsp[-6],yylsp[-3]); ;
    break;}
case 141:
#line 450 "grammar.y"
{ yyval.stat=new DoWhileNode(yyvsp[-4].stat,yyvsp[-1].node);DBG(yyval.stat,yylsp[-5],yylsp[-3]);;
    break;}
case 142:
#line 451 "grammar.y"
{ yyval.stat = new WhileNode(yyvsp[-2].node,yyvsp[0].stat);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 143:
#line 453 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]); ;
    break;}
case 144:
#line 456 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].vlist,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-9],yylsp[-1]); ;
    break;}
case 145:
#line 459 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-6],yylsp[-1]); ;
    break;}
case 146:
#line 462 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].ustr,0L,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-7],yylsp[-1]);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 147:
#line 466 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-5].ustr,yyvsp[-4].init,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]);
                                     delete yyvsp[-5].ustr; ;
    break;}
case 148:
#line 472 "grammar.y"
{ yyval.node = 0L; ;
    break;}
case 150:
#line 477 "grammar.y"
{ yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 151:
#line 478 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]);
                                     } else
				       YYABORT; ;
    break;}
case 152:
#line 482 "grammar.y"
{ yyval.stat = new ContinueNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 153:
#line 484 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(yyvsp[-1].ustr);DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ustr;
                                     } else
				       YYABORT; ;
    break;}
case 154:
#line 492 "grammar.y"
{ yyval.stat = new BreakNode();DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 155:
#line 493 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 156:
#line 497 "grammar.y"
{ yyval.stat = new BreakNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ustr; ;
    break;}
case 157:
#line 499 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(yyvsp[-1].ustr); DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ustr;
                                     } else
				       YYABORT;
                                   ;
    break;}
case 158:
#line 508 "grammar.y"
{ yyval.stat = new ReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 159:
#line 509 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 160:
#line 513 "grammar.y"
{ yyval.stat = new ReturnNode(yyvsp[-1].node); ;
    break;}
case 161:
#line 514 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ReturnNode(yyvsp[-1].node);
                                     else
				       YYABORT; ;
    break;}
case 162:
#line 521 "grammar.y"
{ yyval.stat = new WithNode(yyvsp[-2].node,yyvsp[0].stat);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 163:
#line 526 "grammar.y"
{ yyval.stat = new SwitchNode(yyvsp[-2].node, yyvsp[0].cblk);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 164:
#line 531 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-1].clist, 0L, 0L); ;
    break;}
case 165:
#line 533 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 166:
#line 537 "grammar.y"
{ yyval.clist = 0L; ;
    break;}
case 168:
#line 542 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[0].ccl); ;
    break;}
case 169:
#line 543 "grammar.y"
{ yyval.clist = yyvsp[-1].clist->append(yyvsp[0].ccl); ;
    break;}
case 170:
#line 547 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-1].node, 0L); ;
    break;}
case 171:
#line 548 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 172:
#line 552 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, 0L);; ;
    break;}
case 173:
#line 553 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, yyvsp[0].slist); ;
    break;}
case 174:
#line 557 "grammar.y"
{ yyvsp[0].stat->pushLabel(yyvsp[-2].ustr);
                                     yyval.stat = new LabelNode(yyvsp[-2].ustr, yyvsp[0].stat);
                                     delete yyvsp[-2].ustr; ;
    break;}
case 175:
#line 563 "grammar.y"
{ yyval.stat = new ThrowNode(yyvsp[-1].node); ;
    break;}
case 176:
#line 567 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, yyvsp[0].node); ;
    break;}
case 177:
#line 568 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, 0L, yyvsp[0].node); ;
    break;}
case 178:
#line 569 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-2].stat, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 179:
#line 573 "grammar.y"
{ yyval.node = new CatchNode(yyvsp[-2].ustr, yyvsp[0].stat); delete yyvsp[-2].ustr; ;
    break;}
case 180:
#line 577 "grammar.y"
{ yyval.node = new FinallyNode(yyvsp[0].stat); ;
    break;}
case 181:
#line 581 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-3].ustr, 0L, yyvsp[0].body);
                                             delete yyvsp[-3].ustr; ;
    break;}
case 182:
#line 584 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-4].ustr, yyvsp[-2].param, yyvsp[0].body);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 183:
#line 588 "grammar.y"
{ yyval.node = new FuncExprNode(0L, yyvsp[0].body); ;
    break;}
case 184:
#line 590 "grammar.y"
{ yyval.node = new FuncExprNode(yyvsp[-2].param, yyvsp[0].body); ;
    break;}
case 185:
#line 595 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 186:
#line 596 "grammar.y"
{ yyval.param = yyvsp[-2].param->append(yyvsp[0].ustr);
	                             delete yyvsp[0].ustr; ;
    break;}
case 187:
#line 601 "grammar.y"
{ yyval.body = new FunctionBodyNode(0L);
	                             DBG(yyval.body, yylsp[-1], yylsp[0]);;
    break;}
case 188:
#line 603 "grammar.y"
{ yyval.body = new FunctionBodyNode(yyvsp[-1].srcs);
	                             DBG(yyval.body, yylsp[-2], yylsp[0]);;
    break;}
case 189:
#line 608 "grammar.y"
{ yyval.prog = new ProgramNode(0L);
                                     Parser::progNode = yyval.prog; ;
    break;}
case 190:
#line 610 "grammar.y"
{ yyval.prog = new ProgramNode(yyvsp[0].srcs);
                                     Parser::progNode = yyval.prog; ;
    break;}
case 191:
#line 615 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[0].src); ;
    break;}
case 192:
#line 616 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[-1].srcs, yyvsp[0].src); ;
    break;}
case 193:
#line 620 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].stat); ;
    break;}
case 194:
#line 621 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].func); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 624 "grammar.y"


int yyerror (const char *)  /* Called by yyparse on error */
{
//  fprintf(stderr, "ERROR: %s at line %d\n",
//	  s, KJScript::lexer()->lineNo());
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if (yychar == '}' || yychar == 0)
    return true;
  else if (Lexer::curr()->prevTerminator())
    return true;

  return false;
}
