/* A Bison parser, made from grammar.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse kjsyyparse
#define yylex kjsyylex
#define yyerror kjsyyerror
#define yylval kjsyylval
#define yychar kjsyychar
#define yydebug kjsyydebug
#define yynerrs kjsyynerrs
#define YYLSP_NEEDED 1

# define	NULLTOKEN	257
# define	TRUETOKEN	258
# define	FALSETOKEN	259
# define	STRING	260
# define	NUMBER	261
# define	BREAK	262
# define	CASE	263
# define	DEFAULT	264
# define	FOR	265
# define	NEW	266
# define	VAR	267
# define	CONTINUE	268
# define	FUNCTION	269
# define	RETURN	270
# define	VOID	271
# define	DELETE	272
# define	IF	273
# define	THIS	274
# define	DO	275
# define	WHILE	276
# define	ELSE	277
# define	IN	278
# define	INSTANCEOF	279
# define	TYPEOF	280
# define	SWITCH	281
# define	WITH	282
# define	RESERVED	283
# define	THROW	284
# define	TRY	285
# define	CATCH	286
# define	FINALLY	287
# define	EQEQ	288
# define	NE	289
# define	STREQ	290
# define	STRNEQ	291
# define	LE	292
# define	GE	293
# define	OR	294
# define	AND	295
# define	PLUSPLUS	296
# define	MINUSMINUS	297
# define	LSHIFT	298
# define	RSHIFT	299
# define	URSHIFT	300
# define	PLUSEQUAL	301
# define	MINUSEQUAL	302
# define	MULTEQUAL	303
# define	DIVEQUAL	304
# define	LSHIFTEQUAL	305
# define	RSHIFTEQUAL	306
# define	URSHIFTEQUAL	307
# define	ANDEQUAL	308
# define	MODEQUAL	309
# define	XOREQUAL	310
# define	OREQUAL	311
# define	IDENT	312
# define	AUTOPLUSPLUS	313
# define	AUTOMINUSMINUS	314

#line 1 "grammar.y"


/*
 *  This file is part of the KDE libraries
 *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <string.h>
#include <stdlib.h>
#include "value.h"
#include "object.h"
#include "types.h"
#include "interpreter.h"
#include "nodes.h"
#include "lexer.h"
#include "internal.h"

/* default values for bison */
#define YYDEBUG 0
#define YYMAXDEPTH 0
#define YYERROR_VERBOSE
#define DBG(l, s, e) { l->setLoc(s.first_line, e.last_line, Parser::source); } // location

extern int yylex();
static int yyerror (const char *);
static bool automatic();

using namespace KJS;


#line 50 "grammar.y"
#ifndef YYSTYPE
typedef union {
  int                 ival;
  double              dval;
  UString             *ustr;
  Identifier          *ident;
  Node                *node;
  StatementNode       *stat;
  ParameterNode       *param;
  FunctionBodyNode    *body;
  FuncDeclNode        *func;
  FunctionBodyNode    *prog;
  AssignExprNode      *init;
  SourceElementsNode  *srcs;
  StatListNode        *slist;
  ArgumentsNode       *args;
  ArgumentListNode    *alist;
  VarDeclNode         *decl;
  VarDeclListNode     *vlist;
  CaseBlockNode       *cblk;
  ClauseListNode      *clist;
  CaseClauseNode      *ccl;
  ElementNode         *elm;
  Operator            op;
  PropertyValueNode   *plist;
  PropertyNode        *pnode;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif

#ifndef YYLTYPE
typedef struct yyltype
{
  int first_line;
  int first_column;

  int last_line;
  int last_column;
} yyltype;

# define YYLTYPE yyltype
# define YYLTYPE_IS_TRIVIAL 1
#endif

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		361
#define	YYFLAG		-32768
#define	YYNTBASE	85

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 314 ? yytranslate[x] : 150)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    74,     2,     2,     2,    76,    79,     2,
      62,    63,    75,    71,    68,    72,    70,    61,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    69,    84,
      77,    83,    78,    82,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    66,     2,    67,    80,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    64,    81,    65,    73,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,     8,    10,    12,    14,    16,
      18,    20,    22,    26,    29,    33,    37,    41,    47,    50,
      55,    56,    58,    60,    63,    67,    73,    75,    77,    79,
      81,    83,    88,    92,    96,    98,   101,   104,   107,   112,
     116,   119,   123,   125,   129,   131,   133,   135,   138,   141,
     143,   146,   149,   152,   155,   158,   161,   164,   167,   170,
     173,   176,   178,   182,   186,   190,   192,   196,   200,   202,
     206,   210,   214,   216,   220,   224,   228,   232,   236,   240,
     242,   246,   250,   254,   258,   260,   264,   266,   270,   272,
     276,   278,   282,   284,   288,   290,   296,   298,   302,   304,
     306,   308,   310,   312,   314,   316,   318,   320,   322,   324,
     326,   328,   332,   334,   336,   338,   340,   342,   344,   346,
     348,   350,   352,   354,   356,   358,   360,   363,   367,   369,
     372,   376,   380,   382,   386,   388,   391,   394,   396,   399,
     402,   408,   416,   423,   429,   439,   450,   458,   467,   477,
     478,   480,   483,   486,   490,   494,   497,   500,   504,   508,
     511,   514,   518,   522,   528,   534,   538,   544,   545,   547,
     549,   552,   556,   561,   564,   568,   572,   576,   580,   584,
     589,   595,   598,   600,   603,   609,   616,   621,   627,   629,
     633,   636,   640,   641,   643,   645,   648,   650
};
static const short yyrhs[] =
{
       3,     0,     4,     0,     5,     0,     7,     0,     6,     0,
      61,     0,    50,     0,    20,     0,    58,     0,    85,     0,
      87,     0,    62,   114,    63,     0,    64,    65,     0,    64,
      91,    65,     0,    66,    89,    67,     0,    66,    88,    67,
       0,    66,    88,    68,    89,    67,     0,    89,   112,     0,
      88,    68,    89,   112,     0,     0,    90,     0,    68,     0,
      90,    68,     0,    92,    69,   112,     0,    91,    68,    92,
      69,   112,     0,    58,     0,     6,     0,     7,     0,    86,
       0,   144,     0,    93,    66,   114,    67,     0,    93,    70,
      58,     0,    12,    93,    96,     0,    93,     0,    12,    94,
       0,    93,    96,     0,    95,    96,     0,    95,    66,   114,
      67,     0,    95,    70,    58,     0,    62,    63,     0,    62,
      97,    63,     0,   112,     0,    97,    68,   112,     0,    94,
       0,    95,     0,    98,     0,    98,    42,     0,    98,    43,
       0,    99,     0,    18,   100,     0,    17,   100,     0,    26,
     100,     0,    42,   100,     0,    59,   100,     0,    43,   100,
       0,    60,   100,     0,    71,   100,     0,    72,   100,     0,
      73,   100,     0,    74,   100,     0,   100,     0,   101,    75,
     100,     0,   101,    61,   100,     0,   101,    76,   100,     0,
     101,     0,   102,    71,   101,     0,   102,    72,   101,     0,
     102,     0,   103,    44,   102,     0,   103,    45,   102,     0,
     103,    46,   102,     0,   103,     0,   104,    77,   103,     0,
     104,    78,   103,     0,   104,    38,   103,     0,   104,    39,
     103,     0,   104,    25,   103,     0,   104,    24,   103,     0,
     104,     0,   105,    34,   104,     0,   105,    35,   104,     0,
     105,    36,   104,     0,   105,    37,   104,     0,   105,     0,
     106,    79,   105,     0,   106,     0,   107,    80,   106,     0,
     107,     0,   108,    81,   107,     0,   108,     0,   109,    41,
     108,     0,   109,     0,   110,    40,   109,     0,   110,     0,
     110,    82,   112,    69,   112,     0,   111,     0,    98,   113,
     112,     0,    83,     0,    47,     0,    48,     0,    49,     0,
      50,     0,    51,     0,    52,     0,    53,     0,    54,     0,
      56,     0,    57,     0,    55,     0,   112,     0,   114,    68,
     112,     0,   116,     0,   118,     0,   122,     0,   123,     0,
     124,     0,   125,     0,   127,     0,   128,     0,   129,     0,
     130,     0,   131,     0,   137,     0,   138,     0,   139,     0,
      64,    65,     0,    64,   148,    65,     0,   115,     0,   117,
     115,     0,    13,   119,    84,     0,    13,   119,     1,     0,
     120,     0,   119,    68,   120,     0,    58,     0,    58,   121,
       0,    83,   112,     0,    84,     0,   114,    84,     0,   114,
       1,     0,    19,    62,   114,    63,   115,     0,    19,    62,
     114,    63,   115,    23,   115,     0,    21,   115,    22,    62,
     114,    63,     0,    22,    62,   114,    63,   115,     0,    11,
      62,   126,    84,   126,    84,   126,    63,   115,     0,    11,
      62,    13,   119,    84,   126,    84,   126,    63,   115,     0,
      11,    62,    98,    24,   114,    63,   115,     0,    11,    62,
      13,    58,    24,   114,    63,   115,     0,    11,    62,    13,
      58,   121,    24,   114,    63,   115,     0,     0,   114,     0,
      14,    84,     0,    14,     1,     0,    14,    58,    84,     0,
      14,    58,     1,     0,     8,    84,     0,     8,     1,     0,
       8,    58,    84,     0,     8,    58,     1,     0,    16,    84,
       0,    16,     1,     0,    16,   114,    84,     0,    16,   114,
       1,     0,    28,    62,   114,    63,   115,     0,    27,    62,
     114,    63,   132,     0,    64,   133,    65,     0,    64,   133,
     136,   133,    65,     0,     0,   134,     0,   135,     0,   134,
     135,     0,     9,   114,    69,     0,     9,   114,    69,   117,
       0,    10,    69,     0,    10,    69,   117,     0,    58,    69,
     115,     0,    30,   114,    84,     0,    31,   116,   140,     0,
      31,   116,   141,     0,    31,   116,   140,   141,     0,    32,
      62,    58,    63,   116,     0,    33,   116,     0,   143,     0,
      17,   143,     0,    15,    58,    62,    63,   146,     0,    15,
      58,    62,   145,    63,   146,     0,    15,    62,    63,   146,
       0,    15,    62,   145,    63,   146,     0,    58,     0,   145,
      68,    58,     0,    64,    65,     0,    64,   148,    65,     0,
       0,   148,     0,   149,     0,   148,   149,     0,   115,     0,
     142,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   161,   163,   164,   165,   166,   167,   170,   176,   178,
     180,   181,   182,   183,   184,   187,   189,   190,   193,   195,
     199,   201,   204,   206,   209,   211,   215,   217,   218,   221,
     223,   224,   225,   226,   229,   231,   234,   236,   237,   238,
     242,   244,   247,   249,   252,   254,   257,   259,   260,   263,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   278,   280,   281,   282,   285,   287,   288,   291,   293,
     294,   295,   298,   300,   302,   304,   306,   308,   310,   314,
     316,   317,   318,   319,   322,   324,   327,   329,   332,   334,
     337,   339,   343,   345,   349,   351,   355,   357,   361,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     376,   378,   381,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,   393,   394,   395,   398,   400,   403,   405,
     408,   411,   420,   422,   426,   428,   431,   435,   439,   442,
     449,   451,   455,   457,   458,   461,   464,   467,   471,   477,
     479,   482,   484,   488,   490,   497,   499,   503,   505,   513,
     515,   519,   520,   527,   532,   537,   539,   543,   545,   548,
     550,   553,   555,   558,   560,   563,   569,   573,   575,   576,
     579,   584,   588,   591,   594,   597,   602,   604,   609,   611,
     614,   617,   621,   625,   629,   631,   634,   636
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "NULLTOKEN", "TRUETOKEN", "FALSETOKEN", 
  "STRING", "NUMBER", "BREAK", "CASE", "DEFAULT", "FOR", "NEW", "VAR", 
  "CONTINUE", "FUNCTION", "RETURN", "VOID", "DELETE", "IF", "THIS", "DO", 
  "WHILE", "ELSE", "IN", "INSTANCEOF", "TYPEOF", "SWITCH", "WITH", 
  "RESERVED", "THROW", "TRY", "CATCH", "FINALLY", "EQEQ", "NE", "STREQ", 
  "STRNEQ", "LE", "GE", "OR", "AND", "PLUSPLUS", "MINUSMINUS", "LSHIFT", 
  "RSHIFT", "URSHIFT", "PLUSEQUAL", "MINUSEQUAL", "MULTEQUAL", "DIVEQUAL", 
  "LSHIFTEQUAL", "RSHIFTEQUAL", "URSHIFTEQUAL", "ANDEQUAL", "MODEQUAL", 
  "XOREQUAL", "OREQUAL", "IDENT", "AUTOPLUSPLUS", "AUTOMINUSMINUS", "'/'", 
  "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "':'", "'.'", "'+'", 
  "'-'", "'~'", "'!'", "'*'", "'%'", "'<'", "'>'", "'&'", "'^'", "'|'", 
  "'?'", "'='", "';'", "Literal", "PrimaryExpr", "ArrayLiteral", 
  "ElementList", "ElisionOpt", "Elision", "PropertyNameAndValueList", 
  "PropertyName", "MemberExpr", "NewExpr", "CallExpr", "Arguments", 
  "ArgumentList", "LeftHandSideExpr", "PostfixExpr", "UnaryExpr", 
  "MultiplicativeExpr", "AdditiveExpr", "ShiftExpr", "RelationalExpr", 
  "EqualityExpr", "BitwiseANDExpr", "BitwiseXORExpr", "BitwiseORExpr", 
  "LogicalANDExpr", "LogicalORExpr", "ConditionalExpr", "AssignmentExpr", 
  "AssignmentOperator", "Expr", "Statement", "Block", "StatementList", 
  "VariableStatement", "VariableDeclarationList", "VariableDeclaration", 
  "Initializer", "EmptyStatement", "ExprStatement", "IfStatement", 
  "IterationStatement", "ExprOpt", "ContinueStatement", "BreakStatement", 
  "ReturnStatement", "WithStatement", "SwitchStatement", "CaseBlock", 
  "CaseClausesOpt", "CaseClauses", "CaseClause", "DefaultClause", 
  "LabelledStatement", "ThrowStatement", "TryStatement", "Catch", 
  "Finally", "FunctionDeclaration", "FunctionDeclarationInternal", 
  "FunctionExpr", "FormalParameterList", "FunctionBody", "Program", 
  "SourceElements", "SourceElement", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    85,    85,    85,    85,    85,    85,    85,    86,    86,
      86,    86,    86,    86,    86,    87,    87,    87,    88,    88,
      89,    89,    90,    90,    91,    91,    92,    92,    92,    93,
      93,    93,    93,    93,    94,    94,    95,    95,    95,    95,
      96,    96,    97,    97,    98,    98,    99,    99,    99,   100,
     100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
     100,   101,   101,   101,   101,   102,   102,   102,   103,   103,
     103,   103,   104,   104,   104,   104,   104,   104,   104,   105,
     105,   105,   105,   105,   106,   106,   107,   107,   108,   108,
     109,   109,   110,   110,   111,   111,   112,   112,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   113,   113,   113,
     114,   114,   115,   115,   115,   115,   115,   115,   115,   115,
     115,   115,   115,   115,   115,   115,   116,   116,   117,   117,
     118,   118,   119,   119,   120,   120,   121,   122,   123,   123,
     124,   124,   125,   125,   125,   125,   125,   125,   125,   126,
     126,   127,   127,   127,   127,   128,   128,   128,   128,   129,
     129,   129,   129,   130,   131,   132,   132,   133,   133,   134,
     134,   135,   135,   136,   136,   137,   138,   139,   139,   139,
     140,   141,   142,   142,   143,   143,   144,   144,   145,   145,
     146,   146,   147,   147,   148,   148,   149,   149
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     3,     3,     3,     5,     2,     4,
       0,     1,     1,     2,     3,     5,     1,     1,     1,     1,
       1,     4,     3,     3,     1,     2,     2,     2,     4,     3,
       2,     3,     1,     3,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     3,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     3,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     2,
       3,     3,     1,     3,     1,     2,     2,     1,     2,     2,
       5,     7,     6,     5,     9,    10,     7,     8,     9,     0,
       1,     2,     2,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     5,     3,     5,     0,     1,     1,
       2,     3,     4,     2,     3,     3,     3,     3,     3,     4,
       5,     2,     1,     2,     5,     6,     4,     5,     1,     3,
       2,     3,     0,     1,     1,     2,     1,     1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
     192,     1,     2,     3,     5,     4,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     8,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     7,     9,     0,     0,
       6,     0,     0,    20,     0,     0,     0,     0,   137,    10,
      29,    11,    34,    44,    45,    46,    49,    61,    65,    68,
      72,    79,    84,    86,    88,    90,    92,    94,    96,   110,
       0,   196,   112,   113,   114,   115,   116,   117,   118,   119,
     120,   121,   122,   123,   124,   125,   197,   182,    30,   193,
     194,   156,     0,   155,   149,     0,     9,     0,    34,    35,
     134,     0,   132,   152,     0,   151,     0,     0,   160,     0,
     159,     0,    46,    51,   183,    50,     0,     0,     0,    52,
       0,     0,     0,     0,     0,    53,    55,     0,    54,    56,
       0,     5,     4,     9,    13,     0,     0,     0,    22,     0,
       0,    21,    57,    58,    59,    60,     0,     0,     0,    36,
       0,     0,    37,    47,    48,    99,   100,   101,   102,   103,
     104,   105,   106,   109,   107,   108,    98,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   139,     0,   138,   195,   158,   157,     0,    46,
     150,     0,    27,    28,    26,    13,    33,     0,   135,   131,
       0,   130,   154,   153,     0,   188,     0,     0,   162,   161,
       0,     0,     0,     0,     0,   176,   126,     0,     0,   177,
     178,   175,    12,    14,     0,     0,   127,    16,    20,    15,
      18,    23,    40,     0,    42,     0,    32,     0,    39,    97,
      63,    62,    64,    66,    67,    69,    70,    71,    78,    77,
      75,    76,    73,    74,    80,    81,    82,    83,    85,    87,
      89,    91,    93,     0,   111,   134,     0,     0,   149,   136,
     133,     0,     0,     0,   186,     0,     0,     0,     0,     0,
       0,     0,     0,   181,   179,     0,    24,     0,    41,     0,
      31,    38,     0,     0,   135,   149,     0,     0,   184,     0,
     190,     0,   187,   189,   140,     0,   143,   167,   164,   163,
       0,     0,    17,    19,    43,    95,     0,     0,     0,     0,
     149,   185,   191,     0,   142,     0,     0,   168,   169,     0,
      25,     0,     0,   149,   146,     0,   141,     0,     0,   165,
     167,   170,   180,   147,     0,     0,     0,   171,   173,     0,
     148,     0,   144,   128,   172,   174,   166,   145,   129,     0,
       0,     0
};

static const short yydefgoto[] =
{
      39,    40,    41,   129,   130,   131,   125,   126,    42,    43,
      44,   139,   233,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    54,    55,    56,    57,    58,    59,   157,    60,
      61,    62,   354,    63,    91,    92,   198,    64,    65,    66,
      67,   191,    68,    69,    70,    71,    72,   308,   326,   327,
     328,   340,    73,    74,    75,   219,   220,    76,    77,    78,
     207,   274,   359,   127,    80
};

static const short yypact[] =
{
     706,-32768,-32768,-32768,-32768,-32768,     9,   -27,   227,    -4,
      29,   120,   115,  1179,  1251,   -19,-32768,   780,     4,  1251,
      10,    26,  1251,    39,  1251,  1251,-32768,    17,  1251,  1251,
  -32768,  1251,   336,    47,  1251,  1251,  1251,  1251,-32768,-32768,
  -32768,-32768,   -21,-32768,    -5,   943,-32768,-32768,    50,   112,
     102,    85,   201,    57,    14,    72,    64,   -26,-32768,-32768,
      22,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   706,
  -32768,-32768,    11,-32768,   891,   133,-32768,    31,   -21,-32768,
     108,    24,-32768,-32768,    23,-32768,   136,   -16,-32768,  1251,
  -32768,    30,   127,-32768,-32768,-32768,  1251,   207,  1251,-32768,
    1251,  1251,   -36,   410,   161,-32768,-32768,   780,-32768,-32768,
      15,   185,   188,    17,   862,   -15,   192,   484,-32768,   160,
     963,   195,-32768,-32768,-32768,-32768,  1035,  1251,   208,-32768,
    1251,   209,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  1251,  1251,  1251,
    1251,  1251,  1251,  1251,  1251,  1251,  1251,  1251,  1251,  1251,
    1251,  1251,  1251,  1251,  1251,  1251,  1251,  1251,  1251,  1251,
    1251,  1251,-32768,  1251,-32768,-32768,-32768,-32768,   210,  1284,
     197,   190,-32768,-32768,-32768,-32768,-32768,  1251,-32768,-32768,
      -4,-32768,-32768,-32768,    54,-32768,   212,    71,-32768,-32768,
      74,   216,    75,    77,    86,-32768,-32768,   217,    39,   247,
  -32768,-32768,-32768,-32768,    27,  1251,-32768,-32768,    47,-32768,
  -32768,-32768,-32768,    92,-32768,   173,-32768,   176,-32768,-32768,
  -32768,-32768,-32768,    50,    50,   112,   112,   112,   102,   102,
     102,   102,   102,   102,    85,    85,    85,    85,   201,    57,
      14,    72,    64,   213,-32768,    -6,   -29,  1251,  1251,-32768,
  -32768,   212,    93,   558,-32768,   212,   223,   780,  1251,   780,
     219,   780,   229,-32768,-32768,   221,-32768,  1107,-32768,  1251,
  -32768,-32768,  1251,  1251,   268,  1251,    96,   211,-32768,   212,
  -32768,   632,-32768,-32768,   271,   104,-32768,   287,-32768,-32768,
     234,  1251,-32768,-32768,-32768,-32768,   117,  1251,   214,   780,
    1251,-32768,-32768,   780,-32768,  1251,    -2,   287,-32768,    39,
  -32768,   780,   129,  1251,-32768,   236,-32768,   177,   231,-32768,
     287,-32768,-32768,-32768,   780,   238,   780,   780,   780,   239,
  -32768,   780,-32768,-32768,   780,   780,-32768,-32768,-32768,   303,
     305,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,    81,-32768,-32768,    88,   302,   307,
  -32768,   -37,-32768,    45,-32768,    -8,    94,    37,    82,    98,
     137,   140,   141,   139,   142,-32768,-32768,  -121,-32768,    -9,
     -17,   -22,   -28,-32768,   135,   121,    60,-32768,-32768,-32768,
  -32768,  -249,-32768,-32768,-32768,-32768,-32768,-32768,   -14,-32768,
       1,-32768,-32768,-32768,-32768,-32768,   113,-32768,   320,-32768,
     131,  -231,-32768,     2,   -75
};


#define	YYLAST		1367


static const short yytable[] =
{
     107,   114,    79,   101,   185,   103,   105,   142,   338,   230,
      81,   109,   186,   112,   180,   234,   115,   116,   293,   297,
     118,   119,   120,   182,   202,   199,   132,   133,   134,   135,
      93,   208,   183,   192,   193,    84,   239,   192,   193,   200,
     298,   136,   205,   106,   302,   137,   318,   206,   215,   138,
     223,   196,   185,   224,    90,   295,   181,   136,   102,   102,
     263,   140,   264,   339,   102,   141,   108,    82,   321,   102,
     102,   335,   110,   102,   102,   190,   269,   197,   222,   102,
     102,   102,   102,   183,   345,   194,   117,    94,   111,   194,
     183,   103,   200,    83,   177,   187,   195,   210,   183,   212,
     221,   213,   214,   113,   286,   179,   184,   203,   201,   166,
     167,   158,   205,    95,   209,   128,    98,   271,     1,     2,
       3,     4,     5,   168,   169,   159,   160,     8,   235,   189,
      85,   237,    99,    14,   275,    16,   176,   277,   279,   276,
     280,    19,   183,   183,   102,   183,   163,   164,   165,   281,
     240,   241,   242,   178,   183,   288,   299,    24,    25,   319,
     289,   276,   170,   171,   183,    26,   313,   324,   314,   143,
     144,   315,   183,    86,    28,    29,    30,    31,    96,    87,
     331,    33,    97,   161,   162,   183,    34,    35,    36,    37,
     330,   197,   344,   217,   218,    97,   283,   183,   204,   100,
     245,   246,   247,   102,   102,   102,   102,   102,   102,   102,
     102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
     102,   102,   102,   102,   102,   102,   185,   227,   228,   211,
       1,     2,     3,     4,     5,   172,   173,   174,   175,     8,
     290,   183,    85,   291,   183,   183,   347,    16,   248,   249,
     250,   251,   252,   253,   -27,   243,   244,   -28,   296,   190,
     304,   225,   306,   231,   309,   183,   236,   238,   265,   305,
     254,   255,   256,   257,   268,   301,   273,    26,   278,   282,
     218,   303,   292,   307,   316,    86,   190,   310,    30,    31,
     311,    87,   317,    33,   323,   320,   325,   329,   333,   346,
     348,   351,   334,   360,   356,   361,   336,   342,   332,   287,
      88,   190,   285,   258,   343,    89,   337,   259,   261,   260,
     355,   270,   262,   266,   190,   294,   349,   350,   341,   352,
     353,   353,   284,   104,   357,   272,     0,   358,   358,     1,
       2,     3,   121,   122,     6,     0,     0,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,     0,
       0,     0,    19,    20,    21,     0,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
       0,     0,     0,     0,     0,     0,    26,     0,     0,     0,
       0,     0,     0,     0,   123,    28,    29,    30,    31,     0,
      32,   124,    33,     0,     0,     0,     0,    34,    35,    36,
      37,     0,     0,     1,     2,     3,     4,     5,     6,     0,
      38,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,     0,     0,     0,    19,    20,    21,     0,
      22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,     0,     0,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,    27,    28,
      29,    30,    31,     0,    32,   216,    33,     0,     0,     0,
       0,    34,    35,    36,    37,     0,     0,     1,     2,     3,
       4,     5,     6,     0,    38,     7,     8,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,     0,     0,     0,
      19,    20,    21,     0,    22,    23,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    24,    25,     0,     0,
       0,     0,     0,     0,    26,     0,     0,     0,     0,     0,
       0,     0,    27,    28,    29,    30,    31,     0,    32,   226,
      33,     0,     0,     0,     0,    34,    35,    36,    37,     0,
       0,     1,     2,     3,     4,     5,     6,     0,    38,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,     0,     0,     0,    19,    20,    21,     0,    22,    23,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      24,    25,     0,     0,     0,     0,     0,     0,    26,     0,
       0,     0,     0,     0,     0,     0,    27,    28,    29,    30,
      31,     0,    32,   300,    33,     0,     0,     0,     0,    34,
      35,    36,    37,     0,     0,     1,     2,     3,     4,     5,
       6,     0,    38,     7,     8,     9,    10,    11,    12,    13,
      14,    15,    16,    17,    18,     0,     0,     0,    19,    20,
      21,     0,    22,    23,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    24,    25,     0,     0,     0,     0,
       0,     0,    26,     0,     0,     0,     0,     0,     0,     0,
      27,    28,    29,    30,    31,     0,    32,   322,    33,     0,
       0,     0,     0,    34,    35,    36,    37,     0,     0,     1,
       2,     3,     4,     5,     6,     0,    38,     7,     8,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,     0,
       0,     0,    19,    20,    21,     0,    22,    23,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    24,    25,
       0,     0,     0,     0,     0,     0,    26,     0,     0,     0,
       0,     0,     0,     0,    27,    28,    29,    30,    31,     0,
      32,     0,    33,     0,     0,     0,     0,    34,    35,    36,
      37,     0,     0,     1,     2,     3,     4,     5,     6,     0,
      38,     7,     8,     9,    10,    85,    12,    99,    14,    15,
      16,    17,    18,     0,     0,     0,    19,    20,    21,     0,
      22,    23,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    24,    25,     0,     0,     0,     0,     0,     0,
      26,     0,     0,     0,     0,     0,     0,     0,    27,    28,
      29,    30,    31,     0,    32,     0,    33,     0,     0,     0,
       0,    34,    35,    36,    37,     0,     0,     0,     0,     0,
       0,     0,  -126,     0,    38,  -126,  -126,  -126,  -126,  -126,
    -126,  -126,  -126,  -126,  -126,  -126,  -126,  -126,  -126,  -126,
    -126,  -126,  -126,  -126,  -126,  -126,     0,     0,  -126,  -126,
    -126,     0,  -126,  -126,     1,     2,     3,     4,     5,     0,
       0,     0,     0,     8,   188,     0,    85,     0,    99,    14,
       0,    16,     0,     0,     0,     0,     0,    19,     0,     0,
    -126,  -126,  -126,     0,     0,     0,  -126,  -126,     0,     0,
       0,     0,     0,    24,    25,  -126,  -126,     0,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,     0,    86,
      28,    29,    30,    31,     0,    87,     0,    33,     0,     0,
       0,     0,    34,    35,    36,    37,     1,     2,     3,     4,
       5,     0,     0,     0,     0,     8,     0,     0,    85,     0,
      99,    14,     0,    16,     0,   143,   144,     0,     0,    19,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,     0,     0,     0,     0,    24,    25,     0,     0,     0,
       0,     0,     0,    26,     0,     0,     0,     0,     0,     0,
       0,    86,    28,    29,    30,    31,   156,    87,     0,    33,
     229,     0,     0,     0,    34,    35,    36,    37,     1,     2,
       3,     4,     5,     0,     0,     0,     0,     8,     0,     0,
      85,     0,    99,    14,     0,    16,     0,     0,     0,     0,
       0,    19,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    24,    25,     0,
       0,     0,     0,     0,     0,    26,     0,     0,     0,     0,
       0,     0,     0,    86,    28,    29,    30,    31,   232,    87,
       0,    33,     0,     0,     0,     0,    34,    35,    36,    37,
       1,     2,     3,     4,     5,     0,     0,     0,     0,     8,
       0,     0,    85,     0,    99,    14,     0,    16,     0,     0,
       0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
      25,     0,     0,     0,     0,     0,     0,    26,     0,     0,
       0,     0,     0,     0,     0,    86,    28,    29,    30,    31,
       0,    87,     0,    33,   312,     0,     0,     0,    34,    35,
      36,    37,     1,     2,     3,     4,     5,     0,     0,     0,
       0,     8,     0,     0,    11,     0,    99,    14,     0,    16,
       0,     0,     0,     0,     0,    19,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    24,    25,     0,     0,     0,     0,     0,     0,    26,
       0,     0,     0,     0,     0,     0,     0,    86,    28,    29,
      30,    31,     0,    87,     0,    33,     0,     0,     0,     0,
      34,    35,    36,    37,     1,     2,     3,     4,     5,     0,
       0,     0,     0,     8,     0,     0,    85,     0,    99,    14,
       0,    16,     0,     0,     0,     0,     0,    19,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    24,    25,     0,     0,     0,     0,     0,
       0,    26,     0,     0,     0,     0,     0,     0,   267,    86,
      28,    29,    30,    31,     0,    87,     0,    33,     0,     0,
       0,     0,    34,    35,    36,    37,   143,   144,     0,     0,
       0,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   156
};

static const short yycheck[] =
{
      17,    23,     0,    12,    79,    13,    14,    44,    10,   130,
       1,    19,     1,    22,    40,   136,    24,    25,    24,   268,
      28,    29,    31,     1,     1,     1,    34,    35,    36,    37,
       1,     1,    68,     6,     7,    62,   157,     6,     7,    68,
     271,    62,    58,    62,   275,    66,   295,    63,    84,    70,
      65,    88,   127,    68,    58,    84,    82,    62,    13,    14,
     181,    66,   183,    65,    19,    70,    62,    58,   299,    24,
      25,   320,    62,    28,    29,    84,   197,    83,    63,    34,
      35,    36,    37,    68,   333,    58,    69,    58,    62,    58,
      68,    99,    68,    84,    80,    84,    65,   106,    68,   108,
     117,   110,   111,    64,   225,    41,    84,    84,    84,    24,
      25,    61,    58,    84,    84,    68,     1,    63,     3,     4,
       5,     6,     7,    38,    39,    75,    76,    12,   137,    84,
      15,   140,    17,    18,    63,    20,    79,    63,    63,    68,
      63,    26,    68,    68,    99,    68,    44,    45,    46,    63,
     158,   159,   160,    81,    68,    63,    63,    42,    43,    63,
      68,    68,    77,    78,    68,    50,   287,    63,   289,    42,
      43,   292,    68,    58,    59,    60,    61,    62,    58,    64,
      63,    66,    62,    71,    72,    68,    71,    72,    73,    74,
     311,    83,    63,    32,    33,    62,   218,    68,    62,    84,
     163,   164,   165,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   301,    67,    68,    22,
       3,     4,     5,     6,     7,    34,    35,    36,    37,    12,
      67,    68,    15,    67,    68,    68,    69,    20,   166,   167,
     168,   169,   170,   171,    69,   161,   162,    69,   267,   268,
     277,    69,   279,    68,   281,    68,    58,    58,    58,   278,
     172,   173,   174,   175,    84,   273,    64,    50,    62,    62,
      33,    58,    69,    64,   293,    58,   295,    58,    61,    62,
      69,    64,    24,    66,    23,    84,     9,    63,    84,    63,
      69,    63,   319,     0,    65,     0,   323,   329,   317,   228,
       8,   320,   224,   176,   331,     8,   325,   177,   179,   178,
     348,   200,   180,   188,   333,   265,   340,   344,   327,   346,
     347,   348,   219,    13,   351,   204,    -1,   354,   355,     3,
       4,     5,     6,     7,     8,    -1,    -1,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    -1,
      64,    65,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      84,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    -1,    -1,    -1,    26,    27,    28,    -1,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    61,    62,    -1,    64,    65,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    -1,    -1,     3,     4,     5,
       6,     7,     8,    -1,    84,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    -1,    -1,    -1,
      26,    27,    28,    -1,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,
      -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    58,    59,    60,    61,    62,    -1,    64,    65,
      66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,    -1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    84,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
      62,    -1,    64,    65,    66,    -1,    -1,    -1,    -1,    71,
      72,    73,    74,    -1,    -1,     3,     4,     5,     6,     7,
       8,    -1,    84,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    -1,    -1,    -1,    26,    27,
      28,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
      -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      58,    59,    60,    61,    62,    -1,    64,    65,    66,    -1,
      -1,    -1,    -1,    71,    72,    73,    74,    -1,    -1,     3,
       4,     5,     6,     7,     8,    -1,    84,    11,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,
      -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,    -1,
      64,    -1,    66,    -1,    -1,    -1,    -1,    71,    72,    73,
      74,    -1,    -1,     3,     4,     5,     6,     7,     8,    -1,
      84,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    -1,    -1,    -1,    26,    27,    28,    -1,
      30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,
      50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
      60,    61,    62,    -1,    64,    -1,    66,    -1,    -1,    -1,
      -1,    71,    72,    73,    74,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,     0,    -1,    84,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    23,    -1,    -1,    26,    27,
      28,    -1,    30,    31,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    12,    13,    -1,    15,    -1,    17,    18,
      -1,    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,
      58,    59,    60,    -1,    -1,    -1,    64,    65,    -1,    -1,
      -1,    -1,    -1,    42,    43,    73,    74,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
      59,    60,    61,    62,    -1,    64,    -1,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,     3,     4,     5,     6,
       7,    -1,    -1,    -1,    -1,    12,    -1,    -1,    15,    -1,
      17,    18,    -1,    20,    -1,    42,    43,    -1,    -1,    26,
      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,
      -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    58,    59,    60,    61,    62,    83,    64,    -1,    66,
      67,    -1,    -1,    -1,    71,    72,    73,    74,     3,     4,
       5,     6,     7,    -1,    -1,    -1,    -1,    12,    -1,    -1,
      15,    -1,    17,    18,    -1,    20,    -1,    -1,    -1,    -1,
      -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
      -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    58,    59,    60,    61,    62,    63,    64,
      -1,    66,    -1,    -1,    -1,    -1,    71,    72,    73,    74,
       3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,
      -1,    -1,    15,    -1,    17,    18,    -1,    20,    -1,    -1,
      -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,
      43,    -1,    -1,    -1,    -1,    -1,    -1,    50,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,    62,
      -1,    64,    -1,    66,    67,    -1,    -1,    -1,    71,    72,
      73,    74,     3,     4,     5,     6,     7,    -1,    -1,    -1,
      -1,    12,    -1,    -1,    15,    -1,    17,    18,    -1,    20,
      -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    50,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
      61,    62,    -1,    64,    -1,    66,    -1,    -1,    -1,    -1,
      71,    72,    73,    74,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    12,    -1,    -1,    15,    -1,    17,    18,
      -1,    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,
      -1,    50,    -1,    -1,    -1,    -1,    -1,    -1,    24,    58,
      59,    60,    61,    62,    -1,    64,    -1,    66,    -1,    -1,
      -1,    -1,    71,    72,    73,    74,    42,    43,    -1,    -1,
      -1,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    83
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 162 "grammar.y"
{ yyval.node = new NullNode(); ;
    break;}
case 2:
#line 163 "grammar.y"
{ yyval.node = new BooleanNode(true); ;
    break;}
case 3:
#line 164 "grammar.y"
{ yyval.node = new BooleanNode(false); ;
    break;}
case 4:
#line 165 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].dval); ;
    break;}
case 5:
#line 166 "grammar.y"
{ yyval.node = new StringNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 6:
#line 167 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(l->pattern,l->flags);;
    break;}
case 7:
#line 171 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(UString('=')+l->pattern,l->flags);;
    break;}
case 8:
#line 177 "grammar.y"
{ yyval.node = new ThisNode(); ;
    break;}
case 9:
#line 178 "grammar.y"
{ yyval.node = new ResolveNode(*yyvsp[0].ident);
                                     delete yyvsp[0].ident; ;
    break;}
case 12:
#line 182 "grammar.y"
{ yyval.node = new GroupNode(yyvsp[-1].node); ;
    break;}
case 13:
#line 183 "grammar.y"
{ yyval.node = new ObjectLiteralNode(); ;
    break;}
case 14:
#line 184 "grammar.y"
{ yyval.node = new ObjectLiteralNode(yyvsp[-1].plist); ;
    break;}
case 15:
#line 188 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].ival); ;
    break;}
case 16:
#line 189 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].elm); ;
    break;}
case 17:
#line 190 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].ival, yyvsp[-3].elm); ;
    break;}
case 18:
#line 194 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-1].ival, yyvsp[0].node); ;
    break;}
case 19:
#line 196 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-3].elm, yyvsp[-1].ival, yyvsp[0].node); ;
    break;}
case 20:
#line 200 "grammar.y"
{ yyval.ival = 0; ;
    break;}
case 22:
#line 205 "grammar.y"
{ yyval.ival = 1; ;
    break;}
case 23:
#line 206 "grammar.y"
{ yyval.ival = yyvsp[-1].ival + 1; ;
    break;}
case 24:
#line 210 "grammar.y"
{ yyval.plist = new PropertyValueNode(yyvsp[-2].pnode, yyvsp[0].node); ;
    break;}
case 25:
#line 212 "grammar.y"
{ yyval.plist = new PropertyValueNode(yyvsp[-2].pnode, yyvsp[0].node, yyvsp[-4].plist); ;
    break;}
case 26:
#line 216 "grammar.y"
{ yyval.pnode = new PropertyNode(*yyvsp[0].ident); delete yyvsp[0].ident; ;
    break;}
case 27:
#line 217 "grammar.y"
{ yyval.pnode = new PropertyNode(Identifier(*yyvsp[0].ustr)); delete yyvsp[0].ustr; ;
    break;}
case 28:
#line 218 "grammar.y"
{ yyval.pnode = new PropertyNode(yyvsp[0].dval); ;
    break;}
case 31:
#line 224 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 32:
#line 225 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, *yyvsp[0].ident); delete yyvsp[0].ident; ;
    break;}
case 33:
#line 226 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 35:
#line 231 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[0].node); ;
    break;}
case 36:
#line 235 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 37:
#line 236 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 38:
#line 237 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 39:
#line 238 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, *yyvsp[0].ident);
                                     delete yyvsp[0].ident; ;
    break;}
case 40:
#line 243 "grammar.y"
{ yyval.args = new ArgumentsNode(); ;
    break;}
case 41:
#line 244 "grammar.y"
{ yyval.args = new ArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 42:
#line 248 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[0].node); ;
    break;}
case 43:
#line 249 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 47:
#line 259 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 48:
#line 260 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 50:
#line 265 "grammar.y"
{ yyval.node = new DeleteNode(yyvsp[0].node); ;
    break;}
case 51:
#line 266 "grammar.y"
{ yyval.node = new VoidNode(yyvsp[0].node); ;
    break;}
case 52:
#line 267 "grammar.y"
{ yyval.node = new TypeOfNode(yyvsp[0].node); ;
    break;}
case 53:
#line 268 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 54:
#line 269 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 55:
#line 270 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 56:
#line 271 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 57:
#line 272 "grammar.y"
{ yyval.node = new UnaryPlusNode(yyvsp[0].node); ;
    break;}
case 58:
#line 273 "grammar.y"
{ yyval.node = new NegateNode(yyvsp[0].node); ;
    break;}
case 59:
#line 274 "grammar.y"
{ yyval.node = new BitwiseNotNode(yyvsp[0].node); ;
    break;}
case 60:
#line 275 "grammar.y"
{ yyval.node = new LogicalNotNode(yyvsp[0].node); ;
    break;}
case 62:
#line 280 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 63:
#line 281 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 64:
#line 282 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 66:
#line 287 "grammar.y"
{ yyval.node = AddNode::create(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 67:
#line 288 "grammar.y"
{ yyval.node = AddNode::create(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 69:
#line 293 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 70:
#line 294 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 71:
#line 295 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 73:
#line 301 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 74:
#line 303 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 75:
#line 305 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 76:
#line 307 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 77:
#line 309 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 78:
#line 311 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpIn, yyvsp[0].node); ;
    break;}
case 80:
#line 316 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 81:
#line 317 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 82:
#line 318 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 83:
#line 319 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 85:
#line 324 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 87:
#line 329 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 89:
#line 334 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 91:
#line 340 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 93:
#line 346 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 95:
#line 352 "grammar.y"
{ yyval.node = new ConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 97:
#line 358 "grammar.y"
{ yyval.node = new AssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 98:
#line 362 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 99:
#line 363 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 100:
#line 364 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 101:
#line 365 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 102:
#line 366 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 103:
#line 367 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 104:
#line 368 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 105:
#line 369 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 106:
#line 370 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 107:
#line 371 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 108:
#line 372 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 109:
#line 373 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 111:
#line 378 "grammar.y"
{ yyval.node = new CommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 126:
#line 399 "grammar.y"
{ yyval.stat = new BlockNode(0L); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 127:
#line 400 "grammar.y"
{ yyval.stat = new BlockNode(yyvsp[-1].srcs); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 128:
#line 404 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[0].stat); ;
    break;}
case 129:
#line 405 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 130:
#line 409 "grammar.y"
{ yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
                                      DBG(yyval.stat, yylsp[-2], yylsp[0]); ;
    break;}
case 131:
#line 411 "grammar.y"
{ if (automatic()) {
                                          yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
					  DBG(yyval.stat, yylsp[-2], yylsp[-1]);
                                        } else {
					  YYABORT;
					}
                                      ;
    break;}
case 132:
#line 421 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[0].decl); ;
    break;}
case 133:
#line 423 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[-2].vlist, yyvsp[0].decl); ;
    break;}
case 134:
#line 427 "grammar.y"
{ yyval.decl = new VarDeclNode(*yyvsp[0].ident, 0); delete yyvsp[0].ident; ;
    break;}
case 135:
#line 428 "grammar.y"
{ yyval.decl = new VarDeclNode(*yyvsp[-1].ident, yyvsp[0].init); delete yyvsp[-1].ident; ;
    break;}
case 136:
#line 432 "grammar.y"
{ yyval.init = new AssignExprNode(yyvsp[0].node); ;
    break;}
case 137:
#line 436 "grammar.y"
{ yyval.stat = new EmptyStatementNode(); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 138:
#line 440 "grammar.y"
{ yyval.stat = new ExprStatementNode(yyvsp[-1].node);
                                     DBG(yyval.stat, yylsp[-1], yylsp[0]); ;
    break;}
case 139:
#line 442 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ExprStatementNode(yyvsp[-1].node);
				       DBG(yyval.stat, yylsp[-1], yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 140:
#line 450 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-2].node,yyvsp[0].stat,0L);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 141:
#line 452 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-4].node,yyvsp[-2].stat,yyvsp[0].stat);DBG(yyval.stat,yylsp[-6],yylsp[-3]); ;
    break;}
case 142:
#line 456 "grammar.y"
{ yyval.stat=new DoWhileNode(yyvsp[-4].stat,yyvsp[-1].node);DBG(yyval.stat,yylsp[-5],yylsp[-3]);;
    break;}
case 143:
#line 457 "grammar.y"
{ yyval.stat = new WhileNode(yyvsp[-2].node,yyvsp[0].stat);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 144:
#line 459 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]); ;
    break;}
case 145:
#line 462 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].vlist,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-9],yylsp[-1]); ;
    break;}
case 146:
#line 465 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-6],yylsp[-1]); ;
    break;}
case 147:
#line 468 "grammar.y"
{ yyval.stat = new ForInNode(*yyvsp[-4].ident,0L,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-7],yylsp[-1]);
                                     delete yyvsp[-4].ident; ;
    break;}
case 148:
#line 472 "grammar.y"
{ yyval.stat = new ForInNode(*yyvsp[-5].ident,yyvsp[-4].init,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]);
                                     delete yyvsp[-5].ident; ;
    break;}
case 149:
#line 478 "grammar.y"
{ yyval.node = 0L; ;
    break;}
case 151:
#line 483 "grammar.y"
{ yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 152:
#line 484 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]);
                                     } else
				       YYABORT; ;
    break;}
case 153:
#line 488 "grammar.y"
{ yyval.stat = new ContinueNode(*yyvsp[-1].ident); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ident; ;
    break;}
case 154:
#line 490 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(*yyvsp[-1].ident);DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ident;
                                     } else
				       YYABORT; ;
    break;}
case 155:
#line 498 "grammar.y"
{ yyval.stat = new BreakNode();DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 156:
#line 499 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 157:
#line 503 "grammar.y"
{ yyval.stat = new BreakNode(*yyvsp[-1].ident); DBG(yyval.stat,yylsp[-2],yylsp[0]);
                                     delete yyvsp[-1].ident; ;
    break;}
case 158:
#line 505 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(*yyvsp[-1].ident); DBG(yyval.stat,yylsp[-2],yylsp[-1]);
				       delete yyvsp[-1].ident;
                                     } else
				       YYABORT;
                                   ;
    break;}
case 159:
#line 514 "grammar.y"
{ yyval.stat = new ReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 160:
#line 515 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ReturnNode(0L); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 161:
#line 519 "grammar.y"
{ yyval.stat = new ReturnNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[0]); ;
    break;}
case 162:
#line 520 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ReturnNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[-2]);
                                     }
                                     else
				       YYABORT; ;
    break;}
case 163:
#line 528 "grammar.y"
{ yyval.stat = new WithNode(yyvsp[-2].node,yyvsp[0].stat);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 164:
#line 533 "grammar.y"
{ yyval.stat = new SwitchNode(yyvsp[-2].node, yyvsp[0].cblk);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 165:
#line 538 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-1].clist, 0L, 0L); ;
    break;}
case 166:
#line 540 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 167:
#line 544 "grammar.y"
{ yyval.clist = 0L; ;
    break;}
case 169:
#line 549 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[0].ccl); ;
    break;}
case 170:
#line 550 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[-1].clist, yyvsp[0].ccl); ;
    break;}
case 171:
#line 554 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-1].node, 0L); ;
    break;}
case 172:
#line 555 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 173:
#line 559 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, 0L); ;
    break;}
case 174:
#line 560 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, yyvsp[0].slist); ;
    break;}
case 175:
#line 564 "grammar.y"
{ yyvsp[0].stat->pushLabel(*yyvsp[-2].ident);
                                     yyval.stat = new LabelNode(*yyvsp[-2].ident, yyvsp[0].stat); DBG(yyval.stat,yylsp[-2],yylsp[-1]);
                                     delete yyvsp[-2].ident; ;
    break;}
case 176:
#line 570 "grammar.y"
{ yyval.stat = new ThrowNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[0]); ;
    break;}
case 177:
#line 574 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, yyvsp[0].node); DBG(yyval.stat,yylsp[-2],yylsp[-2]); ;
    break;}
case 178:
#line 575 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, 0L, yyvsp[0].node); DBG(yyval.stat,yylsp[-2],yylsp[-2]); ;
    break;}
case 179:
#line 576 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-2].stat, yyvsp[-1].node, yyvsp[0].node); DBG(yyval.stat,yylsp[-3],yylsp[-3]); ;
    break;}
case 180:
#line 580 "grammar.y"
{ CatchNode *c; yyval.node = c = new CatchNode(*yyvsp[-2].ident, yyvsp[0].stat);
				     delete yyvsp[-2].ident; DBG(c,yylsp[-4],yylsp[-1]); ;
    break;}
case 181:
#line 585 "grammar.y"
{ FinallyNode *f; yyval.node = f = new FinallyNode(yyvsp[0].stat); DBG(f,yylsp[-1],yylsp[-1]); ;
    break;}
case 183:
#line 591 "grammar.y"
{ yyval.func = yyvsp[0].func; ;
    break;}
case 184:
#line 595 "grammar.y"
{ yyval.func = new FuncDeclNode(*yyvsp[-3].ident, 0L, yyvsp[0].body); DBG(yyval.func,yylsp[-4],yylsp[-1]);
                                             delete yyvsp[-3].ident; ;
    break;}
case 185:
#line 598 "grammar.y"
{ yyval.func = new FuncDeclNode(*yyvsp[-4].ident, yyvsp[-2].param, yyvsp[0].body); DBG(yyval.func,yylsp[-5],yylsp[-1]);
                                     delete yyvsp[-4].ident; ;
    break;}
case 186:
#line 603 "grammar.y"
{ yyval.node = new FuncExprNode(0L, yyvsp[0].body); ;
    break;}
case 187:
#line 605 "grammar.y"
{ yyval.node = new FuncExprNode(yyvsp[-2].param, yyvsp[0].body); ;
    break;}
case 188:
#line 610 "grammar.y"
{ yyval.param = new ParameterNode(*yyvsp[0].ident); delete yyvsp[0].ident; ;
    break;}
case 189:
#line 611 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[-2].param, *yyvsp[0].ident); delete yyvsp[0].ident; ;
    break;}
case 190:
#line 615 "grammar.y"
{ yyval.body = new FunctionBodyNode(0L);
	                             DBG(yyval.body, yylsp[-1], yylsp[0]);;
    break;}
case 191:
#line 617 "grammar.y"
{ yyval.body = new FunctionBodyNode(yyvsp[-1].srcs);
	                             DBG(yyval.body, yylsp[-2], yylsp[0]);;
    break;}
case 192:
#line 622 "grammar.y"
{ yyval.prog = new FunctionBodyNode(0L);
                                     yyval.prog->setLoc(0, 0, Parser::source);
                                     Parser::progNode = yyval.prog; ;
    break;}
case 193:
#line 625 "grammar.y"
{ yyval.prog = new FunctionBodyNode(yyvsp[0].srcs);
                                     Parser::progNode = yyval.prog; ;
    break;}
case 194:
#line 630 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[0].stat); ;
    break;}
case 195:
#line 631 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[-1].srcs, yyvsp[0].stat); ;
    break;}
case 196:
#line 635 "grammar.y"
{ yyval.stat = yyvsp[0].stat; ;
    break;}
case 197:
#line 636 "grammar.y"
{ yyval.stat = yyvsp[0].func; ;
    break;}
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 639 "grammar.y"


int yyerror (const char *)  /* Called by yyparse on error */
{
//  fprintf(stderr, "ERROR: %s at line %d\n",
//	  s, KJScript::lexer()->lineNo());
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if (Lexer::curr()->hadError())
    return false;
  if (yychar == '}' || yychar == 0)
    return true;
  else if (Lexer::curr()->prevTerminator())
    return true;

  return false;
}
