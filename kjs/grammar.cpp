
/*  A Bison parser, made from grammar.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse kjsyyparse
#define yylex kjsyylex
#define yyerror kjsyyerror
#define yylval kjsyylval
#define yychar kjsyychar
#define yydebug kjsyydebug
#define yynerrs kjsyynerrs
#define	NULLTOKEN	257
#define	TRUETOKEN	258
#define	FALSETOKEN	259
#define	STRING	260
#define	NUMBER	261
#define	BREAK	262
#define	CASE	263
#define	DEFAULT	264
#define	FOR	265
#define	NEW	266
#define	VAR	267
#define	CONTINUE	268
#define	FUNCTION	269
#define	RETURN	270
#define	VOID	271
#define	DELETE	272
#define	IF	273
#define	THIS	274
#define	DO	275
#define	WHILE	276
#define	ELSE	277
#define	IN	278
#define	INSTANCEOF	279
#define	TYPEOF	280
#define	SWITCH	281
#define	WITH	282
#define	RESERVED	283
#define	THROW	284
#define	TRY	285
#define	CATCH	286
#define	FINALLY	287
#define	EQEQ	288
#define	NE	289
#define	STREQ	290
#define	STRNEQ	291
#define	LE	292
#define	GE	293
#define	OR	294
#define	AND	295
#define	PLUSPLUS	296
#define	MINUSMINUS	297
#define	LSHIFT	298
#define	RSHIFT	299
#define	URSHIFT	300
#define	PLUSEQUAL	301
#define	MINUSEQUAL	302
#define	MULTEQUAL	303
#define	DIVEQUAL	304
#define	LSHIFTEQUAL	305
#define	RSHIFTEQUAL	306
#define	URSHIFTEQUAL	307
#define	ANDEQUAL	308
#define	MODEQUAL	309
#define	XOREQUAL	310
#define	OREQUAL	311
#define	IDENT	312
#define	AUTO	313

#line 1 "grammar.y"


/*
 *  This file is part of the KDE libraries
 *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <config.h>
#include "kjs.h"
#include "nodes.h"
#include "lexer.h"

/* default values for bison */
#define YYDEBUG 0
#define YYMAXDEPTH 0

extern int yylex();
int yyerror (const char *);
bool automatic();

using namespace KJS;


#line 39 "grammar.y"
typedef union {
  int                 ival;
  double              dval;
  UString             *ustr;
  Node                *node;
  StatementNode       *stat;
  ParameterNode       *param;
  FuncDeclNode        *func;
  ProgramNode         *prog;
  AssignExprNode      *init;
  SourceElementNode   *src;
  SourceElementsNode  *srcs;
  StatListNode        *slist;
  ArgumentsNode       *args;
  ArgumentListNode    *alist;
  VarDeclNode         *decl;
  VarDeclListNode     *vlist;
  CaseBlockNode       *cblk;
  ClauseListNode      *clist;
  CaseClauseNode      *ccl;
  ElementNode         *elm;
  ElisionNode         *eli;
  Operator            op;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		347
#define	YYFLAG		-32768
#define	YYNTBASE	84

#define YYTRANSLATE(x) ((unsigned)(x) <= 313 ? yytranslate[x] : 146)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    73,     2,     2,     2,    75,    78,     2,    61,
    62,    74,    70,    67,    71,    69,    60,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    68,    83,    76,
    82,    77,    81,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    65,     2,    66,    79,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    63,    80,    64,    72,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    24,    27,    31,    35,    39,    45,    48,    53,    54,
    56,    58,    61,    65,    71,    73,    75,    77,    79,    84,
    88,    92,    94,    97,   100,   103,   108,   112,   115,   119,
   121,   125,   127,   129,   131,   134,   137,   139,   142,   145,
   148,   151,   155,   158,   162,   165,   168,   171,   174,   176,
   180,   184,   188,   190,   194,   198,   200,   204,   208,   212,
   214,   218,   222,   226,   230,   234,   238,   240,   244,   248,
   252,   256,   258,   262,   264,   268,   270,   274,   276,   280,
   282,   286,   288,   294,   296,   300,   302,   304,   306,   308,
   310,   312,   314,   316,   318,   320,   322,   324,   326,   330,
   332,   334,   336,   338,   340,   342,   344,   346,   348,   350,
   352,   354,   356,   358,   361,   365,   367,   370,   374,   378,
   380,   384,   386,   389,   392,   394,   397,   400,   406,   414,
   421,   427,   437,   448,   456,   465,   475,   476,   478,   481,
   484,   488,   492,   495,   498,   502,   506,   509,   512,   516,
   520,   526,   532,   536,   542,   543,   545,   547,   550,   554,
   559,   562,   566,   570,   573,   577,   581,   585,   590,   596,
   599,   605,   612,   614,   618,   620,   622,   625,   627
};

static const short yyrhs[] = {     3,
     0,     4,     0,     5,     0,     7,     0,     6,     0,    60,
     0,    20,     0,    58,     0,    84,     0,    86,     0,    61,
   113,    62,     0,    63,    64,     0,    63,    90,    64,     0,
    65,    88,    66,     0,    65,    87,    66,     0,    65,    87,
    67,    88,    66,     0,    88,   111,     0,    87,    67,    88,
   111,     0,     0,    89,     0,    67,     0,    89,    67,     0,
    91,    68,   111,     0,    90,    67,    91,    68,   111,     0,
    58,     0,     6,     0,     7,     0,    85,     0,    92,    65,
   113,    66,     0,    92,    69,    58,     0,    12,    92,    95,
     0,    92,     0,    12,    93,     0,    92,    95,     0,    94,
    95,     0,    94,    65,   113,    66,     0,    94,    69,    58,
     0,    61,    62,     0,    61,    96,    62,     0,   111,     0,
    96,    67,   111,     0,    93,     0,    94,     0,    97,     0,
    97,    42,     0,    97,    43,     0,    98,     0,    18,    99,
     0,    17,    99,     0,    26,    99,     0,    42,    99,     0,
    59,    42,    99,     0,    43,    99,     0,    59,    43,    99,
     0,    70,    99,     0,    71,    99,     0,    72,    99,     0,
    73,    99,     0,    99,     0,   100,    74,    99,     0,   100,
    60,    99,     0,   100,    75,    99,     0,   100,     0,   101,
    70,   100,     0,   101,    71,   100,     0,   101,     0,   102,
    44,   101,     0,   102,    45,   101,     0,   102,    46,   101,
     0,   102,     0,   103,    76,   102,     0,   103,    77,   102,
     0,   103,    38,   102,     0,   103,    39,   102,     0,   103,
    25,   102,     0,   103,    24,   102,     0,   103,     0,   104,
    34,   103,     0,   104,    35,   103,     0,   104,    36,   103,
     0,   104,    37,   103,     0,   104,     0,   105,    78,   104,
     0,   105,     0,   106,    79,   104,     0,   106,     0,   107,
    80,   104,     0,   107,     0,   108,    41,   107,     0,   108,
     0,   109,    40,   105,     0,   109,     0,   109,    81,   111,
    68,   111,     0,   110,     0,    97,   112,   111,     0,    82,
     0,    47,     0,    48,     0,    49,     0,    50,     0,    51,
     0,    52,     0,    53,     0,    54,     0,    56,     0,    57,
     0,    55,     0,   111,     0,   113,    67,   111,     0,   115,
     0,   117,     0,   121,     0,   122,     0,   123,     0,   124,
     0,   126,     0,   127,     0,   128,     0,   129,     0,   130,
     0,   136,     0,   137,     0,   138,     0,    63,    64,     0,
    63,   116,    64,     0,   114,     0,   116,   114,     0,    13,
   118,    83,     0,    13,   118,     1,     0,   119,     0,   118,
    67,   119,     0,    58,     0,    58,   120,     0,    82,   111,
     0,    83,     0,   113,    83,     0,   113,     1,     0,    19,
    61,   113,    62,   114,     0,    19,    61,   113,    62,   114,
    23,   114,     0,    21,   114,    22,    61,   113,    62,     0,
    22,    61,   113,    62,   114,     0,    11,    61,   125,    83,
   125,    83,   125,    62,   114,     0,    11,    61,    13,   118,
    83,   125,    83,   125,    62,   114,     0,    11,    61,    97,
    24,   113,    62,   114,     0,    11,    61,    13,    58,    24,
   113,    62,   114,     0,    11,    61,    13,    58,   120,    24,
   113,    62,   114,     0,     0,   113,     0,    14,    83,     0,
    14,     1,     0,    14,    58,    83,     0,    14,    58,     1,
     0,     8,    83,     0,     8,     1,     0,     8,    58,    83,
     0,     8,    58,     1,     0,    16,    83,     0,    16,     1,
     0,    16,   113,    83,     0,    16,   113,     1,     0,    28,
    61,   113,    62,   114,     0,    27,    61,   113,    62,   131,
     0,    63,   132,    64,     0,    63,   132,   135,   132,    64,
     0,     0,   133,     0,   134,     0,   133,   134,     0,     9,
   113,    68,     0,     9,   113,    68,   116,     0,    10,    68,
     0,    10,    68,   116,     0,    58,    68,   114,     0,    30,
    83,     0,    30,   113,    83,     0,    31,   115,   139,     0,
    31,   115,   140,     0,    31,   115,   139,   140,     0,    32,
    61,    58,    62,   115,     0,    33,   115,     0,    15,    58,
    61,    62,   115,     0,    15,    58,    61,   142,    62,   115,
     0,    58,     0,   142,    67,    58,     0,   144,     0,   145,
     0,   144,   145,     0,   114,     0,   141,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   144,   146,   147,   148,   149,   150,   155,   157,   159,   160,
   161,   162,   163,   166,   168,   169,   172,   174,   178,   180,
   183,   185,   188,   190,   194,   197,   198,   201,   203,   204,
   206,   209,   211,   214,   216,   217,   218,   221,   223,   226,
   228,   231,   233,   236,   238,   239,   242,   244,   245,   246,
   247,   248,   249,   250,   251,   252,   253,   254,   257,   259,
   260,   261,   264,   266,   267,   270,   272,   273,   274,   277,
   279,   281,   283,   285,   287,   289,   293,   295,   296,   297,
   298,   301,   303,   306,   308,   311,   313,   316,   318,   322,
   324,   328,   330,   334,   336,   340,   342,   343,   344,   345,
   346,   347,   348,   349,   350,   351,   352,   355,   357,   360,
   362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
   372,   373,   374,   377,   379,   382,   384,   387,   389,   395,
   397,   401,   403,   406,   410,   414,   416,   422,   424,   428,
   430,   431,   433,   435,   437,   440,   445,   447,   450,   452,
   456,   457,   463,   465,   469,   470,   476,   478,   482,   483,
   489,   493,   497,   499,   503,   505,   508,   510,   513,   515,
   518,   520,   523,   529,   531,   534,   536,   537,   540,   544,
   548,   551,   556,   558,   562,   566,   568,   571,   573
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NULLTOKEN",
"TRUETOKEN","FALSETOKEN","STRING","NUMBER","BREAK","CASE","DEFAULT","FOR","NEW",
"VAR","CONTINUE","FUNCTION","RETURN","VOID","DELETE","IF","THIS","DO","WHILE",
"ELSE","IN","INSTANCEOF","TYPEOF","SWITCH","WITH","RESERVED","THROW","TRY","CATCH",
"FINALLY","EQEQ","NE","STREQ","STRNEQ","LE","GE","OR","AND","PLUSPLUS","MINUSMINUS",
"LSHIFT","RSHIFT","URSHIFT","PLUSEQUAL","MINUSEQUAL","MULTEQUAL","DIVEQUAL",
"LSHIFTEQUAL","RSHIFTEQUAL","URSHIFTEQUAL","ANDEQUAL","MODEQUAL","XOREQUAL",
"OREQUAL","IDENT","AUTO","'/'","'('","')'","'{'","'}'","'['","']'","','","':'",
"'.'","'+'","'-'","'~'","'!'","'*'","'%'","'<'","'>'","'&'","'^'","'|'","'?'",
"'='","';'","Literal","PrimaryExpr","ArrayLiteral","ElementList","ElisionOpt",
"Elision","PropertyNameAndValueList","PropertyName","MemberExpr","NewExpr","CallExpr",
"Arguments","ArgumentList","LeftHandSideExpr","PostfixExpr","UnaryExpr","MultiplicativeExpr",
"AdditiveExpr","ShiftExpr","RelationalExpr","EqualityExpr","BitwiseANDExpr",
"BitwiseXORExpr","BitwiseORExpr","LogicalANDExpr","LogicalORExpr","ConditionalExpr",
"AssignmentExpr","AssignmentOperator","Expr","Statement","Block","StatementList",
"VariableStatement","VariableDeclarationList","VariableDeclaration","Initializer",
"EmptyStatement","ExprStatement","IfStatement","IterationStatement","ExprOpt",
"ContinueStatement","BreakStatement","ReturnStatement","WithStatement","SwitchStatement",
"CaseBlock","CaseClausesOpt","CaseClauses","CaseClause","DefaultClause","LabelledStatement",
"ThrowStatement","TryStatement","Catch","Finally","FunctionDeclaration","FormalParameterList",
"Program","SourceElements","SourceElement", NULL
};
#endif

static const short yyr1[] = {     0,
    84,    84,    84,    84,    84,    84,    85,    85,    85,    85,
    85,    85,    85,    86,    86,    86,    87,    87,    88,    88,
    89,    89,    90,    90,    91,    91,    91,    92,    92,    92,
    92,    93,    93,    94,    94,    94,    94,    95,    95,    96,
    96,    97,    97,    98,    98,    98,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,    99,    99,   100,   100,
   100,   100,   101,   101,   101,   102,   102,   102,   102,   103,
   103,   103,   103,   103,   103,   103,   104,   104,   104,   104,
   104,   105,   105,   106,   106,   107,   107,   108,   108,   109,
   109,   110,   110,   111,   111,   112,   112,   112,   112,   112,
   112,   112,   112,   112,   112,   112,   112,   113,   113,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
   114,   114,   114,   115,   115,   116,   116,   117,   117,   118,
   118,   119,   119,   120,   121,   122,   122,   123,   123,   124,
   124,   124,   124,   124,   124,   124,   125,   125,   126,   126,
   126,   126,   127,   127,   127,   127,   128,   128,   128,   128,
   129,   130,   131,   131,   132,   132,   133,   133,   134,   134,
   135,   135,   136,   137,   137,   138,   138,   138,   139,   140,
   141,   141,   142,   142,   143,   144,   144,   145,   145
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     2,     3,     3,     3,     5,     2,     4,     0,     1,
     1,     2,     3,     5,     1,     1,     1,     1,     4,     3,
     3,     1,     2,     2,     2,     4,     3,     2,     3,     1,
     3,     1,     1,     1,     2,     2,     1,     2,     2,     2,
     2,     3,     2,     3,     2,     2,     2,     2,     1,     3,
     3,     3,     1,     3,     3,     1,     3,     3,     3,     1,
     3,     3,     3,     3,     3,     3,     1,     3,     3,     3,
     3,     1,     3,     1,     3,     1,     3,     1,     3,     1,
     3,     1,     5,     1,     3,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     3,     1,     2,     3,     3,     1,
     3,     1,     2,     2,     1,     2,     2,     5,     7,     6,
     5,     9,    10,     7,     8,     9,     0,     1,     2,     2,
     3,     3,     2,     2,     3,     3,     2,     2,     3,     3,
     5,     5,     3,     5,     0,     1,     1,     2,     3,     4,
     2,     3,     3,     2,     3,     3,     3,     4,     5,     2,
     5,     6,     1,     3,     1,     1,     2,     1,     1
};

static const short yydefact[] = {     0,
     1,     2,     3,     5,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     7,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     8,     0,     6,     0,     0,
    19,     0,     0,     0,     0,   135,     9,    28,    10,    32,
    42,    43,    44,    47,    59,    63,    66,    70,    77,    82,
    84,    86,    88,    90,    92,    94,   108,     0,   188,   110,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   189,   185,   186,   154,     0,   153,   147,
     8,     0,    32,    33,   132,     0,   130,   150,     0,   149,
     0,   158,   157,     0,    44,    49,    48,     0,     0,     0,
    50,     0,     0,   174,     0,     0,     0,    51,    53,     0,
     0,     0,     0,     5,     4,     8,    12,     0,     0,   126,
     0,    21,     0,     0,    20,    55,    56,    57,    58,     0,
     0,     0,    34,     0,     0,    35,    45,    46,    97,    98,
    99,   100,   101,   102,   103,   104,   107,   105,   106,    96,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,     0,   136,   187,   156,
   155,     0,    44,   148,     0,    26,    27,    25,    12,    31,
     0,   133,   129,     0,   128,   152,   151,     0,   160,   159,
     0,     0,     0,     0,     0,   175,   124,     0,     0,   176,
   177,   173,    52,    54,    11,    13,     0,     0,   125,   127,
    15,    19,    14,    17,    22,    38,     0,    40,     0,    30,
     0,    37,    95,    61,    60,    62,    64,    65,    67,    68,
    69,    76,    75,    73,    74,    71,    72,    78,    79,    80,
    81,    83,    85,    87,    89,    91,     0,   109,   132,     0,
     0,   147,   134,   131,   183,     0,     0,     0,     0,     0,
     0,     0,     0,   180,   178,     0,    23,     0,    39,     0,
    29,    36,     0,     0,   133,   147,     0,     0,   181,     0,
     0,   138,     0,   141,   165,   162,   161,     0,     0,    16,
    18,    41,    93,     0,     0,     0,     0,   147,   182,   184,
     0,   140,     0,     0,   166,   167,     0,    24,     0,     0,
   147,   144,     0,   139,     0,     0,   163,   165,   168,   179,
   145,     0,     0,     0,   169,   171,     0,   146,     0,   142,
   170,   172,   164,   143,     0,     0,     0
};

static const short yydefgoto[] = {    37,
    38,    39,   123,   124,   125,   118,   119,    40,    41,    42,
   133,   227,    43,    44,    45,    46,    47,    48,    49,    50,
    51,    52,    53,    54,    55,    56,    57,   151,    58,   120,
    60,   121,    61,    86,    87,   192,    62,    63,    64,    65,
   185,    66,    67,    68,    69,    70,   296,   314,   315,   316,
   328,    71,    72,    73,   210,   211,    74,   267,   345,    75,
    76
};

static const short yypact[] = {   340,
-32768,-32768,-32768,-32768,-32768,     7,   -30,   674,   -20,    18,
    -1,   218,  1032,  1032,    37,-32768,   632,    63,  1032,    77,
   116,   704,   157,  1032,  1032,    -8,     6,-32768,  1032,   413,
    15,  1032,  1032,  1032,  1032,-32768,-32768,-32768,-32768,   -22,
-32768,    68,   817,-32768,-32768,   -40,    61,    22,    87,   150,
   159,   164,    20,   188,   -19,-32768,-32768,    11,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   340,-32768,-32768,     5,-32768,   819,
-32768,    35,   -22,-32768,   167,    12,-32768,-32768,    21,-32768,
   185,-32768,-32768,    13,   106,-32768,-32768,  1032,   225,  1032,
-32768,  1032,  1032,-32768,   -39,   486,   133,-32768,-32768,   632,
  1032,  1032,   -16,   180,   191,    -8,   785,   -27,   194,-32768,
   559,-32768,   123,   110,   196,-32768,-32768,-32768,-32768,   890,
  1032,   206,-32768,  1032,   207,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,
  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,  1032,
  1032,  1032,  1032,  1032,  1032,-32768,  1032,-32768,-32768,-32768,
-32768,   208,   701,   200,   197,-32768,-32768,-32768,-32768,-32768,
  1032,-32768,-32768,   -20,-32768,-32768,-32768,    96,-32768,-32768,
   -12,   210,    19,    72,    73,-32768,-32768,   213,   157,   249,
-32768,-32768,-32768,-32768,-32768,-32768,    26,  1032,-32768,-32768,
-32768,    15,-32768,-32768,-32768,-32768,    79,-32768,   151,-32768,
   165,-32768,-32768,-32768,-32768,-32768,   -40,   -40,    61,    61,
    61,    22,    22,    22,    22,    22,    22,    87,    87,    87,
    87,   150,   150,   150,    20,   159,   216,-32768,     3,   -38,
  1032,  1032,-32768,-32768,-32768,   157,    80,   632,  1032,   632,
   222,   632,   228,-32768,-32768,   219,-32768,   961,-32768,  1032,
-32768,-32768,  1032,  1032,   268,  1032,    93,   212,-32768,   157,
   235,   275,    94,-32768,   290,-32768,-32768,   238,  1032,-32768,
-32768,-32768,-32768,   105,  1032,   220,   632,  1032,-32768,-32768,
   632,-32768,  1032,    -3,   290,-32768,   157,-32768,   632,   112,
  1032,-32768,   242,-32768,   166,   237,-32768,   290,-32768,-32768,
-32768,   632,   244,   632,   632,   632,   245,-32768,   632,-32768,
   632,   632,-32768,-32768,   308,   312,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    91,-32768,-32768,    97,   307,   309,-32768,
    -6,-32768,    39,-32768,    -9,    84,    57,    92,   -60,    56,
   142,-32768,   145,-32768,-32768,-32768,  -121,-32768,   -11,     0,
   -21,   -94,-32768,   138,   127,    64,-32768,-32768,-32768,-32768,
  -203,-32768,-32768,-32768,-32768,-32768,-32768,    -4,-32768,    10,
-32768,-32768,-32768,-32768,-32768,   117,-32768,-32768,-32768,-32768,
   247
};


#define	YYLAST		1105


static const short yytable[] = {    59,
    94,   107,   224,    96,    97,   180,   326,    77,   228,   101,
   105,   176,   193,   199,   108,   109,    99,   113,    88,   152,
   174,   196,   126,   127,   128,   129,   284,   177,   194,   233,
    80,   186,   187,   153,   154,   136,   216,    85,   130,   217,
   186,   187,   131,   206,   286,   215,   132,   111,   112,   268,
   177,    95,    95,   257,   177,   258,    91,    95,   288,   110,
   327,   175,    95,    95,    78,   157,   158,   159,   184,   263,
    95,    95,    95,    95,    59,    89,   190,   177,   194,   177,
   270,   122,   306,   188,   191,   177,   201,   181,   203,    79,
   204,   205,   188,   178,   195,   200,   277,    98,   189,   172,
    90,   213,   214,   197,   323,   248,   249,   250,   251,   212,
   160,   161,     1,     2,     3,     4,     5,   333,   183,   229,
   220,     8,   231,   100,   162,   163,    13,    14,   130,    16,
   155,   156,   134,   271,   272,    19,   135,   102,   177,   177,
   279,   290,   234,   235,   236,   280,   291,   137,   138,    95,
    95,    24,    25,   265,   307,   312,   301,   266,   302,   177,
   177,   303,   164,   165,   208,   209,   319,    81,    27,    28,
    29,   177,    82,   332,    31,   223,   103,   318,   177,    32,
    33,    34,    35,   166,   167,   168,   169,   274,   221,   222,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,    95,    95,    95,    95,    95,    95,    95,
    95,    95,    95,   239,   240,   241,   281,   177,    92,   106,
     1,     2,     3,     4,     5,   252,   253,   254,   173,     8,
   282,   177,   177,   335,    13,    14,   170,    16,   237,   238,
   341,   342,   171,    19,   289,   198,   202,   -26,   191,   287,
   184,   242,   243,   244,   245,   246,   247,   293,   -27,    24,
    25,   218,   225,   230,   232,   259,   177,   292,   309,   294,
   269,   297,   304,   273,   184,    81,    27,    28,    29,   262,
    82,   209,    31,   283,   295,   298,   299,    32,    33,    34,
    35,   305,   310,   320,   308,   330,   184,   311,   313,   317,
    93,   325,   321,   334,   336,   339,   322,   346,   343,   184,
   324,   347,   278,   276,    83,   256,    84,   255,   331,   260,
   264,   179,   285,   337,   329,     0,   275,     0,     0,     0,
     0,   338,     0,   340,     0,     0,     0,     0,   344,     0,
   220,   220,     1,     2,     3,     4,     5,     6,     0,     0,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,    19,    20,    21,     0,    22,
    23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    26,    27,    28,
    29,     0,    30,     0,    31,     0,     0,     0,     0,    32,
    33,    34,    35,     0,     0,     1,     2,     3,   114,   115,
     6,     0,    36,     7,     8,     9,    10,     0,    12,    13,
    14,    15,    16,    17,    18,     0,     0,     0,    19,    20,
    21,     0,    22,    23,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    24,    25,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   116,    27,    28,    29,     0,    30,   117,    31,     0,     0,
     0,     0,    32,    33,    34,    35,     0,     0,     1,     2,
     3,     4,     5,     6,     0,    36,     7,     8,     9,    10,
     0,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,    19,    20,    21,     0,    22,    23,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    24,    25,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    26,    27,    28,    29,     0,    30,   207,
    31,     0,     0,     0,     0,    32,    33,    34,    35,     0,
     0,     1,     2,     3,     4,     5,     6,     0,    36,     7,
     8,     9,    10,     0,    12,    13,    14,    15,    16,    17,
    18,     0,     0,     0,    19,    20,    21,     0,    22,    23,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    24,    25,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    26,    27,    28,    29,
     0,    30,   219,    31,     0,     0,     0,     0,    32,    33,
    34,    35,     0,     0,     1,     2,     3,     4,     5,     6,
     0,    36,     7,     8,     9,    10,     0,    12,    13,    14,
    15,    16,    17,    18,     0,     0,     0,    19,    20,    21,
     0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    24,    25,     0,     1,     2,     3,     4,
     5,     0,     0,     0,     0,     8,     0,     0,     0,    26,
    27,    28,    29,    16,    30,     0,    31,     0,     0,     0,
     0,    32,    33,    34,    35,     0,     1,     2,     3,     4,
     5,     0,     0,     0,    36,     8,     0,     0,     0,     0,
    13,    14,     0,    16,   261,     0,     0,     0,     0,    19,
     0,    81,     0,    28,    29,     0,    82,     0,    31,     0,
     0,     0,   137,   138,     0,    24,    25,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,     0,     0,
     0,    81,    27,    28,    29,     0,    82,     0,    31,     0,
     0,     0,     0,    32,    33,    34,    35,     0,     0,     0,
     0,     0,   150,     0,  -124,     0,   104,  -124,  -124,  -124,
  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,
  -124,  -124,  -124,  -124,  -124,  -124,  -124,  -124,     0,     0,
  -124,  -124,  -124,     0,  -124,  -124,     0,     0,     0,     0,
     0,     1,     2,     3,     4,     5,     0,     0,     0,     0,
     8,   182,     0,     0,     0,    13,    14,     0,    16,     0,
     0,     0,  -124,  -124,    19,     0,     0,  -124,  -124,     0,
     0,     0,     0,     0,     0,     0,  -124,  -124,   137,   138,
    24,    25,     0,   139,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,     0,     0,    81,    27,    28,    29,
     0,    82,     0,    31,     0,     0,     0,     0,    32,    33,
    34,    35,     1,     2,     3,     4,     5,     0,   150,     0,
     0,     8,     0,     0,     0,     0,    13,    14,     0,    16,
     0,     0,     0,     0,     0,    19,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    81,    27,    28,
    29,   226,    82,     0,    31,     0,     0,     0,     0,    32,
    33,    34,    35,     1,     2,     3,     4,     5,     0,     0,
     0,     0,     8,     0,     0,     0,     0,    13,    14,     0,
    16,     0,     0,     0,     0,     0,    19,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    24,    25,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    81,    27,
    28,    29,     0,    82,     0,    31,   300,     0,     0,     0,
    32,    33,    34,    35,     1,     2,     3,     4,     5,     0,
     0,     0,     0,     8,     0,     0,     0,     0,    13,    14,
     0,    16,     0,     0,     0,     0,     0,    19,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    24,    25,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    81,
    27,    28,    29,     0,    82,     0,    31,     0,     0,     0,
     0,    32,    33,    34,    35
};

static const short yycheck[] = {     0,
    12,    23,   124,    13,    14,     1,    10,     1,   130,    19,
    22,     1,     1,     1,    24,    25,    17,    29,     1,    60,
    40,     1,    32,    33,    34,    35,    24,    67,    67,   151,
    61,     6,     7,    74,    75,    42,    64,    58,    61,    67,
     6,     7,    65,    83,    83,    62,    69,    42,    43,    62,
    67,    13,    14,   175,    67,   177,    58,    19,   262,    68,
    64,    81,    24,    25,    58,    44,    45,    46,    80,   191,
    32,    33,    34,    35,    75,    58,    83,    67,    67,    67,
    62,    67,   286,    58,    82,    67,    98,    83,   100,    83,
   102,   103,    58,    83,    83,    83,   218,    61,    64,    80,
    83,   111,   112,    83,   308,   166,   167,   168,   169,   110,
    24,    25,     3,     4,     5,     6,     7,   321,    80,   131,
   121,    12,   134,    61,    38,    39,    17,    18,    61,    20,
    70,    71,    65,    62,    62,    26,    69,    61,    67,    67,
    62,    62,   152,   153,   154,    67,    67,    42,    43,   111,
   112,    42,    43,    58,    62,    62,   278,    62,   280,    67,
    67,   283,    76,    77,    32,    33,    62,    58,    59,    60,
    61,    67,    63,    62,    65,    66,    61,   299,    67,    70,
    71,    72,    73,    34,    35,    36,    37,   209,    66,    67,
   152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
   172,   173,   174,   157,   158,   159,    66,    67,     1,    63,
     3,     4,     5,     6,     7,   170,   171,   172,    41,    12,
    66,    67,    67,    68,    17,    18,    78,    20,   155,   156,
   335,   336,    79,    26,   266,    61,    22,    68,    82,   261,
   262,   160,   161,   162,   163,   164,   165,   269,    68,    42,
    43,    68,    67,    58,    58,    58,    67,   268,   290,   270,
    61,   272,   284,    61,   286,    58,    59,    60,    61,    83,
    63,    33,    65,    68,    63,    58,    68,    70,    71,    72,
    73,    24,    58,   305,    83,   317,   308,    23,     9,    62,
    83,   313,    83,    62,    68,    62,   307,     0,    64,   321,
   311,     0,   222,   217,     8,   174,     8,   173,   319,   182,
   194,    75,   259,   328,   315,    -1,   210,    -1,    -1,    -1,
    -1,   332,    -1,   334,    -1,    -1,    -1,    -1,   339,    -1,
   341,   342,     3,     4,     5,     6,     7,     8,    -1,    -1,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,
    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    -1,    63,    -1,    65,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,    -1,    -1,     3,     4,     5,     6,     7,
     8,    -1,    83,    11,    12,    13,    14,    -1,    16,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    26,    27,
    28,    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    58,    59,    60,    61,    -1,    63,    64,    65,    -1,    -1,
    -1,    -1,    70,    71,    72,    73,    -1,    -1,     3,     4,
     5,     6,     7,     8,    -1,    83,    11,    12,    13,    14,
    -1,    16,    17,    18,    19,    20,    21,    22,    -1,    -1,
    -1,    26,    27,    28,    -1,    30,    31,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    58,    59,    60,    61,    -1,    63,    64,
    65,    -1,    -1,    -1,    -1,    70,    71,    72,    73,    -1,
    -1,     3,     4,     5,     6,     7,     8,    -1,    83,    11,
    12,    13,    14,    -1,    16,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    26,    27,    28,    -1,    30,    31,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    61,
    -1,    63,    64,    65,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,    -1,    -1,     3,     4,     5,     6,     7,     8,
    -1,    83,    11,    12,    13,    14,    -1,    16,    17,    18,
    19,    20,    21,    22,    -1,    -1,    -1,    26,    27,    28,
    -1,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,     3,     4,     5,     6,
     7,    -1,    -1,    -1,    -1,    12,    -1,    -1,    -1,    58,
    59,    60,    61,    20,    63,    -1,    65,    -1,    -1,    -1,
    -1,    70,    71,    72,    73,    -1,     3,     4,     5,     6,
     7,    -1,    -1,    -1,    83,    12,    -1,    -1,    -1,    -1,
    17,    18,    -1,    20,    24,    -1,    -1,    -1,    -1,    26,
    -1,    58,    -1,    60,    61,    -1,    63,    -1,    65,    -1,
    -1,    -1,    42,    43,    -1,    42,    43,    47,    48,    49,
    50,    51,    52,    53,    54,    55,    56,    57,    -1,    -1,
    -1,    58,    59,    60,    61,    -1,    63,    -1,    65,    -1,
    -1,    -1,    -1,    70,    71,    72,    73,    -1,    -1,    -1,
    -1,    -1,    82,    -1,     0,    -1,    83,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
    26,    27,    28,    -1,    30,    31,    -1,    -1,    -1,    -1,
    -1,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
    12,    13,    -1,    -1,    -1,    17,    18,    -1,    20,    -1,
    -1,    -1,    58,    59,    26,    -1,    -1,    63,    64,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    72,    73,    42,    43,
    42,    43,    -1,    47,    48,    49,    50,    51,    52,    53,
    54,    55,    56,    57,    -1,    -1,    58,    59,    60,    61,
    -1,    63,    -1,    65,    -1,    -1,    -1,    -1,    70,    71,
    72,    73,     3,     4,     5,     6,     7,    -1,    82,    -1,
    -1,    12,    -1,    -1,    -1,    -1,    17,    18,    -1,    20,
    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,
    61,    62,    63,    -1,    65,    -1,    -1,    -1,    -1,    70,
    71,    72,    73,     3,     4,     5,     6,     7,    -1,    -1,
    -1,    -1,    12,    -1,    -1,    -1,    -1,    17,    18,    -1,
    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,
    60,    61,    -1,    63,    -1,    65,    66,    -1,    -1,    -1,
    70,    71,    72,    73,     3,     4,     5,     6,     7,    -1,
    -1,    -1,    -1,    12,    -1,    -1,    -1,    -1,    17,    18,
    -1,    20,    -1,    -1,    -1,    -1,    -1,    26,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    58,
    59,    60,    61,    -1,    63,    -1,    65,    -1,    -1,    -1,
    -1,    70,    71,    72,    73
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "//usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "//usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 145 "grammar.y"
{ yyval.node = new NullNode(); ;
    break;}
case 2:
#line 146 "grammar.y"
{ yyval.node = new BooleanNode(true); ;
    break;}
case 3:
#line 147 "grammar.y"
{ yyval.node = new BooleanNode(false); ;
    break;}
case 4:
#line 148 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].dval); ;
    break;}
case 5:
#line 149 "grammar.y"
{ yyval.node = new StringNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 6:
#line 150 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(l->pattern,l->flags);;
    break;}
case 7:
#line 156 "grammar.y"
{ yyval.node = new ThisNode(); ;
    break;}
case 8:
#line 157 "grammar.y"
{ yyval.node = new ResolveNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 11:
#line 161 "grammar.y"
{ yyval.node = new GroupNode(yyvsp[-1].node); ;
    break;}
case 12:
#line 162 "grammar.y"
{ yyval.node = new ObjectLiteralNode(0L); ;
    break;}
case 13:
#line 163 "grammar.y"
{ yyval.node = new ObjectLiteralNode(yyvsp[-1].node); ;
    break;}
case 14:
#line 167 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli); ;
    break;}
case 15:
#line 168 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].elm); ;
    break;}
case 16:
#line 169 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli, yyvsp[-3].elm); ;
    break;}
case 17:
#line 173 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 18:
#line 175 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-3].elm, yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 19:
#line 179 "grammar.y"
{ yyval.eli = 0L; ;
    break;}
case 21:
#line 184 "grammar.y"
{ yyval.eli = new ElisionNode(0L); ;
    break;}
case 22:
#line 185 "grammar.y"
{ yyval.eli = new ElisionNode(yyvsp[-1].eli); ;
    break;}
case 23:
#line 189 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 24:
#line 191 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node, yyvsp[-4].node); ;
    break;}
case 25:
#line 195 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 26:
#line 197 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 27:
#line 198 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].dval); ;
    break;}
case 29:
#line 203 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 30:
#line 204 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 31:
#line 206 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 33:
#line 211 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[0].node); ;
    break;}
case 34:
#line 215 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 35:
#line 216 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 36:
#line 217 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 37:
#line 218 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr); ;
    break;}
case 38:
#line 222 "grammar.y"
{ yyval.args = new ArgumentsNode(0L); ;
    break;}
case 39:
#line 223 "grammar.y"
{ yyval.args = new ArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 40:
#line 227 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[0].node); ;
    break;}
case 41:
#line 228 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 45:
#line 238 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 46:
#line 239 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 48:
#line 244 "grammar.y"
{ yyval.node = new DeleteNode(yyvsp[0].node); ;
    break;}
case 49:
#line 245 "grammar.y"
{ yyval.node = new VoidNode(yyvsp[0].node); ;
    break;}
case 50:
#line 246 "grammar.y"
{ yyval.node = new TypeOfNode(yyvsp[0].node); ;
    break;}
case 51:
#line 247 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 52:
#line 248 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 53:
#line 249 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 54:
#line 250 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 55:
#line 251 "grammar.y"
{ yyval.node = new UnaryPlusNode(yyvsp[0].node); ;
    break;}
case 56:
#line 252 "grammar.y"
{ yyval.node = new NegateNode(yyvsp[0].node); ;
    break;}
case 57:
#line 253 "grammar.y"
{ yyval.node = new BitwiseNotNode(yyvsp[0].node); ;
    break;}
case 58:
#line 254 "grammar.y"
{ yyval.node = new LogicalNotNode(yyvsp[0].node); ;
    break;}
case 60:
#line 259 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 61:
#line 260 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 62:
#line 261 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 64:
#line 266 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 65:
#line 267 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 67:
#line 272 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 68:
#line 273 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 69:
#line 274 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 71:
#line 280 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 72:
#line 282 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 73:
#line 284 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 74:
#line 286 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 75:
#line 288 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 76:
#line 290 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpIn, yyvsp[0].node); ;
    break;}
case 78:
#line 295 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 79:
#line 296 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 80:
#line 297 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 81:
#line 298 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 83:
#line 303 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 85:
#line 308 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 87:
#line 313 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 89:
#line 319 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 91:
#line 325 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 93:
#line 331 "grammar.y"
{ yyval.node = new ConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 95:
#line 337 "grammar.y"
{ yyval.node = new AssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 96:
#line 341 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 97:
#line 342 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 98:
#line 343 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 99:
#line 344 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 100:
#line 345 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 101:
#line 346 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 102:
#line 347 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 103:
#line 348 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 104:
#line 349 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 105:
#line 350 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 106:
#line 351 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 107:
#line 352 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 109:
#line 357 "grammar.y"
{ yyval.node = new CommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 124:
#line 378 "grammar.y"
{ yyval.stat = new BlockNode(0L); ;
    break;}
case 125:
#line 379 "grammar.y"
{ yyval.stat = new BlockNode(yyvsp[-1].slist); ;
    break;}
case 126:
#line 383 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[0].stat); ;
    break;}
case 127:
#line 384 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 128:
#line 388 "grammar.y"
{ yyval.stat = new VarStatementNode(yyvsp[-1].vlist); ;
    break;}
case 129:
#line 389 "grammar.y"
{ if (automatic())
                                          yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
                                        else
					  YYABORT; ;
    break;}
case 130:
#line 396 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[0].decl); ;
    break;}
case 131:
#line 398 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[-2].vlist, yyvsp[0].decl); ;
    break;}
case 132:
#line 402 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[0].ustr, 0); delete yyvsp[0].ustr; ;
    break;}
case 133:
#line 403 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[-1].ustr, yyvsp[0].init); delete yyvsp[-1].ustr; ;
    break;}
case 134:
#line 407 "grammar.y"
{ yyval.init = new AssignExprNode(yyvsp[0].node); ;
    break;}
case 135:
#line 411 "grammar.y"
{ yyval.stat = new EmptyStatementNode(); ;
    break;}
case 136:
#line 415 "grammar.y"
{ yyval.stat = new ExprStatementNode(yyvsp[-1].node); ;
    break;}
case 137:
#line 416 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ExprStatementNode(yyvsp[-1].node);
                                     else
				       YYABORT; ;
    break;}
case 138:
#line 423 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-2].node, yyvsp[0].stat, 0L); ;
    break;}
case 139:
#line 425 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-4].node, yyvsp[-2].stat, yyvsp[0].stat); ;
    break;}
case 140:
#line 429 "grammar.y"
{ yyval.stat = new DoWhileNode(yyvsp[-4].stat, yyvsp[-1].node); ;
    break;}
case 141:
#line 430 "grammar.y"
{ yyval.stat = new WhileNode(yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 142:
#line 432 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].node, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 143:
#line 434 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].vlist, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 144:
#line 436 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 145:
#line 438 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].ustr, 0L, yyvsp[-2].node, yyvsp[0].stat);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 146:
#line 441 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-5].ustr, yyvsp[-4].init, yyvsp[-2].node, yyvsp[0].stat);
                                     delete yyvsp[-5].ustr; ;
    break;}
case 147:
#line 446 "grammar.y"
{ yyval.node = 0L; ;
    break;}
case 149:
#line 451 "grammar.y"
{ yyval.stat = new ContinueNode(); ;
    break;}
case 150:
#line 452 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ContinueNode();
                                     else
				       YYABORT; ;
    break;}
case 151:
#line 456 "grammar.y"
{ yyval.stat = new ContinueNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr; ;
    break;}
case 152:
#line 457 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr;
                                     } else
				       YYABORT; ;
    break;}
case 153:
#line 464 "grammar.y"
{ yyval.stat = new BreakNode(); ;
    break;}
case 154:
#line 465 "grammar.y"
{ if (automatic())
                                       yyval.stat = new BreakNode();
                                     else
				       YYABORT; ;
    break;}
case 155:
#line 469 "grammar.y"
{ yyval.stat = new BreakNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr; ;
    break;}
case 156:
#line 470 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr;
                                     } else
				       YYABORT; ;
    break;}
case 157:
#line 477 "grammar.y"
{ yyval.stat = new ReturnNode(0L); ;
    break;}
case 158:
#line 478 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ReturnNode(0L);
                                     else
				       YYABORT; ;
    break;}
case 159:
#line 482 "grammar.y"
{ yyval.stat = new ReturnNode(yyvsp[-1].node); ;
    break;}
case 160:
#line 483 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ReturnNode(yyvsp[-1].node);
                                     else
				       YYABORT; ;
    break;}
case 161:
#line 490 "grammar.y"
{ yyval.stat = new WithNode(yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 162:
#line 494 "grammar.y"
{ yyval.stat = new SwitchNode(yyvsp[-2].node, yyvsp[0].cblk); ;
    break;}
case 163:
#line 498 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-1].clist, 0L, 0L); ;
    break;}
case 164:
#line 500 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 165:
#line 504 "grammar.y"
{ yyval.clist = 0L; ;
    break;}
case 167:
#line 509 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[0].ccl); ;
    break;}
case 168:
#line 510 "grammar.y"
{ yyval.clist = yyvsp[-1].clist->append(yyvsp[0].ccl); ;
    break;}
case 169:
#line 514 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-1].node, 0L); ;
    break;}
case 170:
#line 515 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 171:
#line 519 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, 0L);; ;
    break;}
case 172:
#line 520 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, yyvsp[0].slist); ;
    break;}
case 173:
#line 524 "grammar.y"
{ yyvsp[0].stat->pushLabel(yyvsp[-2].ustr);
                                     yyval.stat = new LabelNode(yyvsp[-2].ustr, yyvsp[0].stat);
                                     delete yyvsp[-2].ustr; ;
    break;}
case 174:
#line 530 "grammar.y"
{ yyval.stat = new ThrowNode(0L); ;
    break;}
case 175:
#line 531 "grammar.y"
{ yyval.stat = new ThrowNode(yyvsp[-1].node); ;
    break;}
case 176:
#line 535 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, yyvsp[0].node); ;
    break;}
case 177:
#line 536 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, 0L, yyvsp[0].node); ;
    break;}
case 178:
#line 537 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-2].stat, yyvsp[-1].node, yyvsp[0].node); ;
    break;}
case 179:
#line 541 "grammar.y"
{ yyval.node = new CatchNode(yyvsp[-2].ustr, yyvsp[0].stat); delete yyvsp[-2].ustr; ;
    break;}
case 180:
#line 545 "grammar.y"
{ yyval.node = new FinallyNode(yyvsp[0].stat); ;
    break;}
case 181:
#line 549 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-3].ustr, 0L, yyvsp[0].stat);
                                     delete yyvsp[-3].ustr; ;
    break;}
case 182:
#line 552 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-4].ustr, yyvsp[-2].param, yyvsp[0].stat);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 183:
#line 557 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 184:
#line 558 "grammar.y"
{ yyval.param = yyvsp[-2].param->append(yyvsp[0].ustr);
	                             delete yyvsp[0].ustr; ;
    break;}
case 185:
#line 563 "grammar.y"
{ yyval.prog = new ProgramNode(yyvsp[0].srcs); ;
    break;}
case 186:
#line 567 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[0].src); ;
    break;}
case 187:
#line 568 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[-1].srcs, yyvsp[0].src); ;
    break;}
case 188:
#line 572 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].stat); ;
    break;}
case 189:
#line 573 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].func); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "//usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 576 "grammar.y"


int yyerror (const char *)  /* Called by yyparse on error */
{
//  fprintf(stderr, "ERROR: %s at line %d\n",
//	  s, KJScript::lexer()->lineNo());
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if (yychar == '}')
    return true;
  else if (Lexer::curr()->prevTerminator())
    return true;

  return false;
}
