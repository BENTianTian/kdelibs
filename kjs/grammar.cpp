
/*  A Bison parser, made from grammar.y
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse kjsyyparse
#define yylex kjsyylex
#define yyerror kjsyyerror
#define yylval kjsyylval
#define yychar kjsyychar
#define yydebug kjsyydebug
#define yynerrs kjsyynerrs
#define	NULLTOKEN	258
#define	TRUETOKEN	259
#define	FALSETOKEN	260
#define	STRING	261
#define	DECIMAL	262
#define	INTEGER	263
#define	BREAK	264
#define	CASE	265
#define	DEFAULT	266
#define	FOR	267
#define	NEW	268
#define	VAR	269
#define	CONTINUE	270
#define	FUNCTION	271
#define	RETURN	272
#define	VOID	273
#define	DELETE	274
#define	IF	275
#define	THIS	276
#define	DO	277
#define	WHILE	278
#define	ELSE	279
#define	IN	280
#define	INSTANCEOF	281
#define	TYPEOF	282
#define	SWITCH	283
#define	WITH	284
#define	RESERVED	285
#define	THROW	286
#define	TRY	287
#define	CATCH	288
#define	FINALLY	289
#define	EQEQ	290
#define	NE	291
#define	STREQ	292
#define	STRNEQ	293
#define	LE	294
#define	GE	295
#define	OR	296
#define	AND	297
#define	PLUSPLUS	298
#define	MINUSMINUS	299
#define	LSHIFT	300
#define	RSHIFT	301
#define	URSHIFT	302
#define	PLUSEQUAL	303
#define	MINUSEQUAL	304
#define	MULTEQUAL	305
#define	DIVEQUAL	306
#define	LSHIFTEQUAL	307
#define	RSHIFTEQUAL	308
#define	URSHIFTEQUAL	309
#define	ANDEQUAL	310
#define	MODEQUAL	311
#define	XOREQUAL	312
#define	OREQUAL	313
#define	DOUBLE	314
#define	IDENT	315
#define	AUTO	316

#line 1 "grammar.y"


/*
 *  This file is part of the KDE libraries
 *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include "kjs.h"
#include "nodes.h"
#include "lexer.h"

extern int yylex();
int yyerror (const char *);
bool automatic();

using namespace KJS;


#line 34 "grammar.y"
typedef union {
  int                 ival;
  double              dval;
  UString             *ustr;
  Node                *node;
  StatementNode       *stat;
  ParameterNode       *param;
  FuncDeclNode        *func;
  ProgramNode         *prog;
  AssignExprNode      *init;
  SourceElementNode   *src;
  SourceElementsNode  *srcs;
  StatListNode        *slist;
  ArgumentsNode       *args;
  ArgumentListNode    *alist;
  VarDeclNode         *decl;
  VarDeclListNode     *vlist;
  CaseBlockNode       *cblk;
  ClauseListNode      *clist;
  CaseClauseNode      *ccl;
  ElementNode         *elm;
  ElisionNode         *eli;
  Operator            op;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		342
#define	YYFLAG		-32768
#define	YYNTBASE	86

#define YYTRANSLATE(x) ((unsigned)(x) <= 316 ? yytranslate[x] : 148)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    75,     2,     2,     2,    77,    80,     2,    63,
    64,    76,    72,    69,    73,    71,    62,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,    70,    85,    78,
    84,    79,    83,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    67,     2,    68,    81,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,    65,    82,    66,    74,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    12,    14,    16,    18,
    20,    22,    26,    29,    33,    37,    41,    47,    50,    55,
    56,    58,    60,    63,    67,    73,    75,    77,    79,    81,
    83,    88,    92,    96,    98,   101,   104,   107,   112,   116,
   119,   123,   125,   129,   131,   133,   135,   138,   141,   143,
   146,   149,   152,   155,   159,   162,   166,   169,   172,   175,
   178,   180,   184,   188,   192,   194,   198,   202,   204,   208,
   212,   216,   218,   222,   226,   230,   234,   238,   240,   244,
   248,   252,   256,   258,   262,   264,   268,   270,   274,   276,
   280,   282,   286,   288,   294,   296,   300,   302,   304,   306,
   308,   310,   312,   314,   316,   318,   320,   322,   324,   326,
   330,   332,   334,   336,   338,   340,   342,   344,   346,   348,
   350,   352,   354,   356,   358,   361,   365,   367,   370,   374,
   378,   380,   384,   386,   389,   392,   394,   397,   400,   406,
   414,   421,   427,   437,   448,   456,   465,   475,   476,   478,
   481,   485,   488,   492,   495,   499,   505,   511,   515,   521,
   522,   524,   526,   529,   533,   538,   541,   545,   549,   552,
   556,   560,   564,   569,   575,   578,   584,   591,   593,   597,
   599,   601,   604,   606
};

static const short yyrhs[] = {     3,
     0,     4,     0,     5,     0,     8,     0,    59,     0,     6,
     0,    62,     0,    21,     0,    60,     0,    86,     0,    88,
     0,    63,   115,    64,     0,    65,    66,     0,    65,    92,
    66,     0,    67,    90,    68,     0,    67,    89,    68,     0,
    67,    89,    69,    90,    68,     0,    90,   113,     0,    89,
    69,    90,   113,     0,     0,    91,     0,    69,     0,    91,
    69,     0,    93,    70,   113,     0,    92,    69,    93,    70,
   113,     0,    60,     0,     6,     0,     8,     0,    59,     0,
    87,     0,    94,    67,   115,    68,     0,    94,    71,    60,
     0,    13,    94,    97,     0,    94,     0,    13,    95,     0,
    94,    97,     0,    96,    97,     0,    96,    67,   115,    68,
     0,    96,    71,    60,     0,    63,    64,     0,    63,    98,
    64,     0,   113,     0,    98,    69,   113,     0,    95,     0,
    96,     0,    99,     0,    99,    43,     0,    99,    44,     0,
   100,     0,    19,   101,     0,    18,   101,     0,    27,   101,
     0,    43,   101,     0,    61,    43,   101,     0,    44,   101,
     0,    61,    44,   101,     0,    72,   101,     0,    73,   101,
     0,    74,   101,     0,    75,   101,     0,   101,     0,   102,
    76,   101,     0,   102,    62,   101,     0,   102,    77,   101,
     0,   102,     0,   103,    72,   102,     0,   103,    73,   102,
     0,   103,     0,   104,    45,   103,     0,   104,    46,   103,
     0,   104,    47,   103,     0,   104,     0,   105,    78,   104,
     0,   105,    79,   104,     0,   105,    39,   104,     0,   105,
    40,   104,     0,   105,    26,   104,     0,   105,     0,   106,
    35,   105,     0,   106,    36,   105,     0,   106,    37,   105,
     0,   106,    38,   105,     0,   106,     0,   107,    80,   106,
     0,   107,     0,   108,    81,   106,     0,   108,     0,   109,
    82,   106,     0,   109,     0,   110,    42,   109,     0,   110,
     0,   111,    41,   107,     0,   111,     0,   111,    83,   113,
    70,   113,     0,   112,     0,    99,   114,   113,     0,    84,
     0,    48,     0,    49,     0,    50,     0,    51,     0,    52,
     0,    53,     0,    54,     0,    55,     0,    57,     0,    58,
     0,    56,     0,   113,     0,   115,    69,   113,     0,   117,
     0,   119,     0,   123,     0,   124,     0,   125,     0,   126,
     0,   128,     0,   129,     0,   130,     0,   131,     0,   132,
     0,   138,     0,   139,     0,   140,     0,    65,    66,     0,
    65,   118,    66,     0,   116,     0,   118,   116,     0,    14,
   120,    85,     0,    14,   120,     1,     0,   121,     0,   120,
    69,   121,     0,    60,     0,    60,   122,     0,    84,   113,
     0,    85,     0,   115,    85,     0,   115,     1,     0,    20,
    63,   115,    64,   116,     0,    20,    63,   115,    64,   116,
    24,   116,     0,    22,   116,    23,    63,   115,    64,     0,
    23,    63,   115,    64,   116,     0,    12,    63,   127,    85,
   127,    85,   127,    64,   116,     0,    12,    63,    14,   120,
    85,   127,    85,   127,    64,   116,     0,    12,    63,    99,
    25,   115,    64,   116,     0,    12,    63,    14,    60,    25,
   115,    64,   116,     0,    12,    63,    14,    60,   122,    25,
   115,    64,   116,     0,     0,   115,     0,    15,    85,     0,
    15,    60,    85,     0,     9,    85,     0,     9,    60,    85,
     0,    17,    85,     0,    17,   115,    85,     0,    29,    63,
   115,    64,   116,     0,    28,    63,   115,    64,   133,     0,
    65,   134,    66,     0,    65,   134,   137,   134,    66,     0,
     0,   135,     0,   136,     0,   135,   136,     0,    10,   115,
    70,     0,    10,   115,    70,   118,     0,    11,    70,     0,
    11,    70,   118,     0,    60,    70,   116,     0,    31,    85,
     0,    31,   115,    85,     0,    32,   117,   141,     0,    32,
   117,   142,     0,    32,   117,   141,   142,     0,    33,    63,
    60,    64,   117,     0,    34,   117,     0,    16,    60,    63,
    64,   117,     0,    16,    60,    63,   144,    64,   117,     0,
    60,     0,   144,    69,    60,     0,   146,     0,   147,     0,
   146,   147,     0,   116,     0,   143,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   140,   142,   143,   144,   145,   146,   147,   152,   154,   156,
   157,   158,   159,   160,   163,   165,   166,   169,   171,   175,
   177,   180,   182,   185,   187,   191,   194,   195,   196,   199,
   201,   202,   204,   207,   209,   212,   214,   215,   216,   219,
   221,   224,   226,   229,   231,   234,   236,   237,   240,   242,
   243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
   255,   257,   258,   259,   262,   264,   265,   268,   270,   271,
   272,   275,   277,   279,   281,   283,   285,   289,   291,   292,
   293,   294,   297,   299,   302,   304,   307,   309,   312,   314,
   318,   320,   324,   326,   330,   332,   336,   338,   339,   340,
   341,   342,   343,   344,   345,   346,   347,   348,   351,   353,
   356,   358,   359,   360,   361,   362,   363,   364,   365,   366,
   367,   368,   369,   370,   373,   375,   378,   380,   383,   385,
   391,   393,   397,   399,   402,   406,   410,   412,   418,   420,
   424,   426,   427,   429,   431,   433,   436,   441,   443,   446,
   448,   451,   453,   456,   458,   461,   465,   469,   471,   475,
   477,   480,   482,   485,   487,   490,   492,   495,   499,   501,
   504,   506,   507,   510,   514,   518,   521,   526,   528,   532,
   536,   538,   541,   543
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NULLTOKEN",
"TRUETOKEN","FALSETOKEN","STRING","DECIMAL","INTEGER","BREAK","CASE","DEFAULT",
"FOR","NEW","VAR","CONTINUE","FUNCTION","RETURN","VOID","DELETE","IF","THIS",
"DO","WHILE","ELSE","IN","INSTANCEOF","TYPEOF","SWITCH","WITH","RESERVED","THROW",
"TRY","CATCH","FINALLY","EQEQ","NE","STREQ","STRNEQ","LE","GE","OR","AND","PLUSPLUS",
"MINUSMINUS","LSHIFT","RSHIFT","URSHIFT","PLUSEQUAL","MINUSEQUAL","MULTEQUAL",
"DIVEQUAL","LSHIFTEQUAL","RSHIFTEQUAL","URSHIFTEQUAL","ANDEQUAL","MODEQUAL",
"XOREQUAL","OREQUAL","DOUBLE","IDENT","AUTO","'/'","'('","')'","'{'","'}'","'['",
"']'","','","':'","'.'","'+'","'-'","'~'","'!'","'*'","'%'","'<'","'>'","'&'",
"'^'","'|'","'?'","'='","';'","Literal","PrimaryExpr","ArrayLiteral","ElementList",
"ElisionOpt","Elision","PropertyNameAndValueList","PropertyName","MemberExpr",
"NewExpr","CallExpr","Arguments","ArgumentList","LeftHandSideExpr","PostfixExpr",
"UnaryExpr","MultiplicativeExpr","AdditiveExpr","ShiftExpr","RelationalExpr",
"EqualityExpr","BitwiseANDExpr","BitwiseXORExpr","BitwiseORExpr","LogicalANDExpr",
"LogicalORExpr","ConditionalExpr","AssignmentExpr","AssignmentOperator","Expr",
"Statement","Block","StatementList","VariableStatement","VariableDeclarationList",
"VariableDeclaration","Initializer","EmptyStatement","ExprStatement","IfStatement",
"IterationStatement","ExprOpt","ContinueStatement","BreakStatement","ReturnStatement",
"WithStatement","SwitchStatement","CaseBlock","CaseClausesOpt","CaseClauses",
"CaseClause","DefaultClause","LabelledStatement","ThrowStatement","TryStatement",
"Catch","Finally","FunctionDeclaration","FormalParameterList","Program","SourceElements",
"SourceElement", NULL
};
#endif

static const short yyr1[] = {     0,
    86,    86,    86,    86,    86,    86,    86,    87,    87,    87,
    87,    87,    87,    87,    88,    88,    88,    89,    89,    90,
    90,    91,    91,    92,    92,    93,    93,    93,    93,    94,
    94,    94,    94,    95,    95,    96,    96,    96,    96,    97,
    97,    98,    98,    99,    99,   100,   100,   100,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   102,   102,   102,   102,   103,   103,   103,   104,   104,   104,
   104,   105,   105,   105,   105,   105,   105,   106,   106,   106,
   106,   106,   107,   107,   108,   108,   109,   109,   110,   110,
   111,   111,   112,   112,   113,   113,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   114,   115,   115,
   116,   116,   116,   116,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   117,   117,   118,   118,   119,   119,
   120,   120,   121,   121,   122,   123,   124,   124,   125,   125,
   126,   126,   126,   126,   126,   126,   126,   127,   127,   128,
   128,   129,   129,   130,   130,   131,   132,   133,   133,   134,
   134,   135,   135,   136,   136,   137,   137,   138,   139,   139,
   140,   140,   140,   141,   142,   143,   143,   144,   144,   145,
   146,   146,   147,   147
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     2,     3,     3,     3,     5,     2,     4,     0,
     1,     1,     2,     3,     5,     1,     1,     1,     1,     1,
     4,     3,     3,     1,     2,     2,     2,     4,     3,     2,
     3,     1,     3,     1,     1,     1,     2,     2,     1,     2,
     2,     2,     2,     3,     2,     3,     2,     2,     2,     2,
     1,     3,     3,     3,     1,     3,     3,     1,     3,     3,
     3,     1,     3,     3,     3,     3,     3,     1,     3,     3,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     3,     1,     5,     1,     3,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     2,     3,     1,     2,     3,     3,
     1,     3,     1,     2,     2,     1,     2,     2,     5,     7,
     6,     5,     9,    10,     7,     8,     9,     0,     1,     2,
     3,     2,     3,     2,     3,     5,     5,     3,     5,     0,
     1,     1,     2,     3,     4,     2,     3,     3,     2,     3,
     3,     3,     4,     5,     2,     5,     6,     1,     3,     1,
     1,     2,     1,     1
};

static const short yydefact[] = {     0,
     1,     2,     3,     6,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     8,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     5,     9,     0,     7,     0,
     0,    20,     0,     0,     0,     0,   136,    10,    30,    11,
    34,    44,    45,    46,    49,    61,    65,    68,    72,    78,
    83,    85,    87,    89,    91,    93,    95,   109,     0,   183,
   111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   184,   180,   181,     0,   152,   148,
     9,     0,    34,    35,   133,     0,   131,     0,   150,     0,
   154,     0,    46,    51,    50,     0,     0,     0,    52,     0,
     0,   169,     0,     0,     0,    53,    55,     0,     0,     0,
     0,     6,     4,     5,     9,    13,     0,     0,   127,     0,
    22,     0,     0,    21,    57,    58,    59,    60,     0,     0,
     0,    36,     0,     0,    37,    47,    48,    98,    99,   100,
   101,   102,   103,   104,   105,   108,   106,   107,    97,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   138,     0,   137,   182,   153,     0,    46,
   149,     0,    27,    28,    29,    26,    13,    33,     0,   134,
   130,     0,   129,   151,     0,   155,     0,     0,     0,     0,
     0,   170,   125,     0,     0,   171,   172,   168,    54,    56,
    12,    14,     0,     0,   126,   128,    16,    20,    15,    18,
    23,    40,     0,    42,     0,    32,     0,    39,    96,    63,
    62,    64,    66,    67,    69,    70,    71,    77,    75,    76,
    73,    74,    79,    80,    81,    82,    84,    86,    88,    90,
    92,     0,   110,   133,     0,     0,   148,   135,   132,   178,
     0,     0,     0,     0,     0,     0,     0,     0,   175,   173,
     0,    24,     0,    41,     0,    31,    38,     0,     0,   134,
   148,     0,     0,   176,     0,     0,   139,     0,   142,   160,
   157,   156,     0,     0,    17,    19,    43,    94,     0,     0,
     0,     0,   148,   177,   179,     0,   141,     0,     0,   161,
   162,     0,    25,     0,     0,   148,   145,     0,   140,     0,
     0,   158,   160,   163,   174,   146,     0,     0,     0,   164,
   166,     0,   147,     0,   143,   165,   167,   159,   144,     0,
     0,     0
};

static const short yydefgoto[] = {    38,
    39,    40,   122,   123,   124,   117,   118,    41,    42,    43,
   132,   223,    44,    45,    46,    47,    48,    49,    50,    51,
    52,    53,    54,    55,    56,    57,    58,   150,    59,   119,
    61,   120,    62,    86,    87,   190,    63,    64,    65,    66,
   182,    67,    68,    69,    70,    71,   291,   309,   310,   311,
   323,    72,    73,    74,   206,   207,    75,   262,   340,    76,
    77
};

static const short yypact[] = {   335,
-32768,-32768,-32768,-32768,-32768,   -48,   -17,    75,    -1,   -44,
    22,   704,  1017,  1017,    21,-32768,   631,    29,  1017,    37,
    51,   731,   -23,  1017,  1017,-32768,    33,   114,-32768,  1017,
   409,    42,  1017,  1017,  1017,  1017,-32768,-32768,-32768,-32768,
    31,-32768,    34,   332,-32768,-32768,   -33,   108,   -22,   -18,
   133,    49,    65,   137,   113,   -15,-32768,-32768,     6,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   335,-32768,   136,-32768,   212,
-32768,    47,    31,-32768,   140,     8,-32768,   144,-32768,   169,
-32768,   -55,   139,-32768,-32768,  1017,   213,  1017,-32768,  1017,
  1017,-32768,   -51,   483,   152,-32768,-32768,   631,  1017,  1017,
    40,   167,   168,   171,    33,   809,   -34,   172,-32768,   557,
-32768,   119,   844,   174,-32768,-32768,-32768,-32768,   917,  1017,
   184,-32768,  1017,   187,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1017,
  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1017,
  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1017,  1017,
  1017,  1017,  1017,-32768,  1017,-32768,-32768,-32768,   188,   842,
   180,   165,-32768,-32768,-32768,-32768,-32768,-32768,  1017,-32768,
-32768,    -1,-32768,-32768,    79,-32768,    46,   189,    48,    52,
    61,-32768,-32768,   191,   -23,   217,-32768,-32768,-32768,-32768,
-32768,-32768,     7,  1017,-32768,-32768,-32768,    42,-32768,-32768,
-32768,-32768,    62,-32768,   143,-32768,   145,-32768,-32768,-32768,
-32768,-32768,   -33,   -33,   108,   108,   108,   -22,   -22,   -22,
   -22,   -22,   -18,   -18,   -18,   -18,   133,   133,   133,   137,
    49,   190,-32768,   -19,   -49,  1017,  1017,-32768,-32768,-32768,
   -23,    63,   631,  1017,   631,   192,   631,   198,-32768,-32768,
   196,-32768,   944,-32768,  1017,-32768,-32768,  1017,  1017,   234,
  1017,    64,   176,-32768,   -23,   202,   245,    72,-32768,   266,
-32768,-32768,   214,  1017,-32768,-32768,-32768,-32768,    80,  1017,
   195,   631,  1017,-32768,-32768,   631,-32768,  1017,    -8,   266,
-32768,   -23,-32768,   631,    81,  1017,-32768,   218,-32768,   153,
   211,-32768,   266,-32768,-32768,-32768,   631,   219,   631,   631,
   631,   222,-32768,   631,-32768,   631,   631,-32768,-32768,   290,
   293,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    76,-32768,-32768,    82,   288,   291,-32768,
   -38,-32768,    38,-32768,    14,    73,    -5,     1,    12,     4,
   126,-32768,   129,-32768,-32768,-32768,  -119,-32768,   -11,     0,
   -21,   -96,-32768,   122,   111,    50,-32768,-32768,-32768,-32768,
  -217,-32768,-32768,-32768,-32768,-32768,-32768,   -16,-32768,    -2,
-32768,-32768,-32768,-32768,-32768,   103,-32768,-32768,-32768,-32768,
   235
};


#define	YYLAST		1092


static const short yytable[] = {    60,
    92,   105,   321,   220,   135,   279,   174,   159,   191,   224,
   103,    78,   183,   175,   184,    88,    97,   175,   111,   192,
   160,   161,   156,   157,   158,   172,    94,    95,   151,   196,
   229,   212,    99,   202,   213,   281,    79,   106,   107,   283,
    89,   104,   152,   153,   188,    80,   125,   126,   127,   128,
    93,    93,   183,   252,   184,   253,    93,   322,    85,   162,
   163,    93,    93,   301,   189,   185,   186,   173,   181,   258,
    93,    93,    93,    93,   175,    60,   192,     1,     2,     3,
     4,    90,     5,    96,   197,   318,   199,     8,   200,   201,
   176,    98,   193,   129,   272,    16,   129,   130,   328,   100,
   133,   131,   108,   211,   134,   185,   186,   208,   175,   263,
   121,   265,   187,   101,   175,   266,   175,   180,   225,   216,
   175,   227,   209,   210,   267,   274,   285,   302,   168,   175,
   275,   286,   175,    26,    81,   307,    29,    30,   260,    82,
   175,    32,   261,   314,   327,   169,    93,    93,   175,   175,
   235,   236,   237,   296,   171,   297,   109,   110,   298,   238,
   239,   240,   241,   242,   230,   231,   232,   164,   165,   166,
   167,   247,   248,   249,   313,   243,   244,   245,   246,   154,
   155,   136,   137,   269,   204,   205,   217,   218,    93,    93,
    93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
    93,    93,    93,    93,    93,    93,    93,    93,    93,    93,
   276,   175,   277,   175,     1,     2,     3,     4,   170,     5,
   178,   175,   330,   189,     8,   179,   233,   234,   194,    13,
    14,   195,    16,   336,   337,   198,   -27,   -28,    19,   284,
   -29,   214,   221,   226,   282,   181,   228,   254,   175,   257,
   205,   264,   288,   268,    24,    25,   290,   293,   300,   278,
   303,   305,   287,   304,   289,   294,   292,   299,   306,   181,
    26,    81,    28,    29,    30,   308,    82,   312,    32,   316,
   331,   329,   334,    33,    34,    35,    36,   338,   315,   341,
   325,   181,   342,   273,   271,    83,   320,   251,    84,   250,
   255,   317,   259,   280,   181,   319,   332,   324,   270,     0,
   177,     0,     0,   326,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   333,     0,   335,     0,
     0,     0,     0,   339,     0,   216,   216,     1,     2,     3,
     4,     0,     5,     6,     0,     0,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,     0,     0,
     0,    19,    20,    21,     0,    22,    23,     0,     0,     0,
     0,     0,     0,     0,   136,   137,     0,    24,    25,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     0,     0,     0,    26,    27,    28,    29,    30,     0,    31,
     0,    32,     0,     0,     0,     0,    33,    34,    35,    36,
     0,     1,     2,     3,   112,   149,   113,     6,     0,    37,
     7,     8,     9,    10,     0,    12,    13,    14,    15,    16,
    17,    18,     0,     0,     0,    19,    20,    21,     0,    22,
    23,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    24,    25,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   114,   115,    28,
    29,    30,     0,    31,   116,    32,     0,     0,     0,     0,
    33,    34,    35,    36,     0,     1,     2,     3,     4,     0,
     5,     6,     0,    37,     7,     8,     9,    10,     0,    12,
    13,    14,    15,    16,    17,    18,     0,     0,     0,    19,
    20,    21,     0,    22,    23,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    24,    25,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    26,    27,    28,    29,    30,     0,    31,   203,    32,
     0,     0,     0,     0,    33,    34,    35,    36,     0,     1,
     2,     3,     4,     0,     5,     6,     0,    37,     7,     8,
     9,    10,     0,    12,    13,    14,    15,    16,    17,    18,
     0,     0,     0,    19,    20,    21,     0,    22,    23,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
    25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    26,    27,    28,    29,    30,
     0,    31,   215,    32,     0,     0,     0,     0,    33,    34,
    35,    36,     0,     1,     2,     3,     4,     0,     5,     6,
     0,    37,     7,     8,     9,    10,     0,    12,    13,    14,
    15,    16,    17,    18,     0,     0,     0,    19,    20,    21,
     0,    22,    23,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    24,    25,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    26,
    27,    28,    29,    30,     0,    31,     0,    32,     0,     0,
     0,     0,    33,    34,    35,    36,     1,     2,     3,     4,
     0,     5,     0,     0,     0,    37,     8,     0,     0,     0,
     0,    13,    14,     0,    16,     0,     0,     0,     0,     0,
    19,     0,     0,     1,     2,     3,     4,     0,     5,     0,
     0,     0,     0,     8,     0,     0,    24,    25,    13,    14,
     0,    16,     0,     0,     0,     0,     0,    19,     0,     0,
     0,     0,    26,    81,    28,    29,    30,     0,    82,     0,
    32,     0,     0,    24,    25,    33,    34,    35,    36,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    91,    26,
    81,    28,    29,    30,     0,    82,     0,    32,     0,     0,
     0,     0,    33,    34,    35,    36,     0,     0,  -125,     0,
     0,  -125,  -125,  -125,  -125,   102,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,  -125,
  -125,  -125,  -125,     0,     0,  -125,  -125,  -125,     0,  -125,
  -125,     0,     0,     0,     0,     0,     1,     2,     3,     4,
     0,     5,     0,     0,     0,     0,     8,     0,     0,     0,
     0,    13,    14,     0,    16,     0,   256,  -125,  -125,  -125,
    19,     0,     0,  -125,  -125,     0,     0,     0,     0,     0,
     0,     0,  -125,  -125,   136,   137,    24,    25,     0,   138,
   139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     0,     0,    26,    81,    28,    29,    30,     0,    82,     0,
    32,   219,     0,     0,     0,    33,    34,    35,    36,     1,
     2,     3,     4,     0,     5,   149,     0,     0,     0,     8,
     0,     0,     0,     0,    13,    14,     0,    16,     0,     0,
     0,     0,     0,    19,     0,     0,     1,     2,     3,     4,
     0,     5,     0,     0,     0,     0,     8,     0,     0,    24,
    25,    13,    14,     0,    16,     0,     0,     0,     0,     0,
    19,     0,     0,     0,     0,    26,    81,    28,    29,    30,
   222,    82,     0,    32,     0,     0,    24,    25,    33,    34,
    35,    36,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    26,    81,    28,    29,    30,     0,    82,     0,
    32,   295,     0,     0,     0,    33,    34,    35,    36,     1,
     2,     3,     4,     0,     5,     0,     0,     0,     0,     8,
     0,     0,     0,     0,    13,    14,     0,    16,     0,     0,
     0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,    24,
    25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    26,    81,    28,    29,    30,
     0,    82,     0,    32,     0,     0,     0,     0,    33,    34,
    35,    36
};

static const short yycheck[] = {     0,
    12,    23,    11,   123,    43,    25,     1,    26,     1,   129,
    22,    60,     6,    69,     8,    60,    17,    69,    30,    69,
    39,    40,    45,    46,    47,    41,    13,    14,    62,    85,
   150,    66,    19,    85,    69,    85,    85,    24,    25,   257,
    85,    65,    76,    77,    83,    63,    33,    34,    35,    36,
    13,    14,     6,   173,     8,   175,    19,    66,    60,    78,
    79,    24,    25,   281,    84,    59,    60,    83,    80,   189,
    33,    34,    35,    36,    69,    76,    69,     3,     4,     5,
     6,    60,     8,    63,    96,   303,    98,    13,   100,   101,
    85,    63,    85,    63,   214,    21,    63,    67,   316,    63,
    67,    71,    70,    64,    71,    59,    60,   108,    69,    64,
    69,    64,    66,    63,    69,    64,    69,    80,   130,   120,
    69,   133,   109,   110,    64,    64,    64,    64,    80,    69,
    69,    69,    69,    59,    60,    64,    62,    63,    60,    65,
    69,    67,    64,    64,    64,    81,   109,   110,    69,    69,
   156,   157,   158,   273,    42,   275,    43,    44,   278,   159,
   160,   161,   162,   163,   151,   152,   153,    35,    36,    37,
    38,   168,   169,   170,   294,   164,   165,   166,   167,    72,
    73,    43,    44,   205,    33,    34,    68,    69,   151,   152,
   153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
    68,    69,    68,    69,     3,     4,     5,     6,    82,     8,
    85,    69,    70,    84,    13,    14,   154,   155,    85,    18,
    19,    63,    21,   330,   331,    23,    70,    70,    27,   261,
    70,    70,    69,    60,   256,   257,    60,    60,    69,    85,
    34,    63,   264,    63,    43,    44,    65,    60,    25,    70,
    85,    60,   263,   285,   265,    70,   267,   279,    24,   281,
    59,    60,    61,    62,    63,    10,    65,    64,    67,    85,
    70,    64,    64,    72,    73,    74,    75,    66,   300,     0,
   312,   303,     0,   218,   213,     8,   308,   172,     8,   171,
   179,   302,   192,   254,   316,   306,   323,   310,   206,    -1,
    76,    -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,   327,    -1,   329,    -1,
    -1,    -1,    -1,   334,    -1,   336,   337,     3,     4,     5,
     6,    -1,     8,     9,    -1,    -1,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    -1,    -1,
    -1,    27,    28,    29,    -1,    31,    32,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    43,    44,    -1,    43,    44,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    -1,    -1,    -1,    59,    60,    61,    62,    63,    -1,    65,
    -1,    67,    -1,    -1,    -1,    -1,    72,    73,    74,    75,
    -1,     3,     4,     5,     6,    84,     8,     9,    -1,    85,
    12,    13,    14,    15,    -1,    17,    18,    19,    20,    21,
    22,    23,    -1,    -1,    -1,    27,    28,    29,    -1,    31,
    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,
    62,    63,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
    72,    73,    74,    75,    -1,     3,     4,     5,     6,    -1,
     8,     9,    -1,    85,    12,    13,    14,    15,    -1,    17,
    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,    27,
    28,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    59,    60,    61,    62,    63,    -1,    65,    66,    67,
    -1,    -1,    -1,    -1,    72,    73,    74,    75,    -1,     3,
     4,     5,     6,    -1,     8,     9,    -1,    85,    12,    13,
    14,    15,    -1,    17,    18,    19,    20,    21,    22,    23,
    -1,    -1,    -1,    27,    28,    29,    -1,    31,    32,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,
    -1,    65,    66,    67,    -1,    -1,    -1,    -1,    72,    73,
    74,    75,    -1,     3,     4,     5,     6,    -1,     8,     9,
    -1,    85,    12,    13,    14,    15,    -1,    17,    18,    19,
    20,    21,    22,    23,    -1,    -1,    -1,    27,    28,    29,
    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    43,    44,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,
    60,    61,    62,    63,    -1,    65,    -1,    67,    -1,    -1,
    -1,    -1,    72,    73,    74,    75,     3,     4,     5,     6,
    -1,     8,    -1,    -1,    -1,    85,    13,    -1,    -1,    -1,
    -1,    18,    19,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    -1,    -1,     3,     4,     5,     6,    -1,     8,    -1,
    -1,    -1,    -1,    13,    -1,    -1,    43,    44,    18,    19,
    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,
    -1,    -1,    59,    60,    61,    62,    63,    -1,    65,    -1,
    67,    -1,    -1,    43,    44,    72,    73,    74,    75,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    85,    59,
    60,    61,    62,    63,    -1,    65,    -1,    67,    -1,    -1,
    -1,    -1,    72,    73,    74,    75,    -1,    -1,     0,    -1,
    -1,     3,     4,     5,     6,    85,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    -1,    -1,    27,    28,    29,    -1,    31,
    32,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
    -1,     8,    -1,    -1,    -1,    -1,    13,    -1,    -1,    -1,
    -1,    18,    19,    -1,    21,    -1,    25,    59,    60,    61,
    27,    -1,    -1,    65,    66,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    74,    75,    43,    44,    43,    44,    -1,    48,
    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
    -1,    -1,    59,    60,    61,    62,    63,    -1,    65,    -1,
    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,     3,
     4,     5,     6,    -1,     8,    84,    -1,    -1,    -1,    13,
    -1,    -1,    -1,    -1,    18,    19,    -1,    21,    -1,    -1,
    -1,    -1,    -1,    27,    -1,    -1,     3,     4,     5,     6,
    -1,     8,    -1,    -1,    -1,    -1,    13,    -1,    -1,    43,
    44,    18,    19,    -1,    21,    -1,    -1,    -1,    -1,    -1,
    27,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,
    64,    65,    -1,    67,    -1,    -1,    43,    44,    72,    73,
    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    59,    60,    61,    62,    63,    -1,    65,    -1,
    67,    68,    -1,    -1,    -1,    72,    73,    74,    75,     3,
     4,     5,     6,    -1,     8,    -1,    -1,    -1,    -1,    13,
    -1,    -1,    -1,    -1,    18,    19,    -1,    21,    -1,    -1,
    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,
    -1,    65,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
    74,    75
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 141 "grammar.y"
{ yyval.node = new NullNode(); ;
    break;}
case 2:
#line 142 "grammar.y"
{ yyval.node = new BooleanNode(true); ;
    break;}
case 3:
#line 143 "grammar.y"
{ yyval.node = new BooleanNode(false); ;
    break;}
case 4:
#line 144 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].ival); ;
    break;}
case 5:
#line 145 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].dval); ;
    break;}
case 6:
#line 146 "grammar.y"
{ yyval.node = new StringNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 7:
#line 147 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(l->pattern,l->flags);;
    break;}
case 8:
#line 153 "grammar.y"
{ yyval.node = new ThisNode(); ;
    break;}
case 9:
#line 154 "grammar.y"
{ yyval.node = new ResolveNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 12:
#line 158 "grammar.y"
{ yyval.node = new GroupNode(yyvsp[-1].node); ;
    break;}
case 13:
#line 159 "grammar.y"
{ yyval.node = new ObjectLiteralNode(0L); ;
    break;}
case 14:
#line 160 "grammar.y"
{ yyval.node = new ObjectLiteralNode(yyvsp[-1].node); ;
    break;}
case 15:
#line 164 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].eli); ;
    break;}
case 16:
#line 165 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].elm, 0L); ;
    break;}
case 17:
#line 166 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-3].elm, yyvsp[-1].eli); ;
    break;}
case 18:
#line 170 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 19:
#line 172 "grammar.y"
{ yyval.elm = yyvsp[-3].elm->append(yyvsp[-1].eli, yyvsp[0].node); ;
    break;}
case 20:
#line 176 "grammar.y"
{ yyval.eli = 0L; ;
    break;}
case 22:
#line 181 "grammar.y"
{ yyval.eli = new ElisionNode(0L); ;
    break;}
case 23:
#line 182 "grammar.y"
{ yyval.eli = new ElisionNode(yyvsp[-1].eli); ;
    break;}
case 24:
#line 186 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 25:
#line 188 "grammar.y"
{ yyval.node = new PropertyValueNode(yyvsp[-2].node, yyvsp[0].node, yyvsp[-4].node); ;
    break;}
case 26:
#line 192 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 27:
#line 194 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 28:
#line 195 "grammar.y"
{ yyval.node = new PropertyNode((double)yyvsp[0].ival); ;
    break;}
case 29:
#line 196 "grammar.y"
{ yyval.node = new PropertyNode(yyvsp[0].dval); ;
    break;}
case 31:
#line 201 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 32:
#line 202 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr);
                                     delete yyvsp[0].ustr; ;
    break;}
case 33:
#line 204 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 35:
#line 209 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[0].node); ;
    break;}
case 36:
#line 213 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 37:
#line 214 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 38:
#line 215 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 39:
#line 216 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, yyvsp[0].ustr); ;
    break;}
case 40:
#line 220 "grammar.y"
{ yyval.args = new ArgumentsNode(0L); ;
    break;}
case 41:
#line 221 "grammar.y"
{ yyval.args = new ArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 42:
#line 225 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[0].node); ;
    break;}
case 43:
#line 226 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 47:
#line 236 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 48:
#line 237 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 50:
#line 242 "grammar.y"
{ yyval.node = new DeleteNode(yyvsp[0].node); ;
    break;}
case 51:
#line 243 "grammar.y"
{ yyval.node = new VoidNode(yyvsp[0].node); ;
    break;}
case 52:
#line 244 "grammar.y"
{ yyval.node = new TypeOfNode(yyvsp[0].node); ;
    break;}
case 53:
#line 245 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 54:
#line 246 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 55:
#line 247 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 56:
#line 248 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 57:
#line 249 "grammar.y"
{ yyval.node = new UnaryPlusNode(yyvsp[0].node); ;
    break;}
case 58:
#line 250 "grammar.y"
{ yyval.node = new NegateNode(yyvsp[0].node); ;
    break;}
case 59:
#line 251 "grammar.y"
{ yyval.node = new BitwiseNotNode(yyvsp[0].node); ;
    break;}
case 60:
#line 252 "grammar.y"
{ yyval.node = new LogicalNotNode(yyvsp[0].node); ;
    break;}
case 62:
#line 257 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 63:
#line 258 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 64:
#line 259 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 66:
#line 264 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 67:
#line 265 "grammar.y"
{ yyval.node = new AddNode(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 69:
#line 270 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 70:
#line 271 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 71:
#line 272 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 73:
#line 278 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 74:
#line 280 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 75:
#line 282 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 76:
#line 284 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 77:
#line 286 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 79:
#line 291 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 80:
#line 292 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 81:
#line 293 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 82:
#line 294 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 84:
#line 299 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 86:
#line 304 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 88:
#line 309 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 90:
#line 315 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 92:
#line 321 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 94:
#line 327 "grammar.y"
{ yyval.node = new ConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 96:
#line 333 "grammar.y"
{ yyval.node = new AssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 97:
#line 337 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 98:
#line 338 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 99:
#line 339 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 100:
#line 340 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 101:
#line 341 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 102:
#line 342 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 103:
#line 343 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 104:
#line 344 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 105:
#line 345 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 106:
#line 346 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 107:
#line 347 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 108:
#line 348 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 110:
#line 353 "grammar.y"
{ yyval.node = new CommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 125:
#line 374 "grammar.y"
{ yyval.stat = new BlockNode(0L); ;
    break;}
case 126:
#line 375 "grammar.y"
{ yyval.stat = new BlockNode(yyvsp[-1].slist); ;
    break;}
case 127:
#line 379 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[0].stat); ;
    break;}
case 128:
#line 380 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 129:
#line 384 "grammar.y"
{ yyval.stat = new VarStatementNode(yyvsp[-1].vlist); ;
    break;}
case 130:
#line 385 "grammar.y"
{ if (automatic())
                                          yyval.stat = new VarStatementNode(yyvsp[-1].vlist);
                                        else
					  YYABORT; ;
    break;}
case 131:
#line 392 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[0].decl); ;
    break;}
case 132:
#line 394 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[-2].vlist, yyvsp[0].decl); ;
    break;}
case 133:
#line 398 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[0].ustr, 0); delete yyvsp[0].ustr; ;
    break;}
case 134:
#line 399 "grammar.y"
{ yyval.decl = new VarDeclNode(yyvsp[-1].ustr, yyvsp[0].init); delete yyvsp[-1].ustr; ;
    break;}
case 135:
#line 403 "grammar.y"
{ yyval.init = new AssignExprNode(yyvsp[0].node); ;
    break;}
case 136:
#line 407 "grammar.y"
{ yyval.stat = new EmptyStatementNode(); ;
    break;}
case 137:
#line 411 "grammar.y"
{ yyval.stat = new ExprStatementNode(yyvsp[-1].node); ;
    break;}
case 138:
#line 412 "grammar.y"
{ if (automatic())
                                       yyval.stat = new ExprStatementNode(yyvsp[-1].node);
                                     else
				       YYABORT; ;
    break;}
case 139:
#line 419 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-2].node, yyvsp[0].stat, 0L); ;
    break;}
case 140:
#line 421 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-4].node, yyvsp[-2].stat, yyvsp[0].stat); ;
    break;}
case 141:
#line 425 "grammar.y"
{ yyval.stat = new DoWhileNode(yyvsp[-4].stat, yyvsp[-1].node); ;
    break;}
case 142:
#line 426 "grammar.y"
{ yyval.stat = new WhileNode(yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 143:
#line 428 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].node, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 144:
#line 430 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].vlist, yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 145:
#line 432 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 146:
#line 434 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].ustr, 0L, yyvsp[-2].node, yyvsp[0].stat);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 147:
#line 437 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-5].ustr, yyvsp[-4].init, yyvsp[-2].node, yyvsp[0].stat);
                                     delete yyvsp[-5].ustr; ;
    break;}
case 148:
#line 442 "grammar.y"
{ yyval.node = 0L; ;
    break;}
case 150:
#line 447 "grammar.y"
{ yyval.stat = new ContinueNode(); ;
    break;}
case 151:
#line 448 "grammar.y"
{ yyval.stat = new ContinueNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr; ;
    break;}
case 152:
#line 452 "grammar.y"
{ yyval.stat = new BreakNode(); ;
    break;}
case 153:
#line 453 "grammar.y"
{ yyval.stat = new BreakNode(yyvsp[-1].ustr); delete yyvsp[-1].ustr; ;
    break;}
case 154:
#line 457 "grammar.y"
{ yyval.stat = new ReturnNode(0L); ;
    break;}
case 155:
#line 458 "grammar.y"
{ yyval.stat = new ReturnNode(yyvsp[-1].node); ;
    break;}
case 156:
#line 462 "grammar.y"
{ yyval.stat = new WithNode(yyvsp[-2].node, yyvsp[0].stat); ;
    break;}
case 157:
#line 466 "grammar.y"
{ yyval.stat = new SwitchNode(yyvsp[-2].node, yyvsp[0].cblk); ;
    break;}
case 158:
#line 470 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-1].clist, 0L, 0L); ;
    break;}
case 159:
#line 472 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 160:
#line 476 "grammar.y"
{ yyval.clist = 0L; ;
    break;}
case 162:
#line 481 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[0].ccl); ;
    break;}
case 163:
#line 482 "grammar.y"
{ yyval.clist = yyvsp[-1].clist->append(yyvsp[0].ccl); ;
    break;}
case 164:
#line 486 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-1].node, 0L); ;
    break;}
case 165:
#line 487 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 166:
#line 491 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, 0L);; ;
    break;}
case 167:
#line 492 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0L, yyvsp[0].slist); ;
    break;}
case 168:
#line 496 "grammar.y"
{ yyval.stat = new LabelNode(yyvsp[-2].ustr, yyvsp[0].stat); delete yyvsp[-2].ustr; ;
    break;}
case 169:
#line 500 "grammar.y"
{ yyval.stat = new ThrowNode(0L); ;
    break;}
case 170:
#line 501 "grammar.y"
{ yyval.stat = new ThrowNode(yyvsp[-1].node); ;
    break;}
case 171:
#line 505 "grammar.y"
{ yyval.stat = new TryNode(); /* TODO */ ;
    break;}
case 172:
#line 506 "grammar.y"
{ yyval.stat = new TryNode(); /* TODO */ ;
    break;}
case 173:
#line 507 "grammar.y"
{ yyval.stat = new TryNode(); /* TODO */ ;
    break;}
case 174:
#line 511 "grammar.y"
{ yyval.node = new CatchNode(); /* TODO */ ;
    break;}
case 175:
#line 515 "grammar.y"
{ yyval.node = new FinallyNode(yyvsp[0].stat); ;
    break;}
case 176:
#line 519 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-3].ustr, 0L, yyvsp[0].stat);
                                     delete yyvsp[-3].ustr; ;
    break;}
case 177:
#line 522 "grammar.y"
{ yyval.func = new FuncDeclNode(yyvsp[-4].ustr, yyvsp[-2].param, yyvsp[0].stat);
                                     delete yyvsp[-4].ustr; ;
    break;}
case 178:
#line 527 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[0].ustr); delete yyvsp[0].ustr; ;
    break;}
case 179:
#line 528 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[-2].param, yyvsp[0].ustr);
	                             delete yyvsp[0].ustr; ;
    break;}
case 180:
#line 533 "grammar.y"
{ yyval.prog = new ProgramNode(yyvsp[0].srcs); ;
    break;}
case 181:
#line 537 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[0].src); ;
    break;}
case 182:
#line 538 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[-1].srcs, yyvsp[0].src); ;
    break;}
case 183:
#line 542 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].stat); ;
    break;}
case 184:
#line 543 "grammar.y"
{ yyval.src = new SourceElementNode(yyvsp[0].func); ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 546 "grammar.y"


int yyerror (const char *)  /* Called by yyparse on error */
{
//  fprintf(stderr, "ERROR: %s at line %d\n",
//	  s, KJScript::lexer()->lineNo());
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if (yychar == '}')
    return true;
  else if (Lexer::curr()->prevTerminator())
    return true;

  return false;
}
