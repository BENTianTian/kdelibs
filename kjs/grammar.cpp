/* A Bison parser, made from grammar.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

#define yyparse kjsyyparse
#define yylex kjsyylex
#define yyerror kjsyyerror
#define yylval kjsyylval
#define yychar kjsyychar
#define yydebug kjsyydebug
#define yynerrs kjsyynerrs
#define YYLSP_NEEDED 1

# define	NULLTOKEN	257
# define	TRUETOKEN	258
# define	FALSETOKEN	259
# define	STRING	260
# define	NUMBER	261
# define	BREAK	262
# define	CASE	263
# define	DEFAULT	264
# define	FOR	265
# define	NEW	266
# define	VAR	267
# define	CONST	268
# define	CONTINUE	269
# define	FUNCTION	270
# define	RETURN	271
# define	VOID	272
# define	DELETE	273
# define	IF	274
# define	THIS	275
# define	DO	276
# define	WHILE	277
# define	ELSE	278
# define	IN	279
# define	INSTANCEOF	280
# define	TYPEOF	281
# define	SWITCH	282
# define	WITH	283
# define	RESERVED	284
# define	THROW	285
# define	TRY	286
# define	CATCH	287
# define	FINALLY	288
# define	EQEQ	289
# define	NE	290
# define	STREQ	291
# define	STRNEQ	292
# define	LE	293
# define	GE	294
# define	OR	295
# define	AND	296
# define	PLUSPLUS	297
# define	MINUSMINUS	298
# define	LSHIFT	299
# define	RSHIFT	300
# define	URSHIFT	301
# define	PLUSEQUAL	302
# define	MINUSEQUAL	303
# define	MULTEQUAL	304
# define	DIVEQUAL	305
# define	LSHIFTEQUAL	306
# define	RSHIFTEQUAL	307
# define	URSHIFTEQUAL	308
# define	ANDEQUAL	309
# define	MODEQUAL	310
# define	XOREQUAL	311
# define	OREQUAL	312
# define	IDENT	313
# define	AUTOPLUSPLUS	314
# define	AUTOMINUSMINUS	315

#line 1 "grammar.y"


/*
 *  This file is part of the KDE libraries
 *  Copyright (C) 1999-2000 Harri Porten (porten@kde.org)
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif
#include <string.h>
#include <stdlib.h>
#include "value.h"
#include "object.h"
#include "types.h"
#include "interpreter.h"
#include "nodes.h"
#include "lexer.h"
#include "internal.h"

/* default values for bison */
#define YYDEBUG 0
#define YYMAXDEPTH 0
#define YYERROR_VERBOSE
#define DBG(l, s, e) { l->setLoc(s.first_line, e.last_line, Parser::source); } // location

extern int yylex();
static int yyerror (const char *);
static bool automatic();

using namespace KJS;


#line 50 "grammar.y"
#ifndef YYSTYPE
typedef union {
  int                 ival;
  double              dval;
  UString             *ustr;
  Identifier          *ident;
  Node                *node;
  StatementNode       *stat;
  ParameterNode       *param;
  FunctionBodyNode    *body;
  FuncDeclNode        *func;
  FunctionBodyNode    *prog;
  AssignExprNode      *init;
  SourceElementsNode  *srcs;
  StatListNode        *slist;
  ArgumentsNode       *args;
  ArgumentListNode    *alist;
  VarDeclNode         *decl;
  VarDeclListNode     *vlist;
  CaseBlockNode       *cblk;
  ClauseListNode      *clist;
  CaseClauseNode      *ccl;
  ElementNode         *elm;
  Operator            op;
  PropertyValueNode   *plist;
  PropertyNode        *pnode;
  CatchNode           *cnode;
  FinallyNode         *fnode;
  VarStatementNode::Type vtype;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif

#ifndef YYLTYPE
typedef struct yyltype
{
  int first_line;
  int first_column;

  int last_line;
  int last_column;
} yyltype;

# define YYLTYPE yyltype
# define YYLTYPE_IS_TRIVIAL 1
#endif

#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		364
#define	YYFLAG		-32768
#define	YYNTBASE	86

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 315 ? yytranslate[x] : 152)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    75,     2,     2,     2,    77,    80,     2,
      63,    64,    76,    72,    69,    73,    71,    62,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    70,    85,
      78,    84,    79,    83,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    67,     2,    68,    81,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    65,    82,    66,    74,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,     8,    10,    12,    14,    16,
      18,    20,    22,    26,    29,    33,    37,    41,    47,    50,
      55,    56,    58,    60,    63,    67,    73,    75,    77,    79,
      81,    83,    88,    92,    96,    98,   101,   104,   107,   112,
     116,   119,   123,   125,   129,   131,   133,   135,   138,   141,
     143,   146,   149,   152,   155,   158,   161,   164,   167,   170,
     173,   176,   178,   182,   186,   190,   192,   196,   200,   202,
     206,   210,   214,   216,   220,   224,   228,   232,   236,   240,
     242,   246,   250,   254,   258,   260,   264,   266,   270,   272,
     276,   278,   282,   284,   288,   290,   296,   298,   302,   304,
     306,   308,   310,   312,   314,   316,   318,   320,   322,   324,
     326,   328,   332,   334,   336,   338,   340,   342,   344,   346,
     348,   350,   352,   354,   356,   358,   360,   363,   367,   369,
     372,   374,   376,   380,   384,   386,   390,   392,   395,   398,
     400,   403,   406,   412,   420,   427,   433,   443,   454,   462,
     471,   481,   482,   484,   487,   490,   494,   498,   501,   504,
     508,   512,   515,   518,   522,   526,   532,   538,   542,   548,
     549,   551,   553,   556,   560,   565,   568,   572,   576,   580,
     584,   588,   592,   597,   603,   606,   608,   611,   617,   624,
     629,   635,   637,   641,   644,   648,   649,   651,   653,   656,
     658
};
static const short yyrhs[] =
{
       3,     0,     4,     0,     5,     0,     7,     0,     6,     0,
      62,     0,    51,     0,    21,     0,    59,     0,    86,     0,
      88,     0,    63,   115,    64,     0,    65,    66,     0,    65,
      92,    66,     0,    67,    90,    68,     0,    67,    89,    68,
       0,    67,    89,    69,    90,    68,     0,    90,   113,     0,
      89,    69,    90,   113,     0,     0,    91,     0,    69,     0,
      91,    69,     0,    93,    70,   113,     0,    92,    69,    93,
      70,   113,     0,    59,     0,     6,     0,     7,     0,    87,
       0,   146,     0,    94,    67,   115,    68,     0,    94,    71,
      59,     0,    12,    94,    97,     0,    94,     0,    12,    95,
       0,    94,    97,     0,    96,    97,     0,    96,    67,   115,
      68,     0,    96,    71,    59,     0,    63,    64,     0,    63,
      98,    64,     0,   113,     0,    98,    69,   113,     0,    95,
       0,    96,     0,    99,     0,    99,    43,     0,    99,    44,
       0,   100,     0,    19,   101,     0,    18,   101,     0,    27,
     101,     0,    43,   101,     0,    60,   101,     0,    44,   101,
       0,    61,   101,     0,    72,   101,     0,    73,   101,     0,
      74,   101,     0,    75,   101,     0,   101,     0,   102,    76,
     101,     0,   102,    62,   101,     0,   102,    77,   101,     0,
     102,     0,   103,    72,   102,     0,   103,    73,   102,     0,
     103,     0,   104,    45,   103,     0,   104,    46,   103,     0,
     104,    47,   103,     0,   104,     0,   105,    78,   104,     0,
     105,    79,   104,     0,   105,    39,   104,     0,   105,    40,
     104,     0,   105,    26,   104,     0,   105,    25,   104,     0,
     105,     0,   106,    35,   105,     0,   106,    36,   105,     0,
     106,    37,   105,     0,   106,    38,   105,     0,   106,     0,
     107,    80,   106,     0,   107,     0,   108,    81,   107,     0,
     108,     0,   109,    82,   108,     0,   109,     0,   110,    42,
     109,     0,   110,     0,   111,    41,   110,     0,   111,     0,
     111,    83,   113,    70,   113,     0,   112,     0,    99,   114,
     113,     0,    84,     0,    48,     0,    49,     0,    50,     0,
      51,     0,    52,     0,    53,     0,    54,     0,    55,     0,
      57,     0,    58,     0,    56,     0,   113,     0,   115,    69,
     113,     0,   117,     0,   120,     0,   124,     0,   125,     0,
     126,     0,   127,     0,   129,     0,   130,     0,   131,     0,
     132,     0,   133,     0,   139,     0,   140,     0,   141,     0,
      65,    66,     0,    65,   150,    66,     0,   116,     0,   118,
     116,     0,    13,     0,    14,     0,   119,   121,    85,     0,
     119,   121,     1,     0,   122,     0,   121,    69,   122,     0,
      59,     0,    59,   123,     0,    84,   113,     0,    85,     0,
     115,    85,     0,   115,     1,     0,    20,    63,   115,    64,
     116,     0,    20,    63,   115,    64,   116,    24,   116,     0,
      22,   116,    23,    63,   115,    64,     0,    23,    63,   115,
      64,   116,     0,    11,    63,   128,    85,   128,    85,   128,
      64,   116,     0,    11,    63,    13,   121,    85,   128,    85,
     128,    64,   116,     0,    11,    63,    99,    25,   115,    64,
     116,     0,    11,    63,    13,    59,    25,   115,    64,   116,
       0,    11,    63,    13,    59,   123,    25,   115,    64,   116,
       0,     0,   115,     0,    15,    85,     0,    15,     1,     0,
      15,    59,    85,     0,    15,    59,     1,     0,     8,    85,
       0,     8,     1,     0,     8,    59,    85,     0,     8,    59,
       1,     0,    17,    85,     0,    17,     1,     0,    17,   115,
      85,     0,    17,   115,     1,     0,    29,    63,   115,    64,
     116,     0,    28,    63,   115,    64,   134,     0,    65,   135,
      66,     0,    65,   135,   138,   135,    66,     0,     0,   136,
       0,   137,     0,   136,   137,     0,     9,   115,    70,     0,
       9,   115,    70,   118,     0,    10,    70,     0,    10,    70,
     118,     0,    59,    70,   116,     0,    31,   115,    85,     0,
      31,   115,     1,     0,    32,   117,   142,     0,    32,   117,
     143,     0,    32,   117,   142,   143,     0,    33,    63,    59,
      64,   117,     0,    34,   117,     0,   145,     0,    18,   145,
       0,    16,    59,    63,    64,   148,     0,    16,    59,    63,
     147,    64,   148,     0,    16,    63,    64,   148,     0,    16,
      63,   147,    64,   148,     0,    59,     0,   147,    69,    59,
       0,    65,    66,     0,    65,   150,    66,     0,     0,   150,
       0,   151,     0,   150,   151,     0,   116,     0,   144,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   167,   169,   170,   171,   172,   173,   176,   182,   184,
     185,   186,   187,   188,   189,   192,   194,   195,   198,   200,
     204,   206,   209,   211,   214,   216,   220,   222,   223,   226,
     228,   229,   230,   231,   234,   236,   239,   241,   242,   243,
     246,   248,   251,   253,   256,   258,   261,   263,   264,   267,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   282,   284,   285,   286,   289,   291,   292,   295,   297,
     298,   299,   302,   304,   306,   308,   310,   312,   314,   318,
     320,   321,   322,   323,   326,   328,   331,   333,   336,   338,
     341,   343,   347,   349,   353,   355,   359,   361,   365,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
     380,   382,   385,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   402,   404,   407,   409,
     412,   414,   417,   420,   429,   431,   435,   437,   440,   444,
     448,   451,   458,   460,   464,   466,   467,   470,   473,   476,
     479,   484,   486,   489,   491,   495,   496,   502,   504,   508,
     509,   516,   518,   522,   523,   530,   535,   540,   542,   546,
     548,   551,   553,   556,   558,   561,   563,   566,   571,   573,
     579,   581,   582,   585,   590,   594,   597,   600,   602,   606,
     608,   613,   615,   618,   621,   625,   629,   633,   635,   638,
     640
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "NULLTOKEN", "TRUETOKEN", "FALSETOKEN", 
  "STRING", "NUMBER", "BREAK", "CASE", "DEFAULT", "FOR", "NEW", "VAR", 
  "CONST", "CONTINUE", "FUNCTION", "RETURN", "VOID", "DELETE", "IF", 
  "THIS", "DO", "WHILE", "ELSE", "IN", "INSTANCEOF", "TYPEOF", "SWITCH", 
  "WITH", "RESERVED", "THROW", "TRY", "CATCH", "FINALLY", "EQEQ", "NE", 
  "STREQ", "STRNEQ", "LE", "GE", "OR", "AND", "PLUSPLUS", "MINUSMINUS", 
  "LSHIFT", "RSHIFT", "URSHIFT", "PLUSEQUAL", "MINUSEQUAL", "MULTEQUAL", 
  "DIVEQUAL", "LSHIFTEQUAL", "RSHIFTEQUAL", "URSHIFTEQUAL", "ANDEQUAL", 
  "MODEQUAL", "XOREQUAL", "OREQUAL", "IDENT", "AUTOPLUSPLUS", 
  "AUTOMINUSMINUS", "'/'", "'('", "')'", "'{'", "'}'", "'['", "']'", 
  "','", "':'", "'.'", "'+'", "'-'", "'~'", "'!'", "'*'", "'%'", "'<'", 
  "'>'", "'&'", "'^'", "'|'", "'?'", "'='", "';'", "Literal", 
  "PrimaryExpr", "ArrayLiteral", "ElementList", "ElisionOpt", "Elision", 
  "PropertyNameAndValueList", "PropertyName", "MemberExpr", "NewExpr", 
  "CallExpr", "Arguments", "ArgumentList", "LeftHandSideExpr", 
  "PostfixExpr", "UnaryExpr", "MultiplicativeExpr", "AdditiveExpr", 
  "ShiftExpr", "RelationalExpr", "EqualityExpr", "BitwiseANDExpr", 
  "BitwiseXORExpr", "BitwiseORExpr", "LogicalANDExpr", "LogicalORExpr", 
  "ConditionalExpr", "AssignmentExpr", "AssignmentOperator", "Expr", 
  "Statement", "Block", "StatementList", "Var", "VariableStatement", 
  "VariableDeclarationList", "VariableDeclaration", "Initializer", 
  "EmptyStatement", "ExprStatement", "IfStatement", "IterationStatement", 
  "ExprOpt", "ContinueStatement", "BreakStatement", "ReturnStatement", 
  "WithStatement", "SwitchStatement", "CaseBlock", "CaseClausesOpt", 
  "CaseClauses", "CaseClause", "DefaultClause", "LabelledStatement", 
  "ThrowStatement", "TryStatement", "Catch", "Finally", 
  "FunctionDeclaration", "FunctionDeclarationInternal", "FunctionExpr", 
  "FormalParameterList", "FunctionBody", "Program", "SourceElements", 
  "SourceElement", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    86,    86,    86,    86,    86,    86,    86,    87,    87,
      87,    87,    87,    87,    87,    88,    88,    88,    89,    89,
      90,    90,    91,    91,    92,    92,    93,    93,    93,    94,
      94,    94,    94,    94,    95,    95,    96,    96,    96,    96,
      97,    97,    98,    98,    99,    99,   100,   100,   100,   101,
     101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
     101,   102,   102,   102,   102,   103,   103,   103,   104,   104,
     104,   104,   105,   105,   105,   105,   105,   105,   105,   106,
     106,   106,   106,   106,   107,   107,   108,   108,   109,   109,
     110,   110,   111,   111,   112,   112,   113,   113,   114,   114,
     114,   114,   114,   114,   114,   114,   114,   114,   114,   114,
     115,   115,   116,   116,   116,   116,   116,   116,   116,   116,
     116,   116,   116,   116,   116,   116,   117,   117,   118,   118,
     119,   119,   120,   120,   121,   121,   122,   122,   123,   124,
     125,   125,   126,   126,   127,   127,   127,   127,   127,   127,
     127,   128,   128,   129,   129,   129,   129,   130,   130,   130,
     130,   131,   131,   131,   131,   132,   133,   134,   134,   135,
     135,   136,   136,   137,   137,   138,   138,   139,   140,   140,
     141,   141,   141,   142,   143,   144,   144,   145,   145,   146,
     146,   147,   147,   148,   148,   149,   149,   150,   150,   151,
     151
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     3,     3,     3,     5,     2,     4,
       0,     1,     1,     2,     3,     5,     1,     1,     1,     1,
       1,     4,     3,     3,     1,     2,     2,     2,     4,     3,
       2,     3,     1,     3,     1,     1,     1,     2,     2,     1,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     1,     3,     3,     3,     1,     3,     3,     1,     3,
       3,     3,     1,     3,     3,     3,     3,     3,     3,     1,
       3,     3,     3,     3,     1,     3,     1,     3,     1,     3,
       1,     3,     1,     3,     1,     5,     1,     3,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     3,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     3,     1,     2,
       1,     1,     3,     3,     1,     3,     1,     2,     2,     1,
       2,     2,     5,     7,     6,     5,     9,    10,     7,     8,
       9,     0,     1,     2,     2,     3,     3,     2,     2,     3,
       3,     2,     2,     3,     3,     5,     5,     3,     5,     0,
       1,     1,     2,     3,     4,     2,     3,     3,     3,     3,
       3,     3,     4,     5,     2,     1,     2,     5,     6,     4,
       5,     1,     3,     2,     3,     0,     1,     1,     2,     1,
       1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
     195,     1,     2,     3,     5,     4,     0,     0,     0,   130,
     131,     0,     0,     0,     0,     0,     0,     8,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     7,     9,     0,
       0,     6,     0,     0,    20,     0,     0,     0,     0,   139,
      10,    29,    11,    34,    44,    45,    46,    49,    61,    65,
      68,    72,    79,    84,    86,    88,    90,    92,    94,    96,
     110,     0,   199,   112,     0,   113,   114,   115,   116,   117,
     118,   119,   120,   121,   122,   123,   124,   125,   200,   185,
      30,   196,   197,   158,     0,   157,   151,     0,     9,     0,
      34,    35,   154,     0,   153,     0,     0,   162,     0,   161,
       0,    46,    51,   186,    50,     0,     0,     0,    52,     0,
       0,     0,     0,     0,    53,    55,     0,    54,    56,     0,
       5,     4,     9,    13,     0,     0,     0,    22,     0,     0,
      21,    57,    58,    59,    60,     0,     0,     0,    36,     0,
       0,    37,    47,    48,    99,   100,   101,   102,   103,   104,
     105,   106,   109,   107,   108,    98,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   141,     0,   140,   136,     0,   134,   198,   160,   159,
       0,    46,   152,     0,    27,    28,    26,    13,    33,   156,
     155,     0,   191,     0,     0,   164,   163,     0,     0,     0,
       0,     0,   179,   178,   126,     0,     0,   180,   181,   177,
      12,    14,     0,     0,   127,    16,    20,    15,    18,    23,
      40,     0,    42,     0,    32,     0,    39,    97,    63,    62,
      64,    66,    67,    69,    70,    71,    78,    77,    75,    76,
      73,    74,    80,    81,    82,    83,    85,    87,    89,    91,
      93,     0,   111,     0,   137,   133,     0,   132,   136,     0,
       0,   151,     0,     0,     0,   189,     0,     0,     0,     0,
       0,     0,     0,     0,   184,   182,     0,    24,     0,    41,
       0,    31,    38,     0,   138,   135,     0,   137,   151,     0,
       0,   187,     0,   193,     0,   190,   192,   142,     0,   145,
     169,   166,   165,     0,     0,    17,    19,    43,    95,     0,
       0,     0,     0,   151,   188,   194,     0,   144,     0,     0,
     170,   171,     0,    25,     0,     0,   151,   148,     0,   143,
       0,     0,   167,   169,   172,   183,   149,     0,     0,     0,
     173,   175,     0,   150,     0,   146,   128,   174,   176,   168,
     147,   129,     0,     0,     0
};

static const short yydefgoto[] =
{
      40,    41,    42,   128,   129,   130,   124,   125,    43,    44,
      45,   138,   231,    46,    47,    48,    49,    50,    51,    52,
      53,    54,    55,    56,    57,    58,    59,    60,   156,    61,
      62,    63,   357,    64,    65,   185,   186,   264,    66,    67,
      68,    69,   193,    70,    71,    72,    73,    74,   311,   329,
     330,   331,   343,    75,    76,    77,   217,   218,    78,    79,
      80,   204,   275,   362,   126,    82
};

static const short yypact[] =
{
     713,-32768,-32768,-32768,-32768,-32768,     6,   -40,   123,-32768,
  -32768,     7,   -14,   228,  1198,  1271,   -17,-32768,   788,    -7,
    1271,     9,    15,  1271,    -5,  1271,  1271,-32768,    25,  1271,
    1271,-32768,  1271,   338,    41,  1271,  1271,  1271,  1271,-32768,
  -32768,-32768,-32768,    48,-32768,    49,   959,-32768,-32768,   -22,
      59,   191,    11,   183,    45,    64,    78,   127,    -3,-32768,
  -32768,     8,-32768,-32768,   117,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   713,-32768,-32768,    21,-32768,   906,   118,-32768,    55,
      48,-32768,-32768,    28,-32768,   124,    23,-32768,  1271,-32768,
      12,    99,-32768,-32768,-32768,  1271,   166,  1271,-32768,  1271,
    1271,    16,   413,   145,-32768,-32768,   788,-32768,-32768,    53,
     122,   160,    25,   871,   -34,   169,   488,-32768,   115,   979,
     125,-32768,-32768,-32768,-32768,  1052,  1271,   186,-32768,  1271,
     189,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,  1271,  1271,  1271,  1271,
    1271,  1271,  1271,  1271,  1271,  1271,  1271,  1271,  1271,  1271,
    1271,  1271,  1271,  1271,  1271,  1271,  1271,  1271,  1271,  1271,
    1271,-32768,  1271,-32768,   168,    17,-32768,-32768,-32768,-32768,
     199,  1304,   190,   176,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    40,-32768,   198,    54,-32768,-32768,    69,   202,    77,
      92,    93,-32768,-32768,-32768,   203,    -5,   233,-32768,-32768,
  -32768,-32768,    35,  1271,-32768,-32768,    41,-32768,-32768,-32768,
  -32768,    94,-32768,   159,-32768,   182,-32768,-32768,-32768,-32768,
  -32768,   -22,   -22,    59,    59,    59,   191,   191,   191,   191,
     191,   191,    11,    11,    11,    11,   183,    45,    64,    78,
     127,   200,-32768,  1271,-32768,-32768,   117,-32768,    -1,   -38,
    1271,  1271,   198,    95,   563,-32768,   198,   214,   788,  1271,
     788,   209,   788,   216,-32768,-32768,   208,-32768,  1125,-32768,
    1271,-32768,-32768,  1271,-32768,-32768,  1271,   255,  1271,   102,
     196,-32768,   198,-32768,   638,-32768,-32768,   258,   104,-32768,
     274,-32768,-32768,   220,  1271,-32768,-32768,-32768,-32768,   108,
    1271,   201,   788,  1271,-32768,-32768,   788,-32768,  1271,     4,
     274,-32768,    -5,-32768,   788,   111,  1271,-32768,   221,-32768,
     184,   222,-32768,   274,-32768,-32768,-32768,   788,   234,   788,
     788,   788,   231,-32768,   788,-32768,-32768,   788,   788,-32768,
  -32768,-32768,   299,   305,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,    80,-32768,-32768,    85,   302,   303,
  -32768,   -11,-32768,    38,-32768,   -10,    96,    79,   -15,    51,
     137,   138,   140,   141,   136,-32768,-32768,  -123,-32768,    -2,
     -18,   -23,   -31,-32768,-32768,   132,    57,    56,-32768,-32768,
  -32768,-32768,  -227,-32768,-32768,-32768,-32768,-32768,-32768,   -16,
  -32768,     0,-32768,-32768,-32768,-32768,-32768,   120,-32768,   311,
  -32768,   134,  -233,-32768,     2,   -78
};


#define	YYLAST		1388


static const short yytable[] =
{
     106,   113,    81,   187,   102,   104,   228,    83,    92,   181,
     108,   100,   232,   205,   341,   114,   115,   212,   265,   117,
     118,   111,   188,    86,   296,   131,   132,   133,   134,   199,
     119,   266,   221,   237,   141,   222,   165,   166,   179,   301,
     157,   194,   195,   305,   300,    95,   105,   298,   187,    96,
     167,   168,   101,   101,   158,   159,   107,   261,   101,   262,
     112,   194,   195,   101,   101,    84,    93,   101,   101,   324,
     342,   321,   109,   101,   101,   101,   101,   182,   110,   198,
     180,   182,   202,   263,   192,   182,   266,   203,   102,   169,
     170,    85,    94,   183,   196,   116,   338,   206,   219,   202,
     287,   213,   267,   207,   272,   209,   189,   210,   211,   348,
     127,   135,   135,   200,   196,   136,   139,   220,   276,   137,
     140,   197,   182,   277,   191,   175,     1,     2,     3,     4,
       5,   160,   161,   278,   233,     8,   101,   235,   182,    87,
     294,   280,   142,   143,    17,   176,   182,   238,   239,   240,
     246,   247,   248,   249,   250,   251,   281,   282,   289,   302,
     177,   182,   182,   290,   277,   316,   322,   317,   327,   178,
     318,   182,   334,   182,    27,   347,   184,   182,   215,   216,
     182,    96,    88,   225,   226,    31,    32,   201,    89,   208,
      34,   333,   -27,   284,   229,   101,   101,   101,   101,   101,
     101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
     101,   101,   101,   101,   101,   101,   101,   101,   171,   172,
     173,   174,   252,   253,   254,   255,   187,   291,   182,    97,
     -28,     1,     2,     3,     4,     5,   162,   163,   164,   223,
       8,   243,   244,   245,    87,   234,    98,    15,   236,    17,
     292,   182,   263,   182,   350,    20,   241,   242,   268,   182,
     307,   271,   309,   274,   312,   279,   283,   216,   299,   192,
     293,    25,    26,   306,   310,   313,   304,   308,   314,    27,
     320,   323,   326,   328,   332,   349,   336,    88,    29,    30,
      31,    32,   351,    89,   319,    34,   192,   359,   354,   363,
      35,    36,    37,    38,   337,   364,   288,   286,   339,   345,
      90,    91,   256,    99,   257,   260,   346,   258,   335,   259,
     358,   192,   269,   295,   297,   103,   340,   352,     0,   353,
     344,   355,   356,   356,   192,   273,   360,   285,     0,   361,
     361,     1,     2,     3,   120,   121,     6,     0,     0,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,     0,     0,     0,    20,    21,    22,     0,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,   122,    29,    30,
      31,    32,     0,    33,   123,    34,     0,     0,     0,     0,
      35,    36,    37,    38,     0,     0,     1,     2,     3,     4,
       5,     6,     0,    39,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
      20,    21,    22,     0,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    26,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,    30,    31,    32,     0,    33,   214,
      34,     0,     0,     0,     0,    35,    36,    37,    38,     0,
       0,     1,     2,     3,     4,     5,     6,     0,    39,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,     0,     0,     0,    20,    21,    22,     0,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,   224,    34,     0,     0,     0,     0,
      35,    36,    37,    38,     0,     0,     1,     2,     3,     4,
       5,     6,     0,    39,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
      20,    21,    22,     0,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    26,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,    30,    31,    32,     0,    33,   303,
      34,     0,     0,     0,     0,    35,    36,    37,    38,     0,
       0,     1,     2,     3,     4,     5,     6,     0,    39,     7,
       8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,     0,     0,     0,    20,    21,    22,     0,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,   325,    34,     0,     0,     0,     0,
      35,    36,    37,    38,     0,     0,     1,     2,     3,     4,
       5,     6,     0,    39,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,     0,     0,     0,
      20,    21,    22,     0,    23,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,    26,     0,     0,
       0,     0,     0,     0,    27,     0,     0,     0,     0,     0,
       0,     0,    28,    29,    30,    31,    32,     0,    33,     0,
      34,     0,     0,     0,     0,    35,    36,    37,    38,     0,
       0,     1,     2,     3,     4,     5,     6,     0,    39,     7,
       8,     9,    10,    11,    87,    13,    98,    15,    16,    17,
      18,    19,     0,     0,     0,    20,    21,    22,     0,    23,
      24,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    28,    29,    30,
      31,    32,     0,    33,     0,    34,     0,     0,     0,     0,
      35,    36,    37,    38,     0,     0,     0,     0,     0,     0,
       0,  -126,     0,    39,  -126,  -126,  -126,  -126,  -126,  -126,
    -126,  -126,  -126,  -126,  -126,  -126,  -126,  -126,  -126,  -126,
    -126,  -126,  -126,  -126,  -126,  -126,     0,     0,  -126,  -126,
    -126,     0,  -126,  -126,     0,     0,     0,     0,     0,     1,
       2,     3,     4,     5,     0,     0,     0,     0,     8,   190,
       0,     0,    87,     0,    98,    15,     0,    17,     0,     0,
    -126,  -126,  -126,    20,     0,     0,  -126,  -126,     0,     0,
       0,     0,     0,     0,     0,  -126,  -126,     0,     0,    25,
      26,     0,     0,     0,     0,     0,     0,    27,     0,     0,
       0,     0,     0,     0,     0,    88,    29,    30,    31,    32,
       0,    89,     0,    34,     0,     0,     0,     0,    35,    36,
      37,    38,     1,     2,     3,     4,     5,     0,     0,     0,
       0,     8,     0,     0,     0,    87,     0,    98,    15,     0,
      17,     0,   142,   143,     0,     0,    20,   144,   145,   146,
     147,   148,   149,   150,   151,   152,   153,   154,     0,     0,
       0,     0,    25,    26,     0,     0,     0,     0,     0,     0,
      27,     0,     0,     0,     0,     0,     0,     0,    88,    29,
      30,    31,    32,   155,    89,     0,    34,   227,     0,     0,
       0,    35,    36,    37,    38,     1,     2,     3,     4,     5,
       0,     0,     0,     0,     8,     0,     0,     0,    87,     0,
      98,    15,     0,    17,     0,     0,     0,     0,     0,    20,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    25,    26,     0,     0,     0,
       0,     0,     0,    27,     0,     0,     0,     0,     0,     0,
       0,    88,    29,    30,    31,    32,   230,    89,     0,    34,
       0,     0,     0,     0,    35,    36,    37,    38,     1,     2,
       3,     4,     5,     0,     0,     0,     0,     8,     0,     0,
       0,    87,     0,    98,    15,     0,    17,     0,     0,     0,
       0,     0,    20,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,    26,
       0,     0,     0,     0,     0,     0,    27,     0,     0,     0,
       0,     0,     0,     0,    88,    29,    30,    31,    32,     0,
      89,     0,    34,   315,     0,     0,     0,    35,    36,    37,
      38,     1,     2,     3,     4,     5,     0,     0,     0,     0,
       8,     0,     0,     0,    12,     0,    98,    15,     0,    17,
       0,     0,     0,     0,     0,    20,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,    26,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,     0,     0,     0,     0,    88,    29,    30,
      31,    32,     0,    89,     0,    34,     0,     0,     0,     0,
      35,    36,    37,    38,     1,     2,     3,     4,     5,     0,
       0,     0,     0,     8,     0,     0,     0,    87,     0,    98,
      15,     0,    17,     0,     0,     0,     0,     0,    20,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    25,    26,     0,     0,     0,     0,
       0,     0,    27,     0,     0,     0,     0,     0,     0,   270,
      88,    29,    30,    31,    32,     0,    89,     0,    34,     0,
       0,     0,     0,    35,    36,    37,    38,   142,   143,     0,
       0,     0,   144,   145,   146,   147,   148,   149,   150,   151,
     152,   153,   154,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   155
};

static const short yycheck[] =
{
      18,    24,     0,    81,    14,    15,   129,     1,     1,     1,
      20,    13,   135,     1,    10,    25,    26,     1,     1,    29,
      30,    23,     1,    63,    25,    35,    36,    37,    38,     1,
      32,    69,    66,   156,    45,    69,    25,    26,    41,   272,
      62,     6,     7,   276,   271,    59,    63,    85,   126,    63,
      39,    40,    14,    15,    76,    77,    63,   180,    20,   182,
      65,     6,     7,    25,    26,    59,    59,    29,    30,   302,
      66,   298,    63,    35,    36,    37,    38,    69,    63,    90,
      83,    69,    59,    84,    86,    69,    69,    64,    98,    78,
      79,    85,    85,    85,    59,    70,   323,    85,   116,    59,
     223,    85,    85,   105,    64,   107,    85,   109,   110,   336,
      69,    63,    63,    85,    59,    67,    67,    64,    64,    71,
      71,    66,    69,    69,    86,    80,     3,     4,     5,     6,
       7,    72,    73,    64,   136,    12,    98,   139,    69,    16,
     263,    64,    43,    44,    21,    81,    69,   157,   158,   159,
     165,   166,   167,   168,   169,   170,    64,    64,    64,    64,
      82,    69,    69,    69,    69,   288,    64,   290,    64,    42,
     293,    69,    64,    69,    51,    64,    59,    69,    33,    34,
      69,    63,    59,    68,    69,    62,    63,    63,    65,    23,
      67,   314,    70,   216,    69,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
     172,   173,   174,   175,   176,   177,   178,   179,    35,    36,
      37,    38,   171,   172,   173,   174,   304,    68,    69,     1,
      70,     3,     4,     5,     6,     7,    45,    46,    47,    70,
      12,   162,   163,   164,    16,    59,    18,    19,    59,    21,
      68,    69,    84,    69,    70,    27,   160,   161,    59,    69,
     278,    85,   280,    65,   282,    63,    63,    34,   270,   271,
      70,    43,    44,    59,    65,    59,   274,   279,    70,    51,
      25,    85,    24,     9,    64,    64,    85,    59,    60,    61,
      62,    63,    70,    65,   296,    67,   298,    66,    64,     0,
      72,    73,    74,    75,   322,     0,   226,   222,   326,   332,
       8,     8,   175,    85,   176,   179,   334,   177,   320,   178,
     351,   323,   190,   266,   268,    14,   328,   343,    -1,   347,
     330,   349,   350,   351,   336,   201,   354,   217,    -1,   357,
     358,     3,     4,     5,     6,     7,     8,    -1,    -1,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    27,    28,    29,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    85,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      27,    28,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    -1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    85,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    27,    28,    29,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    85,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      27,    28,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    -1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    85,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    27,    28,    29,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,    -1,    -1,     3,     4,     5,     6,
       7,     8,    -1,    85,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    -1,    -1,    -1,
      27,    28,    29,    -1,    31,    32,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    60,    61,    62,    63,    -1,    65,    -1,
      67,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    -1,
      -1,     3,     4,     5,     6,     7,     8,    -1,    85,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    -1,    -1,    -1,    27,    28,    29,    -1,    31,
      32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,
      62,    63,    -1,    65,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,     0,    -1,    85,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,    20,    21,    22,    23,    24,    -1,    -1,    27,    28,
      29,    -1,    31,    32,    -1,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,    -1,    -1,    -1,    -1,    12,    13,
      -1,    -1,    16,    -1,    18,    19,    -1,    21,    -1,    -1,
      59,    60,    61,    27,    -1,    -1,    65,    66,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    74,    75,    -1,    -1,    43,
      44,    -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,
      -1,    65,    -1,    67,    -1,    -1,    -1,    -1,    72,    73,
      74,    75,     3,     4,     5,     6,     7,    -1,    -1,    -1,
      -1,    12,    -1,    -1,    -1,    16,    -1,    18,    19,    -1,
      21,    -1,    43,    44,    -1,    -1,    27,    48,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    -1,    -1,
      -1,    -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,
      61,    62,    63,    84,    65,    -1,    67,    68,    -1,    -1,
      -1,    72,    73,    74,    75,     3,     4,     5,     6,     7,
      -1,    -1,    -1,    -1,    12,    -1,    -1,    -1,    16,    -1,
      18,    19,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    -1,    -1,
      -1,    -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    59,    60,    61,    62,    63,    64,    65,    -1,    67,
      -1,    -1,    -1,    -1,    72,    73,    74,    75,     3,     4,
       5,     6,     7,    -1,    -1,    -1,    -1,    12,    -1,    -1,
      -1,    16,    -1,    18,    19,    -1,    21,    -1,    -1,    -1,
      -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,
      -1,    -1,    -1,    -1,    -1,    -1,    51,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    59,    60,    61,    62,    63,    -1,
      65,    -1,    67,    68,    -1,    -1,    -1,    72,    73,    74,
      75,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
      12,    -1,    -1,    -1,    16,    -1,    18,    19,    -1,    21,
      -1,    -1,    -1,    -1,    -1,    27,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    51,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    59,    60,    61,
      62,    63,    -1,    65,    -1,    67,    -1,    -1,    -1,    -1,
      72,    73,    74,    75,     3,     4,     5,     6,     7,    -1,
      -1,    -1,    -1,    12,    -1,    -1,    -1,    16,    -1,    18,
      19,    -1,    21,    -1,    -1,    -1,    -1,    -1,    27,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    43,    44,    -1,    -1,    -1,    -1,
      -1,    -1,    51,    -1,    -1,    -1,    -1,    -1,    -1,    25,
      59,    60,    61,    62,    63,    -1,    65,    -1,    67,    -1,
      -1,    -1,    -1,    72,    73,    74,    75,    43,    44,    -1,
      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    84
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#ifndef YYPARSE_RETURN_TYPE
#define YYPARSE_RETURN_TYPE int
#endif

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || ((YYLTYPE_IS_TRIVIAL || ! YYLSP_NEEDED) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 319 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
YYPARSE_RETURN_TYPE yyparse (void *);
# else
YYPARSE_RETURN_TYPE yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

YYPARSE_RETURN_TYPE
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 1:
#line 168 "grammar.y"
{ yyval.node = new NullNode(); ;
    break;}
case 2:
#line 169 "grammar.y"
{ yyval.node = new BooleanNode(true); ;
    break;}
case 3:
#line 170 "grammar.y"
{ yyval.node = new BooleanNode(false); ;
    break;}
case 4:
#line 171 "grammar.y"
{ yyval.node = new NumberNode(yyvsp[0].dval); ;
    break;}
case 5:
#line 172 "grammar.y"
{ yyval.node = new StringNode(yyvsp[0].ustr); ;
    break;}
case 6:
#line 173 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(l->pattern,l->flags);;
    break;}
case 7:
#line 177 "grammar.y"
{ Lexer *l = Lexer::curr();
                                     if (!l->scanRegExp()) YYABORT;
                                     yyval.node = new RegExpNode(UString('=')+l->pattern,l->flags);;
    break;}
case 8:
#line 183 "grammar.y"
{ yyval.node = new ThisNode(); ;
    break;}
case 9:
#line 184 "grammar.y"
{ yyval.node = new ResolveNode(*yyvsp[0].ident); ;
    break;}
case 12:
#line 187 "grammar.y"
{ yyval.node = new GroupNode(yyvsp[-1].node); ;
    break;}
case 13:
#line 188 "grammar.y"
{ yyval.node = new ObjectLiteralNode(); ;
    break;}
case 14:
#line 189 "grammar.y"
{ yyval.node = new ObjectLiteralNode(yyvsp[-1].plist); ;
    break;}
case 15:
#line 193 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].ival); ;
    break;}
case 16:
#line 194 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].elm); ;
    break;}
case 17:
#line 195 "grammar.y"
{ yyval.node = new ArrayNode(yyvsp[-1].ival, yyvsp[-3].elm); ;
    break;}
case 18:
#line 199 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-1].ival, yyvsp[0].node); ;
    break;}
case 19:
#line 201 "grammar.y"
{ yyval.elm = new ElementNode(yyvsp[-3].elm, yyvsp[-1].ival, yyvsp[0].node); ;
    break;}
case 20:
#line 205 "grammar.y"
{ yyval.ival = 0; ;
    break;}
case 22:
#line 210 "grammar.y"
{ yyval.ival = 1; ;
    break;}
case 23:
#line 211 "grammar.y"
{ yyval.ival = yyvsp[-1].ival + 1; ;
    break;}
case 24:
#line 215 "grammar.y"
{ yyval.plist = new PropertyValueNode(yyvsp[-2].pnode, yyvsp[0].node); ;
    break;}
case 25:
#line 217 "grammar.y"
{ yyval.plist = new PropertyValueNode(yyvsp[-2].pnode, yyvsp[0].node, yyvsp[-4].plist); ;
    break;}
case 26:
#line 221 "grammar.y"
{ yyval.pnode = new PropertyNode(*yyvsp[0].ident); ;
    break;}
case 27:
#line 222 "grammar.y"
{ yyval.pnode = new PropertyNode(Identifier(*yyvsp[0].ustr)); ;
    break;}
case 28:
#line 223 "grammar.y"
{ yyval.pnode = new PropertyNode(yyvsp[0].dval); ;
    break;}
case 31:
#line 229 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 32:
#line 230 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, *yyvsp[0].ident); ;
    break;}
case 33:
#line 231 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 35:
#line 236 "grammar.y"
{ yyval.node = new NewExprNode(yyvsp[0].node); ;
    break;}
case 36:
#line 240 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 37:
#line 241 "grammar.y"
{ yyval.node = new FunctionCallNode(yyvsp[-1].node, yyvsp[0].args); ;
    break;}
case 38:
#line 242 "grammar.y"
{ yyval.node = new AccessorNode1(yyvsp[-3].node, yyvsp[-1].node); ;
    break;}
case 39:
#line 243 "grammar.y"
{ yyval.node = new AccessorNode2(yyvsp[-2].node, *yyvsp[0].ident); ;
    break;}
case 40:
#line 247 "grammar.y"
{ yyval.args = new ArgumentsNode(); ;
    break;}
case 41:
#line 248 "grammar.y"
{ yyval.args = new ArgumentsNode(yyvsp[-1].alist); ;
    break;}
case 42:
#line 252 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[0].node); ;
    break;}
case 43:
#line 253 "grammar.y"
{ yyval.alist = new ArgumentListNode(yyvsp[-2].alist, yyvsp[0].node); ;
    break;}
case 47:
#line 263 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpPlusPlus); ;
    break;}
case 48:
#line 264 "grammar.y"
{ yyval.node = new PostfixNode(yyvsp[-1].node, OpMinusMinus); ;
    break;}
case 50:
#line 269 "grammar.y"
{ yyval.node = new DeleteNode(yyvsp[0].node); ;
    break;}
case 51:
#line 270 "grammar.y"
{ yyval.node = new VoidNode(yyvsp[0].node); ;
    break;}
case 52:
#line 271 "grammar.y"
{ yyval.node = new TypeOfNode(yyvsp[0].node); ;
    break;}
case 53:
#line 272 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 54:
#line 273 "grammar.y"
{ yyval.node = new PrefixNode(OpPlusPlus, yyvsp[0].node); ;
    break;}
case 55:
#line 274 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 56:
#line 275 "grammar.y"
{ yyval.node = new PrefixNode(OpMinusMinus, yyvsp[0].node); ;
    break;}
case 57:
#line 276 "grammar.y"
{ yyval.node = new UnaryPlusNode(yyvsp[0].node); ;
    break;}
case 58:
#line 277 "grammar.y"
{ yyval.node = new NegateNode(yyvsp[0].node); ;
    break;}
case 59:
#line 278 "grammar.y"
{ yyval.node = new BitwiseNotNode(yyvsp[0].node); ;
    break;}
case 60:
#line 279 "grammar.y"
{ yyval.node = new LogicalNotNode(yyvsp[0].node); ;
    break;}
case 62:
#line 284 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '*'); ;
    break;}
case 63:
#line 285 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node, yyvsp[0].node, '/'); ;
    break;}
case 64:
#line 286 "grammar.y"
{ yyval.node = new MultNode(yyvsp[-2].node,yyvsp[0].node,'%'); ;
    break;}
case 66:
#line 291 "grammar.y"
{ yyval.node = AddNode::create(yyvsp[-2].node, yyvsp[0].node, '+'); ;
    break;}
case 67:
#line 292 "grammar.y"
{ yyval.node = AddNode::create(yyvsp[-2].node, yyvsp[0].node, '-'); ;
    break;}
case 69:
#line 297 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpLShift, yyvsp[0].node); ;
    break;}
case 70:
#line 298 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpRShift, yyvsp[0].node); ;
    break;}
case 71:
#line 299 "grammar.y"
{ yyval.node = new ShiftNode(yyvsp[-2].node, OpURShift, yyvsp[0].node); ;
    break;}
case 73:
#line 305 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLess, yyvsp[0].node); ;
    break;}
case 74:
#line 307 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreater, yyvsp[0].node); ;
    break;}
case 75:
#line 309 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpLessEq, yyvsp[0].node); ;
    break;}
case 76:
#line 311 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpGreaterEq, yyvsp[0].node); ;
    break;}
case 77:
#line 313 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpInstanceOf, yyvsp[0].node); ;
    break;}
case 78:
#line 315 "grammar.y"
{ yyval.node = new RelationalNode(yyvsp[-2].node, OpIn, yyvsp[0].node); ;
    break;}
case 80:
#line 320 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpEqEq, yyvsp[0].node); ;
    break;}
case 81:
#line 321 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpNotEq, yyvsp[0].node); ;
    break;}
case 82:
#line 322 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrEq, yyvsp[0].node); ;
    break;}
case 83:
#line 323 "grammar.y"
{ yyval.node = new EqualNode(yyvsp[-2].node, OpStrNEq, yyvsp[0].node);;
    break;}
case 85:
#line 328 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitAnd, yyvsp[0].node); ;
    break;}
case 87:
#line 333 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitXOr, yyvsp[0].node); ;
    break;}
case 89:
#line 338 "grammar.y"
{ yyval.node = new BitOperNode(yyvsp[-2].node, OpBitOr, yyvsp[0].node); ;
    break;}
case 91:
#line 344 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpAnd, yyvsp[0].node); ;
    break;}
case 93:
#line 350 "grammar.y"
{ yyval.node = new BinaryLogicalNode(yyvsp[-2].node, OpOr, yyvsp[0].node); ;
    break;}
case 95:
#line 356 "grammar.y"
{ yyval.node = new ConditionalNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 97:
#line 362 "grammar.y"
{ yyval.node = new AssignNode(yyvsp[-2].node, yyvsp[-1].op, yyvsp[0].node);;
    break;}
case 98:
#line 366 "grammar.y"
{ yyval.op = OpEqual; ;
    break;}
case 99:
#line 367 "grammar.y"
{ yyval.op = OpPlusEq; ;
    break;}
case 100:
#line 368 "grammar.y"
{ yyval.op = OpMinusEq; ;
    break;}
case 101:
#line 369 "grammar.y"
{ yyval.op = OpMultEq; ;
    break;}
case 102:
#line 370 "grammar.y"
{ yyval.op = OpDivEq; ;
    break;}
case 103:
#line 371 "grammar.y"
{ yyval.op = OpLShift; ;
    break;}
case 104:
#line 372 "grammar.y"
{ yyval.op = OpRShift; ;
    break;}
case 105:
#line 373 "grammar.y"
{ yyval.op = OpURShift; ;
    break;}
case 106:
#line 374 "grammar.y"
{ yyval.op = OpAndEq; ;
    break;}
case 107:
#line 375 "grammar.y"
{ yyval.op = OpXOrEq; ;
    break;}
case 108:
#line 376 "grammar.y"
{ yyval.op = OpOrEq; ;
    break;}
case 109:
#line 377 "grammar.y"
{ yyval.op = OpModEq; ;
    break;}
case 111:
#line 382 "grammar.y"
{ yyval.node = new CommaNode(yyvsp[-2].node, yyvsp[0].node); ;
    break;}
case 126:
#line 403 "grammar.y"
{ yyval.stat = new BlockNode(0); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 127:
#line 404 "grammar.y"
{ yyval.stat = new BlockNode(yyvsp[-1].srcs); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 128:
#line 408 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[0].stat); ;
    break;}
case 129:
#line 409 "grammar.y"
{ yyval.slist = new StatListNode(yyvsp[-1].slist, yyvsp[0].stat); ;
    break;}
case 130:
#line 413 "grammar.y"
{ yyval.vtype = VarStatementNode::Variable; ;
    break;}
case 131:
#line 414 "grammar.y"
{ yyval.vtype = VarStatementNode::Constant; ;
    break;}
case 132:
#line 418 "grammar.y"
{ yyval.stat = new VarStatementNode(yyvsp[-2].vtype, yyvsp[-1].vlist);
                                      DBG(yyval.stat, yylsp[-2], yylsp[0]); ;
    break;}
case 133:
#line 420 "grammar.y"
{ if (automatic()) {
                                          yyval.stat = new VarStatementNode(yyvsp[-2].vtype, yyvsp[-1].vlist);
					  DBG(yyval.stat, yylsp[-2], yylsp[-1]);
                                        } else {
					  YYABORT;
					}
                                      ;
    break;}
case 134:
#line 430 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[0].decl); ;
    break;}
case 135:
#line 432 "grammar.y"
{ yyval.vlist = new VarDeclListNode(yyvsp[-2].vlist, yyvsp[0].decl); ;
    break;}
case 136:
#line 436 "grammar.y"
{ yyval.decl = new VarDeclNode(*yyvsp[0].ident, 0); ;
    break;}
case 137:
#line 437 "grammar.y"
{ yyval.decl = new VarDeclNode(*yyvsp[-1].ident, yyvsp[0].init); ;
    break;}
case 138:
#line 441 "grammar.y"
{ yyval.init = new AssignExprNode(yyvsp[0].node); ;
    break;}
case 139:
#line 445 "grammar.y"
{ yyval.stat = new EmptyStatementNode(); DBG(yyval.stat, yylsp[0], yylsp[0]); ;
    break;}
case 140:
#line 449 "grammar.y"
{ yyval.stat = new ExprStatementNode(yyvsp[-1].node);
                                     DBG(yyval.stat, yylsp[-1], yylsp[0]); ;
    break;}
case 141:
#line 451 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ExprStatementNode(yyvsp[-1].node);
				       DBG(yyval.stat, yylsp[-1], yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 142:
#line 459 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-2].node,yyvsp[0].stat,0);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 143:
#line 461 "grammar.y"
{ yyval.stat = new IfNode(yyvsp[-4].node,yyvsp[-2].stat,yyvsp[0].stat);DBG(yyval.stat,yylsp[-6],yylsp[-3]); ;
    break;}
case 144:
#line 465 "grammar.y"
{ yyval.stat=new DoWhileNode(yyvsp[-4].stat,yyvsp[-1].node);DBG(yyval.stat,yylsp[-5],yylsp[-3]);;
    break;}
case 145:
#line 466 "grammar.y"
{ yyval.stat = new WhileNode(yyvsp[-2].node,yyvsp[0].stat);DBG(yyval.stat,yylsp[-4],yylsp[-1]); ;
    break;}
case 146:
#line 468 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].node,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]); ;
    break;}
case 147:
#line 471 "grammar.y"
{ yyval.stat = new ForNode(yyvsp[-6].vlist,yyvsp[-4].node,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-9],yylsp[-1]); ;
    break;}
case 148:
#line 474 "grammar.y"
{ yyval.stat = new ForInNode(yyvsp[-4].node, yyvsp[-2].node, yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-6],yylsp[-1]); ;
    break;}
case 149:
#line 477 "grammar.y"
{ yyval.stat = new ForInNode(*yyvsp[-4].ident,0,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-7],yylsp[-1]); ;
    break;}
case 150:
#line 480 "grammar.y"
{ yyval.stat = new ForInNode(*yyvsp[-5].ident,yyvsp[-4].init,yyvsp[-2].node,yyvsp[0].stat);
	                             DBG(yyval.stat,yylsp[-8],yylsp[-1]); ;
    break;}
case 151:
#line 485 "grammar.y"
{ yyval.node = 0; ;
    break;}
case 153:
#line 490 "grammar.y"
{ yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 154:
#line 491 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(); DBG(yyval.stat,yylsp[-1],yylsp[0]);
                                     } else
				       YYABORT; ;
    break;}
case 155:
#line 495 "grammar.y"
{ yyval.stat = new ContinueNode(*yyvsp[-1].ident); DBG(yyval.stat,yylsp[-2],yylsp[0]); ;
    break;}
case 156:
#line 496 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ContinueNode(*yyvsp[-1].ident);DBG(yyval.stat,yylsp[-2],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 157:
#line 503 "grammar.y"
{ yyval.stat = new BreakNode();DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 158:
#line 504 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 159:
#line 508 "grammar.y"
{ yyval.stat = new BreakNode(*yyvsp[-1].ident); DBG(yyval.stat,yylsp[-2],yylsp[0]); ;
    break;}
case 160:
#line 509 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new BreakNode(*yyvsp[-1].ident); DBG(yyval.stat,yylsp[-2],yylsp[-1]);
                                     } else
				       YYABORT;
                                   ;
    break;}
case 161:
#line 517 "grammar.y"
{ yyval.stat = new ReturnNode(0); DBG(yyval.stat,yylsp[-1],yylsp[0]); ;
    break;}
case 162:
#line 518 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ReturnNode(0); DBG(yyval.stat,yylsp[-1],yylsp[-1]);
                                     } else
				       YYABORT; ;
    break;}
case 163:
#line 522 "grammar.y"
{ yyval.stat = new ReturnNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[0]); ;
    break;}
case 164:
#line 523 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ReturnNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[-2]);
                                     }
                                     else
				       YYABORT; ;
    break;}
case 165:
#line 531 "grammar.y"
{ yyval.stat = new WithNode(yyvsp[-2].node,yyvsp[0].stat);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 166:
#line 536 "grammar.y"
{ yyval.stat = new SwitchNode(yyvsp[-2].node, yyvsp[0].cblk);
                                     DBG(yyval.stat, yylsp[-4], yylsp[-1]); ;
    break;}
case 167:
#line 541 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-1].clist, 0, 0); ;
    break;}
case 168:
#line 543 "grammar.y"
{ yyval.cblk = new CaseBlockNode(yyvsp[-3].clist, yyvsp[-2].ccl, yyvsp[-1].clist); ;
    break;}
case 169:
#line 547 "grammar.y"
{ yyval.clist = 0; ;
    break;}
case 171:
#line 552 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[0].ccl); ;
    break;}
case 172:
#line 553 "grammar.y"
{ yyval.clist = new ClauseListNode(yyvsp[-1].clist, yyvsp[0].ccl); ;
    break;}
case 173:
#line 557 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-1].node); ;
    break;}
case 174:
#line 558 "grammar.y"
{ yyval.ccl = new CaseClauseNode(yyvsp[-2].node, yyvsp[0].slist); ;
    break;}
case 175:
#line 562 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0); ;
    break;}
case 176:
#line 563 "grammar.y"
{ yyval.ccl = new CaseClauseNode(0, yyvsp[0].slist); ;
    break;}
case 177:
#line 567 "grammar.y"
{ yyvsp[0].stat->pushLabel(*yyvsp[-2].ident);
                                     yyval.stat = new LabelNode(*yyvsp[-2].ident, yyvsp[0].stat); DBG(yyval.stat,yylsp[-2],yylsp[-1]); ;
    break;}
case 178:
#line 572 "grammar.y"
{ yyval.stat = new ThrowNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[0]); ;
    break;}
case 179:
#line 573 "grammar.y"
{ if (automatic()) {
                                       yyval.stat = new ThrowNode(yyvsp[-1].node); DBG(yyval.stat,yylsp[-2],yylsp[-2]);
                                     } else {
				       YYABORT; } ;
    break;}
case 180:
#line 580 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, yyvsp[0].cnode); DBG(yyval.stat,yylsp[-2],yylsp[-2]); ;
    break;}
case 181:
#line 581 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-1].stat, yyvsp[0].fnode); DBG(yyval.stat,yylsp[-2],yylsp[-2]); ;
    break;}
case 182:
#line 582 "grammar.y"
{ yyval.stat = new TryNode(yyvsp[-2].stat, yyvsp[-1].cnode, yyvsp[0].fnode); DBG(yyval.stat,yylsp[-3],yylsp[-3]); ;
    break;}
case 183:
#line 586 "grammar.y"
{ CatchNode *c; yyval.cnode = c = new CatchNode(*yyvsp[-2].ident, yyvsp[0].stat);
				     DBG(c,yylsp[-4],yylsp[-1]); ;
    break;}
case 184:
#line 591 "grammar.y"
{ FinallyNode *f; yyval.fnode = f = new FinallyNode(yyvsp[0].stat); DBG(f,yylsp[-1],yylsp[-1]); ;
    break;}
case 186:
#line 597 "grammar.y"
{ yyval.func = yyvsp[0].func; ;
    break;}
case 187:
#line 601 "grammar.y"
{ yyval.func = new FuncDeclNode(*yyvsp[-3].ident, yyvsp[0].body); DBG(yyval.func,yylsp[-4],yylsp[-1]); ;
    break;}
case 188:
#line 603 "grammar.y"
{ yyval.func = new FuncDeclNode(*yyvsp[-4].ident, yyvsp[-2].param, yyvsp[0].body); DBG(yyval.func,yylsp[-5],yylsp[-1]); ;
    break;}
case 189:
#line 607 "grammar.y"
{ yyval.node = new FuncExprNode(yyvsp[0].body); ;
    break;}
case 190:
#line 609 "grammar.y"
{ yyval.node = new FuncExprNode(yyvsp[-2].param, yyvsp[0].body); ;
    break;}
case 191:
#line 614 "grammar.y"
{ yyval.param = new ParameterNode(*yyvsp[0].ident); ;
    break;}
case 192:
#line 615 "grammar.y"
{ yyval.param = new ParameterNode(yyvsp[-2].param, *yyvsp[0].ident); ;
    break;}
case 193:
#line 619 "grammar.y"
{ yyval.body = new FunctionBodyNode(0);
	                             DBG(yyval.body, yylsp[-1], yylsp[0]);;
    break;}
case 194:
#line 621 "grammar.y"
{ yyval.body = new FunctionBodyNode(yyvsp[-1].srcs);
	                             DBG(yyval.body, yylsp[-2], yylsp[0]);;
    break;}
case 195:
#line 626 "grammar.y"
{ yyval.prog = new FunctionBodyNode(0);
                                     yyval.prog->setLoc(0, 0, Parser::source);
                                     Parser::progNode = yyval.prog; ;
    break;}
case 196:
#line 629 "grammar.y"
{ yyval.prog = new FunctionBodyNode(yyvsp[0].srcs);
                                     Parser::progNode = yyval.prog; ;
    break;}
case 197:
#line 634 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[0].stat); ;
    break;}
case 198:
#line 635 "grammar.y"
{ yyval.srcs = new SourceElementsNode(yyvsp[-1].srcs, yyvsp[0].stat); ;
    break;}
case 199:
#line 639 "grammar.y"
{ yyval.stat = yyvsp[0].stat; ;
    break;}
case 200:
#line 640 "grammar.y"
{ yyval.stat = yyvsp[0].func; ;
    break;}
}

#line 709 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 643 "grammar.y"


int yyerror (const char *)  /* Called by yyparse on error */
{
//  fprintf(stderr, "ERROR: %s at line %d\n",
//	  s, KJScript::lexer()->lineNo());
  return 1;
}

/* may we automatically insert a semicolon ? */
bool automatic()
{
  if (Lexer::curr()->hadError())
    return false;
  if (yychar == '}' || yychar == 0)
    return true;
  else if (Lexer::curr()->prevTerminator())
    return true;

  return false;
}
