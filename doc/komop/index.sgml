<!doctype linuxdoc system>

<article>

<title>Using KOM / OpenParts HOWTO
<author>Simon Hausmann
<htmlurl url="mailto:hausmann@kde.org" name="<hausmann@kde.org>">
<date>v1.0 18, June 1999
<abstract>
This documentation is meant to help programmers who are already familiar
with the standard Qt/KDE application framework and who are interested in using
the KDE component technology, the KDE Object Model (KOM) and OpenParts, for
their application.  It covers both "why" you should use KOM/OP
and "how" to do so.

<toc>

<sect>Introduction

<p>
This documentation is meant to help programmers who are already familiar with
the standard Qt/KDE application framework and who are interested in using the
KDE component technology, the KDE Object Model (KOM) and OpenParts, for their
application. The goals of using components in case of standard KDE
applications might be:

<itemize>
<item>make several modules of the application re-usable components, being
      available for other applications, not matter in what language they are
      written or on what platform/machine they're running.
<item>make use of OpenPart's embedding facility and its way to manage shared
      GUI elements to provide seamless graphical integration of components in
      applications.
<item>use CORBA and KOM as an easy way of inter-process communication
</itemize>

I recommend reading the
<htmlurl url="http://developer.kde.org/openparts/html/openparts.html" name="article by Torben Weis about KOM/Openparts">
<htmlurl url="mailto:weis@kde.org" name="Torben Weis"> is the
author/creator/master/god of KOM/OpenParts.

<sect>The KDE Object Model (KOM)

<sect1>First ways of communication - the <idx/KOM::Base interface/

<p>
The Base interface and its implementation in <tt/<cdx/libkom// provide the basic
functionality for a standardized communication between CORBA objects using
KOM. This includes

<itemize>
<item>signals and slots, similar to the mechanism used in the Qt toolkit
<item>event handling, including filtering
<item>relatives management
<item>reference counting
</itemize>

<sect1><idx/Signals and Slots/

<p>
KOM supports signals and slots just like in the Qt toolkit, with a few
differences in usage and implementation. The first and biggest difference is
that signals and slots are no more typesafe again, meaning there's no moc
compiler generating meta data for KOM signals/slots to enable type checking at
run-time, when connecting.

Another difference is the way you declare signal and slot functions. Signals
have to be declared with the <tt><cdx/SIGNAL_IMPL/</tt> macro from <tt/<cdx/komBase.h//,
without  specifying any signal arguments. Slot methods have to be defined in
your CORBA  interface description.

For KOM signals the equivalent to the "emit" keyword from Qt is the
<tt><cdx/SIGNAL_CALL/x</tt> macro, were "x" is one of 0, 1, 2, depending on the
number of arguments.
<nidx/KOM::Base/
Example:

In your CORBA interface description:
<verb>
  #include &lt;kom.idl&gt;

  interface FooSender : KOM::Base
  {
    signal void mySignal( in long foobaz );
  };

  interface FooReceiver : KOM::Base
  {
    slot void mySlot( in long gosh );
  };
</verb>

In the implementation of FooSender:
<verb>  FooSender_Impl::FooSender_Impl( ... )
  {
    ...
    SIGNAL_IMPL( "mySignal" );
    ...
  }

  FooSender_Impl::mySignal( CORBA::Long foobaz )
  {
    SIGNAL_CALL1( "mySignal", foobaz );
  }
</verb>

In the implementation of FooReceiver:
<verb>  FooReceiver_Impl::mySlot( CORBA::Long gosh )
  {
    ...
  }
</verb>

First some words about the sender: It is not required to define the signal
in the interface description and to provide an implementation which simply
emits the signal. However in many cases this is recommended, because this makes
it easier for other developers to use your interface because they aren't required
to seek in the implementation sources just to find out about the signals this
object emits. Another way is to simply document the existence of the signal
in the interface description, without defining a method. From the technical
point only the <tt><cdx/SIGNAL_CALL/x</tt> macro counts when emitting the signal.

What's left is connecting and disconnecting. In the above described example it
could like this:
<verb>  ...
  SenderObject->connect( "mySignal", ReceiverObject, "mySlot" );
  ...
  SenderObject->disconnect( "mySignal", ReceiverObject", "mySlot");
</verb>

Well, this is quite self-explaining I think. Just make sure to always disconnect
from your object upon destruction.

<sect1>Events
<p>

An event consists of two elements, the event name, being a string, and an
event argument, being a CORBA::Any value and therefore freely choosable by the
developer.

Events, sent to a specified object, can be imagined as being put through a
pipe until they reach the destination object. This "pipe" is filled with
installed  event filters. There are three kinds of filters.
<itemize>
<item>reading filters ( <tt><cdx/FM_READ/</tt> )
<item>writing filters ( <tt><cdx/FM_WRITE/</tt> )
<item>implementing filters ( <tt><cdx/FM_IMPLEMENT/</tt> )
</itemize>

In the current implementation in KOM these filter modes only specify the order
how the event is processed. When an event is emitted it gets first filtered by
all event filters with the filter mode <tt><cdx/FM_WRITE/</tt>, then followed by
<tt><cdx/FM_IMPLEMENT/</tt> and finally by <tt><cdx/FM_READ/</tt>. Event filters have two
possibilities what they can do with the actual event: They can just
<bf>read</bf> it or they can <bf>discard</bf>  it, which means the event is
discarded and will never receive its destination  object.

The actual event name has a special meaning in regard to event filters.  When
installing an event filter to an object you have to specify, beside a
reference to the filter object and the name of the filter mapping function, a
sequence of so called event type patterns. An event type pattern can be the
name of a  single event as well as a special pattern (see <tt/<cdx/kom.idl// for more
information about event type patterns) .

When an event is meant to be processed by a filter, the specified filter
function gets called, with the event name and the event value as arguments.
This filter function has to return (through a boolean value) whether the event
should be discarded or not.

When all filtering is done and none of the installed filters discarded the
event, it is finally received by the destination object, by calling the
object's <tt/<cdx/event()// method, defined in the <idx/KOM::Base/ interface. The default
implementation does actually nothing, so you may want to re-implement this
virtual function.

The very low-level usage of events is to call the receive/receiveASync methods
of an object for sending an event and to re-implement <cdx/KOMBase::event/ for
mapping an event. But KOM provides some nice macros which simplify the
processing of events.

<sect2>Sending Events
<p>

For sending komBase.h defines some useful <tt><cdx/EMIT_EVENT/</tt> macros, all
using the same syntax:
<verb>EMIT_EVENT_x( destination_object, event_name, event_argument)</verb>

"destination_object" is a reference to the object which is meant to
receive/process the event. The event will be filtered through all event
filters which are installed in this destination object. "event_name" is
self-explaining ;-) . The event argument depends on the specific macro, which
are in particular:

<itemize>
<item><tt>EMIT_EVENT</tt>, the general macro for sending. The event argument is
      required to have a <tt><<=</tt> operator for CORBA::Any defined. You
      will want to use this macro whenever the event argument is a structure
      for example. (and don't forget to compile your idl file with the "--any"
      option, so that the idl compiler generates the necessary operator
      methods)
<item><tt><cdx/EMIT_EVENT_BOOLEAN/</tt>, useful for boolean event arguments. The
      only difference to the <tt>EMIT_EVENT</tt> macro is that it uses
      CORBA::Any::from_boolean for you to convert the boolean value. So it
      doesn't really matter whether you use:

<verb>    EMIT_EVENT( receiver, name, CORBA::Any::from_boolean( value ) );</verb>
      or
<verb>    EMIT_EVENT_BOOLEAN( receiver, name, value );</verb>

<item><tt><cdx/EMIT_EVENT_OCTET/</tt>, similar to EMIT_EVENT_BOOLEAN, useable for
      <cdx/CORBA::Octet/ values.
<item><tt><cdx/EMIT_EVENT_CHAR/</tt>, similar to EMIT_EVENT_BOOLEAN, useable for char
      (<cdx/CORBA::Char/) values.
<item><tt><cdx/EMIT_EVENT_WCHAR/</tt>, similar to EMIT_EVENT_BOOLEAN, useable for
      <cdx/CORBA::WChar/ values.
<item><tt><cdx/EMIT_EVENT_STRING/</tt>, similar to EMIT_EVENT_BOOLEAN, useable for
      char * (<cdx/CORBA::Char*/) values.
<item><tt><cdx/EMIT_EVENT_WSTRING/</tt>, similar to EMIT_EVENT_BOOLEAN, useable for
      <cdx/CORBA::WChar*/ values.
<item><tt><cdx/EMIT_EVENT_OBJECT/</tt>, similar to EMIT_EVENT_BOOLEAN, useable for
      CORBA objects (<cdx/CORBA::Object/).
</itemize>

<sect2>Receiving Events
<p>

The process of receiving events is a little bit more difficult, compared
to sending, since we have to process all kinds of events an object can receive
in one handler method, <idx/KOM::Base/::event (<idx/IDL/) / KOMBase::event (C++) . Just
like with sending events you can again do everything on low CORBA level, but
why should we go the hard way? KOM again provides very nice and easy-to-use
macros for this (defined in komBase.h) :-) . Usually all this looks like the
following example:<nidx/KOM::Base/
<verb>
#include &lt;kom.idl&gt;

module MyModule
{
  // we say: the event argument is a string
  const string eventFirstFoo = "MyFooEventNameOrWhateverYouNameIt";

  struct MyStruct
  {
    boolean kde_rules;
  };

  const string eventSecondFoo = "Blaafooo";
  typedef MyStruct EventSecondFoo;

  interface SomethingElse
  {
    //..
  };

  const string eventThirdFoo = "KOMIsCool";
  typedef SomethingElse EventThirdFoo;

  interface Foo : KOM::Base
  {
    //...
  };

};

bool FooImpl::event( const char *event, const CORBA::Any &amp;value )
{
  EVENT_MAPPER( event, value );

  MAPPING_STRING( MyModule::eventFirstFoo, mappingFirstFoo );

  MAPPING( MyModule::eventSecondFoo, MyModule::EventSecondFoo, mappingSecondFoo );

  MAPPING( MyModule::eventThirdFoo, MyModule::EventThirdFoo_ptr, mappingThirdFoo );

  END_EVENT_MAPPER; //the macro executes "return false;" for us, to indicate that
                    //we did not handle the event if we reach this point
}

bool FooImpl::mappingFirstFoo( const char *myArgument )
{
  ...
  //don't forget to return with a boolean value, indicating whether you sucessfully
  //processed the event or not.
}

bool FooImpl::mappingSecondFoo( MyModule::MyString anotherArg )
{
  //...
}

bool FooImpl::mappingThirdFoo( MyModule::SomethingElse_ptr whaaboo )
{
  //...
}

</verb>

As you can see an event handler usually begins with the <tt>EVENT_MAPPER</tt>
macro and ends with <tt>END_EVENT_MAPPER</tt> . Similar to the
<tt>EMIT_EVENT_x</tt> macros, the <tt>MAPPING</tt> macros consist of a general
<tt>MAPPING</tt> macro and the following friends:
<itemize>
<item><tt>MAPPING_BOOLEAN</tt>
<item><tt>MAPPING_OCTET</tt>
<item><tt>MAPPING_CHAR</tt>
<item><tt>MAPPING_WCHAR</tt>
<item><tt>MAPPING_STRING</tt>
<item><tt>MAPPING_WSTRING</tt>
<item><tt>MAPPING_OBJECT</tt>
</itemize>

In order to structurize the process of event handling a little bit, every
event  gets its own event handling function. These functions are called by the
mapping  macros (last argument) . The above used naming scheme is not a
requirement,  however it is used in most applications using KOM.

<sect1>Adopting
<p>

You should use adopting whenever you want to hold a reference to an object and
want to be informed when the object dies in order to free all your references
to this object. But this should only be used when you're not the parent
object, meaning you didn't reference the object directly via the KOM reference
counter.  When using adopting you should re-implement the <tt>leaveNotify</tt>
(and perhaps <tt>adoptNotify</tt>) methods of your  object (and don't forget
to call the original KOMBase method!) .

<sect1>KOM referencing
<p>

KOM reference counting should be used to "express" that you possess the
object. This gives you direct control over the lifecycle of the object by
letting the reference counter act directly on the server object, in contrary
to CORBA reference counting, where the reference counter only acts on the stub
object, in case of remote objects (this is different for local objects, where
stub = server object) . When the KOM reference counter drops down to zero the
object gets destroyed. This destruction is done by calling <tt>cleanUp()</tt>,
which closes all connections to other objects and leaves all relatives.  After
this call is finished the object truly gets released. You might want to
re-implement the <tt>cleanUp()</tt> method. In this case make sure that you
don't forget two things:

<itemize>
<item>only execute if the boolean variable <tt>m_bIsClean</tt> is false,
      otherwise simply return
<item>make sure you call the previous implementation!
</itemize>

As a short summary to this KOM reference stuff just keep in mind, that
there are three ways to hold a reference to an object:
<itemize>
<item>you're connected to the object via signals/slots or via event filters
<item>you're the parent object, meaning you hold a reference through the KOM
      reference counter
<item>otherwise you should use adopting to get informed whenever the object wants
      to die, in order to free all references to the object which are not of
      one of the above kinds. The idea behind all this is that all
      connections/references between objects are symmetric, meaning
      <bf>both</bf> sides know about the connection and <bf>both</bf> sides
      clean up all connections between each other whenever one of the two
      objects wants to die. In case of signal/slot connections this is done
      automatically by KOM. In case of KOM reference counters you have the
      direct control over the lifecylcle for the object. Adopting, as third
      way, can be used to keep other connections symmetric, connections which
      are neither signal/slot connections nor direct references via the KOM
      reference counter.
</itemize>

Hint: Using the <tt>KOMVar</tt> template makes handling KOM references much
easier, they can be used similar to the CORBA _var types.

<sect1>THE component - the <idx/KOM::Component/ interface
<p>
The Component interface, being derived from the Base interface, additionally
provides a kind of small interface repository for only this component,
combined with the possibility to provide new interfaces by dynamic aggregation
and a standard way to add plugin components. This gives CORBA objects the
possibility to enhance their functionality at run-time.

There are five kinds of interfaces:
<itemize>
<item>Builtin Interfaces (derived Interfaces)
<item>Builtin Aggregate Interfaces
<item>Dynamic Aggregate Interfaces
<item>Builtin Plugin Interfaces
<item>Dynamic Plugin Interfaces
</itemize>

Builtin interfaces are all interfaces the object directly implements. This
means they are part of the actual object implementation and can be specified
via the <tt><cdx/ADD_INTERFACE/</tt> macro (in <cdx/komComponent.h/) . So for example if
your interface description looks like this:
<verb>
module Foo
{
  interface MyInterface : AnotherInterface
  {
    ...
  };
};
</verb>

You should add the following line into the constructor of an implementation of
this interface:
<nidx/IDL/
<verb>
ConstructorNameOfMyInterface::ConstructorNameOfMyInterface( ... )
{
  ...
  ADD_INTERFACE( "IDL:Foo/MyInterface:1.0" );
  ...
}
</verb>

This way you tell your component that it supports the interface
"Foo/Interface" and therefore makes it available through the three functions
<tt>getInterface()</tt>, <tt>interfaces()</tt> and
<tt>supportsInterface()</tt> .

<sect1>Extend your component by aggregation - <idx/KOM::Aggregate/
<p>

Aggregates solve a problem with distributed objects, the problem of
derivation.  Since the implementation of an interface is completely
encapsulated there has to be another way to extend the functionality of an
already existing  object.  By using aggregate components you can add new
interfaces to an object,  at run-time. This means you extend the functionality
but you do not change the behaviour of the object itself.

<sect2>Builtin Aggregates
<p>

Builtin aggregate interfaces are the interfaces of aggregate implementations
which run in the same process as our component. See in komComponent.h the four
functions of the <tt/<cdx/KOMComponent// class for adding builtin aggregates,  it's easy.

<sect2>Dynamic Aggregates
<p>

Dynamic aggregates are similar to builtin aggregates, with two differences:

<itemize>
<item>They can (are) be installed from "outside" of the component,
      using  AggregateFactories (see <idx/kom.idl/) . This way they do neither have
      to run  within the same process nor on the same computer.
<item>They can depend on other available interfaces. KOM does the job of resolving
      these dependencies for you.
</itemize>

<sect1>Plugins - the <idx/KOM::Plugin/ interface
<p>

Plugins are the kind of counterpart to aggregates. They do not extend the
functionality of an object by providing new interfaces, but instead usually
change the behaviour of it, by
<enum>
<item>doing things like installing event filters to the object, etc.
<item>providing special plugin interfaces
</enum>

<sect1>Collect your components - the <idx/KOM::Container/ interface
<p>

Containers do something simple but extremly useful: They act as repository for
Container members. A container member structure consists of two elements:

<itemize>
<item>the member name, a freely chooseable and unique string identifier
<item>the member object, a <idx/KOM::Base/ type You can add, remove, replace, list
      and lookup container members or just clear  the whole container. In
      addition the container emits signals whenever a  member has been added
      or removed.
</itemize>

<sect1>Factories
<p>

KOM contains two abstract factory interfaces:
<enum>
<item><idx/KOM::AggregateFactory/
<item><idx/KOM::PluginFactory/
</enum>

They both serve the job of creating objects and are needed for the creation of
dynamic plugin and aggregate components. Whenever you want to install a such a
dynamically created object to a component you have to provide an
implementation of a factory interface.

<sect1><idx/KOMApplication/
<p>

<idx/KOMApplication/ is the drop-in replacement for <idx/KApplication/, required when
using CORBA in your KDE Application. It, internally, combines CORBA event
handling with Qt event handling and initializes the <idx/ORB/ and the <idx/BOA/ on
startup.  komApplication.h defines two smart macros to get a reference to the
ORB/BOA: <tt>komapp_orb</tt> and <tt>komapp_boa</tt> . Usually you will want
to use your own application class, derived from KOMApplication, and
re-implement <tt>start()</tt> and/or <tt>restore()</tt> , which will be called
>from <tt><cdx/KOMApplication::exec()/</tt>, depending on the BOA's state about
restoring objects. For further information about KOMApplication's API see
<cdx/komApplication.h/ .

<sect1><idx/KOMShutdownManager/
<p>

When working with KOM objects which run in different processes, KDE provides you
tools to launch these processes automatically, on demand, to minimize resource 
usage. The KDE Daemon provides this functionality. However the same way you want
other processes to start on-demand, you might want them to shut down when they're
not used anymore. As CORBA does not define any standards for this, we had to
introduce our own mechanism. 

So the basic question is: When can we be sure the that all objects in our process
are dead? If we can answer this question, we know when to shut down the ORB and
therefore our process.

The first step towards this is to know when a specific object is dead. And this
is very simple to answer: When an object is not referenced anymore, the object's
reference counter drops down to zero and the objects gets released.

So KOM's approach to find out when a server process has become "unused" is to
see whether all KOMBase objects are dead, since this object implements the
server-sided reference counter which is responsible for the lifecycle of the 
object.

The KOMShutdownManager class is the helper class to implement this approach.
It is a one-instance class, accessed via KOMShutdownManager::self() , so you
never have to care about creating or deleting it.

So if you want to make your server application shutdown itself automatically
when it is not needed anymore, using KOMShutdownManager is the way go:

You have to tell this class about all objects it should watch, and when all
watched objects died, it will start a timer (with a default timeout value of
one minute, but this is configurable) . On timeout the ORBs gets shutted
down and the application quits.

So at all places in your application where objects for remote clients are
created (usually in factories) you might want to add one simple single line,
just like this:
<verb>
... (somewhere in your code)
//now we create the basic object
MyFooObject *obj = new MyFooObject;

//tell KOMShutdownManager to watch this object
KOMShutdownManager::self()->watchObject( obj );
...
</verb>

Pretty self-explaining I think, or? :-) As reference you might also have a look
at the kded examples in kdelibs/corba/tutorials/kded , KOMShutdownManager is
used there, too.

(BTW, please feel free to bomb me with questions if anything is explained bad
or hard to understand! Just drop me a short mail at <htmlurl url="mailto:hausmann@kde.org" name="<hausmann@kde.org>">

<sect>OpenParts
<p>

<sect1>Introduction
<p>

The goals of the OpenParts technology, based upon KOM, are:
<itemize>
<item>provide an easy way to graphically embed other application's "widgets"
<item>provide an clever way to manage shared GUI elements and provide a CORBA/KOM
      interface/implementation of these
<item>implement the basic support for the document view model
</itemize>

To simplify the act of understanding OpenParts I will give a short example
situation:

Imagine you have an a word processor and a formula editor, both being separate
applications. If you now want to insert a formula into your word processor
document by using your formula editor application this arises several
problems: You can of course embed the formula editor's main widget window via
swallowing by using XReparentWindow and friends, or easier by using QXEmbed.
But then how do you want to edit your formula without having access to the
formula editor's menubar / toolbar? In any way it would look ugly if these are
part of the formula window. Wouldn't it be nice if the menus / toolbars of
your word processor application would get replaced by the formula editor ones,
except for some general menu /toolbar items? And when you go back to your text
document the old menus / toolbars come back again.

Well, this is a perfect job for OpenParts :-) .

OpenParts solves the above described problem by introducing a new sytem of
visual components and a new way of creating shared GUI elements, such as menus
or toolbars, dynamically on demand.

In the implementation of OpenParts every element consists usually of two
classes, the interface implementation, where the class name ends with "If",
and the Qt/KDE object. So for example the OpenParts StatusBar element is
represented by two classes: <tt><cdx/OPStatusBar/</tt>, being derived from
<cdx/KStatusBar/,  handles the Qt/KDE specific extensions, and
<tt><cdx/OPStatusBarIf/</tt> which is  responsible for providing an implementation
of the actual <cdx/OpenPartsUI::StatusBar/  interface by "translating" the interface
functionality into Qt/KDE function  calls.

Since every Qt/KDE object in OpenParts is most often bound to such an
interface, like described above, there is usually an interface() function
which returns a reference to the OpenParts interface of the element. In case
of the above example <tt><cdx/OPStatusBar::interface()/</tt> returns a reference to
an <tt><cdx/OPStatusBarIf/</tt> object which is directly bound to this
<tt><cdx/OPStatusBar/</tt> object.

<sect1><idx/OPApplication/
<p>

Similar to <cdx/KOMApplication/, the class <cdx/OPApplication/ (derived from
KOMApplication) is required when using OpenParts.

<sect1><cdx/QWidget/ as Component? - the OpenParts::Part interface
<p>

In OpenParts every window which has its own GUI and which is meant to be
displayed in a MainWindow is called a Part (just like the formula editor view
or the word processor document view in the above described example) , and
implements the <cdx/OpenParts::Part/ interface by deriving from the class
<tt>OPPartIf</tt>.

If you want to make a widget class a full-featured Part component then you
have to handle some things different than you might be used to, in regard to
the standard Qt/KDE widget framework. In fact now a widget is no more a simple
window in which you display some data, no, a Part is much more than this. In
particular a Part has, beside it's window (widget, which may of course contain
sub-windows or even other Parts (see <tt><cdx/OPFrame/</tt> documentation) ) a
full-featured GUI, consisting of a menubar with menus, toolbar(s) and a
statusbar.

The special thing with the GUI is the way it is created, handled/used and
"destroyed" . All this has to be highly dynamic because now the user decides
about which Part he wants to have active. OpenParts provides the basic
framework for this:
<itemize>
<item>it tells you when you have to create your GUI and provides you the necessary
      references to the GUI related objects of OpenParts.
<item>it also tells you when the GUI is destructed.
<item>in addition you are notified when your Part gets the focus and gives you
      the choice whether to accept or reject the focus.
<item>you are also notified when your Part gets registered to a MainWindow, in
      order to register your component at several GUI servant objects, just
      like the menubar manager for example.
</itemize>

The very first step you have to make is to tell the OpenParts Part Interface
(<tt><cdx/OPPartIf/</tt>) , the class you have to inherit from, what the actual
widget is, because <tt><cdx/OPartIf/</tt> does not inherit from QWidget. This gives
you the  flexibility to separate your Part component from your actualy widget,
but you  don't have to do this. You can simply multiply inherit from
<tt>OPPartIf</tt> and <tt/<cdx/QWidget// or the appropriate widget class. In any way you
specify your Part  widget by calling <tt>setWidget( your_widget_here )</tt> .
In most cases, when  the Part component is the widget at the same time, you
simply call <tt>setWidget( this )</tt> :-) . Make sure this call is done in
the constructor of your class!

The next important point is that you will want to re-implement the virtual
<tt>init()</tt> function of <tt><cdx/OPPartIf/</tt> . This is highly recommended
since this function is called after your Part got registered by a MainWindow.
The idea  behind this function is that at the time the constructor of a Part
gets executed, the Part itself is definitely not registered to a MainWindow,
yet. But in fact you need to know when your Part gets registered, in order to
register your Part at the GUI servant objects, which are only available via
the MainWindow's interface. A reference to the MainWindow is available through
the <tt><cdx/m_vMainWindow/</tt> variable, which will be automatically initialized
when the MainWindow  registration is done, so don't use this variable before
your <tt>init()</tt> function gets called (<tt>m_vMainWindow</tt> will be nil
anyway) .

Now over to the details of the <tt><cdx/init()/</tt> function. Here you should place
all initialisation stuff which depends on being registered to a MainWindow.
In addition you can do the above mentioned registration at the GUI managing
objects. Usually this looks like the following example:
<verb>
void MyPart::init()
{
  //register at the menubar manager if you want to use/display a menubar
  OpenParts::MenuBarManager_var menuBarManager = m_vMainWindow->menuBarManager();
  if ( !CORBA::is_nil( menuBarManager ) ) //check whether the shell window allows us to have a menubar
    menuBarManager->registerClient( id(), this ); //see chapter about the
              //*barManager objects
              //for further explanations

  //...the same with the toolbar
  OpenParts::ToolBarManager_var toolBarManager = m_vMainWindow->toolBarManager();
  if ( !CORBA::is_nil( toolBarManager ) )
    toolBarManager->registerClient( id(), this );

  //better define a class wide variable, of course
  OpenPartsUI::StatusBar_var m_vMyStatusBar;

  OpenParts::StatusBarManager_var statusBarManager = m_vMainWindow->statusBarManager();
  if ( !CORBA::is_nil( statusBarManager ) )
    m_vMyStatusBar = statusBarManager->registerClient( id() );
}
</verb>

Note that the registration calls for these three GUI element types are only
necessary if you really want to use them. For example if your Part does not
want to display any toolbar you should leave out the corresponding call.  In
addition you might come up with the situation that for example the
<tt><cdx/toolBarManager()/</tt> call returns a nil reference, which indicates that
the MainWindow does not allow its Parts to have a toolbar. Obviously the same
applies for the menubar and the statusbar.

OpenParts makes use of KOM events to tell a Part about the
construction/destruction of it's GUI. These are in particular:
<itemize>
<item><tt>OpenPartsUI::eventCreateMenuBar</tt> ("OpenPartsUI/CreateMenuBar")
</itemize>
The attached argument is a <tt>OpenPartsUI::MenuBar</tt>

<itemize>
<item><tt>OpenPartsUI::eventCreateToolBar</tt> ("OpenPartsUI/CreateToolBar")
</itemize>
The attached argument is a <tt>OpenPartsUI::ToolBarFactory</tt>

Depending on whether a Part wants to display a menubar and/or toolbar, the
managing objects emit these two events to it. In regard to your implementation
this means that you have to re-implement the <tt><cdx/event()/</tt> function
(remember: A Part is a full-featured KOM Component) .

The attached event arguments indicate whether the toolbar(s) or the menubar
are to be created or cleared. Check these arguments against
<tt>CORBA::is_nil()</tt> and you know :-) .

The OpenParts StatusBar is handled different compared to the
MenuBar/ToolBar(s) . In fact it is easier: When registering at the OpenParts
StatusBarManager you receive your <tt><cdx/OpenParts::StatusBar/</tt> as return
value. You can then use the StatusBar everywhere in your Part, independend
from whether it is visible (active) or not.

In the <tt><cdx/init()/</tt> function a lot of registration stuff is done, and
corresponding to this in the <tt><cdx/cleanUp()/</tt> function (see chapter about
<idx/KOM::Base/) you have to unregister from the GUI servant objects and free all
appropriate references, following KOM's model of symmetric references and
connections. Usually the code looks like this:
<verb>
void MyPart::cleanUp()
{
  if ( m_bIsClean )
    return;

  //unregister our menubar
  OpenParts::MenuBarManager_var menuBarManager = m_vMainWindow->menuBarManager();
  if ( !CORBA::is_nil( menuBarManager ) )
    menuBarManager->unregisterClient( id() );

  //...the same with the toolbar
  OpenParts::ToolBarManager_var toolBarManager = m_vMainWindow->toolBarManager();
  if ( !CORBA::is_nil( toolBarManager ) )
    toolBarManager->unregisterClient( id() );

  OpenParts::StatusBarManager_var statusBarManager = m_vMainWindow->statusBarManager();
  if ( !CORBA::is_nil( statusBarManager ) )
    statusBarManager->unregisterClient( id() );

  //free other references here
  //...

  //this is IMPORTANT!!!
  //Always call the cleanUp() method of the base class when you're done!
  OPPartIf::cleanUp();
}
</verb>

<sect1>Part Children
<p>

A Part Child is a usual Part with three extra features:
<enum>
<item>A Part Child has a Parent Part assigned.
<item>It does not have a GUI and it therefore does not receive any GUI creation
      events.
<item>The Parent Child receives events whenever there are any child related focus
      changes. Since the Part Child functionality is integrated in the
      <tt><cdx/OpenParts::Part/</tt> interface and it's implementation,
      <tt><cdx/OPPartIf/</tt>, you don't have to deal  with additional classes when
      using Child Parts. Simply leave out the mapping of the OpenParts GUI
      events in the Child Part and instead map the Child Part events described
      below and assign the Parent Part via <tt><cdx/setParent()/</tt>. See the
      interface description of <tt><cdx/OpenParts::Part/</tt> , in <cdx/openparts.idl/,
      for further information about the events and the API in general.
</enum>

<sect1>How to embed a Part - the <cdx/OPFrame/ class
<p>

Now that you know how to create full-featured Part components it is still
unexplained how Parts are really displayed/shown. Since Parts are no simple
QWidgets but CORBA objects we need a helping hand here, which is the
<tt>OPFrame</tt> class. In fact <tt><cdx/OPFrame/</tt> is a <cdx/QWidget/, but in
conjuction with Qt's <cdx/QXEmbed/ it embeds the Part's widget window. The usage of
<tt>OPFrame</tt> is really easy, usually the code looks like this:

<verb>
... somewhere in an application's widget ...
myFrame = new OPFrame( the_parent_widget );
myFrame->attach( a_reference_to_the_part_we_want_to_embed );
myFrame->show();
</verb>

In addition to the above example you can <tt><cdx/detach()/</tt> your Part, which
you should usually do on exit. Just have a look at <cdx/opFrame.h/, it is
documented.


One last important thing you have to know about <tt><cdx/OPFrame/</tt> is that this
class internally uses KOM referencing (using a <tt>KOMVar</tt> variable) to
hold the Part.  This means that there are two possible situations when using
<tt>OPFrame</tt> :

<itemize>
<item>If the embedding Widget/Object uses KOM referencing as well to keep a
      reference to the Part then there are two objects influencing the Part's
      lifecycle. On the one hand there's the <tt>OPFrame</tt> which
      increases/decreases the Part's KOM reference counter when it gets
      attached/detached, and on the other hand there's the embedding
      Widget/Object. So make sure that you know when you free your KOM
      reference to the Part in regard to detaching the Part!
<item>If the embedding Widget/Object does not use KOM referencing then you have
      to know that when detaching the Part it automatically gets destroyed,
      since usually the <tt>OPFrame</tt> is the only object holding a KOM
      reference  to the Part and the KOM reference counter therefore drops
      down to zero and issues the complete destruction of the object.
</itemize>

<sect1>The center of OpenParts - the OpenParts::MainWindow interface
<p>

Another important component is the so called <cdx/OpenParts::MainWindow/, being
derived from a <cdx/KTMainWindow/ in the implementation (and therefore the top-level
window of your application) and being the shell around visible sub-windows and
shared GUI elements.

The MainWindow's functionality is extended by some builtin aggregates, the
managing objects for the menu-/tool-/statusbar. These objects are either
available directly via the <tt>*barManager()</tt> methods of the MainWindow's
interface or indirectly by being aggregates and therefore available via the
components interface repository (<tt><cdx/getInterface()/</tt>,
<tt><cdx/supportsInterface()/</tt>, ...) .

A Part can only be displayed in a MainWindow and the MainWindow has to know
about this. So before you can display a Part you have to register it to the
MainWindow. This is done by calling the Part Interface's
<tt><cdx/setMainWindow()/</tt> method (see previous chapter for further information
about the process of registration) and this will give the Part a unique ID
(which is for example used when addressing the part's GUI via the *bar manager
objects) .

The MainWindow, as shell, has full control over all shared GUI elements.  This
means that it is responsible for
<itemize>
<item>creating the appropriate *bar managing objects
<item>providing a skeleton/standard GUI which is meant to be always present,
      no matter what Part is active
<item>telling the GUI managing objects to activate/deactivate a Part's GUI
</itemize>

The creation of the *bar managers can be easily done by simply performing a
dummy call to <tt>*barManager()</tt> which usually returns a pointer to the
appropriate manager and also creates a new one if it does not exist yet. It is
recommended to perform these calls in the constructor of your MainWindow.

The creation/handling of the skeleton GUI is explained later in the chapters
about <cdx/OPMenu/(Bar)/<cdx/OPToolBar/ .

Your MainWindow emits a Qt signal (<tt><cdx/activePartChanged/</tt>) which informs
you about a focus change of the active part, meaning whenever the user clicks
on a non-active Part and it accepts the focus. Beside the pure informative
sense  of this signal it is recommended to connect to this signal and perform
the  following two steps in the slot implementation:

<enum>
<item>deactivate the previous active Part's GUI by calling the *bar managers
      <tt><cdx/clear()/</tt> function, which will do the job and, beside some
      internal stuff, emit the GUI events (see previous chapter) to the Part.
<item>activate the new active Part's GUI by calling the *bar managers
      <tt><cdx/create()/</tt> function, which will, similar to the activation, emit
      events to the Part. This is not really required but it is highly
      recommended. The following code is usually used for this:

      <verb>
      void NameOfYourMainWindow::slotActivePartChanged( unsigned long old_id,
                                                        unsigned long new_id )
      {
        // clear the menu/tool/statusbar(s)
        menuBarManager()->clear();
        toolBarManager()->clear();
        statusBarManager()->clear();
        // create the new Part's GUI
        menuBarManager()->create( new_id );
        toolBarManager()->create( new_id );
        statusBarManager()->create( new_id );
      }
      </verb>
</enum>

Now that the MainWindow handles all the shared "stuff" there is one thing
which was not mentioned in this documentation, yet: What about the
MainWindow's caption? The OpenParts MainWindow interface allows parts to have
their own window captions, but how does OpenParts handle this?

Well, there are two ways:
<enum>
<item><tt><cdx/OPMainWindow/</tt> provides you a so called <tt><cdx/AutoCaption/</tt> mode
      which automatically changes the MainWindow's caption whenever the active
      part changes. This is enabled by default.
<item>But sometimes the shell wants to have full control over the window's
      caption, and this is accomplished by disabling the <tt>AutoCaption</tt>
      mode, which  leads to the situation that the window's caption is not
      changed by OpenParts  in any way but instead gives you control over it.
</enum>

<sect1>Access shared GUI elements through CORBA - OpenPartsUI and its interfaces
<p>

Well, now that we know when we have to construct/destruct a Part's GUI,
via the <cdx/OpenPartsUI/ events, we have to learn how to really create it, because
we don't have the common <cdx/KMenuBar/, <cdx/KToolBar/, etc. classes anymore available.
The replacement for them are CORBA Objects, described in openparts_ui.idl which
is, together with the corresponding implementations, a part of the partsui
module. The interfaces are 98%; similar to the KDE/Qt classes, so they're
quite easy to use. Instead of bloating up this documentation with example code
I rather suggest reading the tutorials in kdelibs/corba/tutorials .

<sect1><idx/Pixmaps/ and <idx/Strings/ in OpenParts - <cdx/OPUIUtils/
<p>

Toolbars and menus are usually beautified with pixmaps, using QPixmap classes.
As we now use a CORBA interface to access our GUI elements, <cdx/QPixmap/ has become
<cdx/OpenPartsUI::Pixmap/ for OpenParts applications. OpenPartsUI::Pixmap is just
a "stringified" QPixmap, and opUIUtils.(h,cc) contains some easy
to use conversion routines.

In addition OPUIUtils contains string conversion routines between CORBA::WChar*
and <cdx/QString/. This is necessary since Qt version >=2.0 supports <cdx/Unicode/,
via QString, all over the place, and obviously GUI elements like menus or
toolbars have been converted to support this. OpenParts has been converted,
too, by using "wstring" (<cdx/CORBA::WChar */) in the interfaces and by
using and providing conversion routines. These routines are static member
functions of the OPUIUtils  class, just like with the pixmap conversion. To
simplify the usage, two macros have been defined: <tt><cdx/Q2C/</tt> and
<tt><cdx/C2Q/</tt> . The first one converts a QString into a CORBA::WChar * string
and the second one vice-versa.

When converting from QString to CORBA::WChar * the conversion routine
allocates memory. To avoid <idx/memory leaks/ it is highly recommended to use
CORBA::WString_var variables. Exactly the same applies for QPixmap ->
OpenPartsUI::Pixmap conversions: Use <cdx/OpenPartsUI::Pixmap_var/ , and you don't
have to worry about leaks :-) .

Here's some example code, to show how to do it right:
<verb>
    ...
    OpenPartsUI::Pixmap_var pm = OPUIUtils::convertPixmap( QPixmap_variable_here );
    someToolBar->insertButton( pm, ... );
    ...
    //use the same pm variable again
    pm = OPUIUtils::convertPixmap( another_qpixmap );
    ...
</verb>

Similar things have to be done with QString's:

<verb>
    ...
    CORBA::WString_var text = Q2C( QString_here );
    someMenuBar->insertItem7( text, ... );
    ...
    // or you can write:
    someMenuBar->insertItem7( ( text = Q2C( QString_here ) ) , ...);
    ...
</verb>

One note left: When you return a "wide string" (CORBA::WChar *) as
a function result by using <tt>Q2C</tt>, make sure not to use
<tt><cdx/CORBA::wstring_dup()/</tt>.

Example:
<verb>
  return CORBA::string_dup( Q2C( QString_here ) ); //!!!! WRONG!!!!!
  ...
  return Q2C( QString_here ); // RIGHT! because Q2C already allocates the string
</verb>

<sect1>Excluding widgets from the OpenParts focus handling
<p>
Sometimes it is necessary to explicitly exclude a certain widget from the OpenParts 
focus handling, mostly when dealing with part children.
For example in the following situation:

Imagine you have one main widget, a parent part. This widget (part) embeds several 
other child parts, separated by splitter widgets (QSplitter) . Now if the user
clicks on one of the splitters in order to re-arrange the layout, OpenParts attempts 
to deactivate any possible child part and activate with main widget (parent part),
as the splitter widget is a child widget of the main widget (obviously) . This is
a correct behaviour, but probably not very user-friendly ;-)

The right step to fix this is to explicitly exclude the splitter widgets from this 
focus handling, and you can actually tell OpenParts about this. Since (in the example)
the splitters belong to the main widget, the main widget class, which inherits OPPartIf,
contains the API for that.

The three available methods are part of the OPPartIf class and are quite self-explaining:
<tt>addSeparatedWidget()</tt>,<tt>removeSeparatedWidget()</tt>,<tt>isSeparatedWidget()</tt>

That's it! Have fun using KOM/OpenParts :-)

TODO:
<itemize>
<item>AutoLoader template classes
<item>OPApplication Interface + Factories
</itemize>

</article>



