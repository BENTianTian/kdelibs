<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook V3.1-Based Variant V1.0//EN">

<book id="crash-course" lang="en">

<bookinfo>

<title>Writing Documentation Using DocBook</title>
<subtitle>A Crash Course</subtitle>

<authorgroup>
<author>
<firstname>David</firstname>
<surname>Rugge</surname>
</author>
</authorgroup>

<date></date>
<releaseinfo></releaseinfo>

<keywordset>
<keyword>KDE documentation</keyword>
<keyword>documentation</keyword>
<keyword>ksgml</keyword>
<keyword>DocBook</keyword>
<keyword>Linuxdoc</keyword>
</keywordset>

<revhistory>
<revision>
<revnumber>0.1</revnumber>
<date>August 8, 1999</date>
<authorinitials>DRR</authorinitials>
<revremark>First version.</revremark>
</revision>
<revision>
<revnumber>0.2</revnumber>
<date>August 18, 1999</date>
<authorinitials>DRR</authorinitials>
<revremark>First complete version. Not proofread yet!</revremark>
</revision>
<revision>
<revnumber>0.3</revnumber>
<date>August 23, 1999</date>
<authorinitials>DRR</authorinitials>
<revremark>Fixed various mistakes and typos.</revremark>
</revision>
<revision>
<revnumber>0.4</revnumber>
<date>September 16, 1999</date>
<authorinitials>DRR</authorinitials>
<revremark>Fixed several inaccurate statements and unclosed paragraphs.</revremark>
</revision>
<revision>
<revnumber>0.5</revnumber>
<date>September 26, 1999</date>
<authorinitials>DRR</authorinitials>
<revremark>Reordered a few sections. Several minor fixes.</revremark>
</revision>
<revision>
<revnumber>0.6</revnumber>
<date>October 1, 1999</date>
<authorinitials>EB</authorinitials>
<revremark>Installation and usage instructions fixed. Some more sections reordered.</revremark>
</revision>
</revhistory>

<abstract>
<para>
This document describes how to write KDE documentation in DocBook using the KDE
DocBook package. There is also a guide to moving from the old Linuxdoc format to
the newer and more flexible DocBook format.</para>
</abstract>

</bookinfo>


<chapter id="introduction">
<title>Introduction</title>

<para>
The KDE documentation project is now using DocBook as the preferred format for
all documentation. As you will see, this format allows much more flexibility
than Linuxdoc at the small price of having to learn a few more tags. To make it
as easy as possible to convert to the new format, we have provided conversion
scripts, a template for new documentation, and this crash course. We hope you
find the transition to DocBook to be as painless as possible and that you enjoy
the new features that DocBook brings to KDE documentation.</para>
<note><para>
Please note that this crash course is designed to be used along with, not
instead of, the DocBook Reference. There are a number of cases where it is much
easier to refer to the reference rather than trying to rehash what it already
covers. Use this guide to understand what tags you need to get by and where to
use those tags.</para></note>
<para>
Many parts of this document were borrowed from the DocBook 3.0 Reference
by Eve Maler of ArborText, Inc. and Terry Allen of Fujitsu Software Corporation.
The parts of this document that were borrowed from the Reference are
Copyright © 1992, 1993, 1994, 1995, 1996, 1997 by HaL Computer Systems, Inc., O'Reilly & Associates, Inc., Fujitsu Software
Corporation, and ArborText, Inc.</para>

<sect1 id="why">
<title>Why DocBook?</title>
<para>
When the KDE project began in 1996, Linuxdoc was the standard for writing
documentation that needed to be published in multiple formats. Unfortunately,
Linuxdoc suffers from a number of design limitations that hinder the writing of
documentation for modern GUI applications:</para>
<para>
<itemizedlist>
<listitem>
<para>Images are difficult to include in a document, making
it difficult to include screenshot of the application and to
describe widgets such as toolbars.</para></listitem>
<listitem><para>There is no way to format text into tables other than including
preformatted text.</para></listitem>
<listitem><para>Linuxdoc has an inconsistent design. It is not often clear which
tags can be included in other tags and which tags need to be
closed.</para></listitem>
<listitem><para>Incomplete support for some character sets, making it difficult,
if not impossible to translate Linuxdoc into some languages.</para></listitem>
<listitem><para>Weak support for meta information and
indexing.</para></listitem> </itemizedlist>
</para>
<para>
The DocBook format was designed by OASIS consortium specifically for technical
documentation. It addresses all of the deficiencies listed above by
providing a much richer set of tags to describe the content of your
document. The only drawback of DocBook is that it is more complex than
Linuxdoc, which makes it a little more difficult to learn. Even if you
have never used either Linuxdoc or DocBook before you should be able to become
proficient in it just by reading through this guide, examining the template,
and using the <ulink url=
"http://www.oasis-open.org/docbook/documentation/reference/html/docbook.html">
online</ulink> or the <ulink url=
"http://www.oreilly.com/catalog/docbook/index.html">paper</ulink> version of
<citation>DocBook - The Definitive Guide</citation> published by O'Reilly &amp;
Associates.</para>

</sect1>
</chapter>

<chapter id="kdetools">
<title>The KDE DocBook Tools</title>

<para>
DocBook is a norm, and as such, documentation made at the KDE Project has to comply with it.
Nevertheless, the tools used to process DocBook documents have been customized to match KDE
style guidelines.</para>
<para>
This chapter explains briefly how to install and run the DocBook tools customized for KDE.</para>

<sect1 id="installation">
<title>Installing the Tools</title>

<para>
The KDE DocBook Tools consist of several packages that work together to convert
DocBook SGML files into HTML files for use in khelpcenter or Postscript files
(by way of the JadeTeX TeX macros):

<itemizedlist>
<listitem><para>Jade/nsgmls - an SGML stylesheet engine</para></listitem>
<listitem><para>DocBook 3.1 DTD</para></listitem>
<listitem><para>Norman Walsh's DocBook Stylesheets</para></listitem>
<listitem><para>KDE DocBook DTD extensions</para></listitem>
<listitem><para>KDE DocBook Stylesheet customization files</para></listitem>
</itemizedlist>
For instructions on installing all of these components, please refer to the
<filename>ksgmltools/INSTALL</filename> file from the kdesdk package, on
<ulink url="ftp://ftp.kde.org/pub/kde/unstable/CVS/snapshots/current">KDE FTP server</ulink>
or one of its mirrors listed on <ulink url="http://www.kde.org/mirrors.html">KDE mirrors list</ulink>.
</para>

</sect1>

<sect1 id="usage">
<title>Running the Tools</title>

<para>
To convert files from DocBook format to HTML format, use the command :</para>
<para>
<command>db2html <option>-d /usr/lib/sgml/stylesheets/kde.dsl</option> <replaceable>mydocs.docbook</replaceable></command>
</para>
<para>
Jade will chug away, and if your document has no errors you will get a set of HMTL files
named after the Chapters in your document. To get a good feel for how this tool
works, try using the <command>db2html</command> tool on the source file for
this document (<filename>crash-course.docbook</filename>) and on the
documentation template (<filename>template.docbook</filename>).</para>
<para> If you do get errors, read through the error log and correct errors from
the beginning of the list first. Often, an early error such as an unclosed tag
will cause a lot more errors to occur later in the document.</para>
<para>Other tools may let you convert docbook files to other formats:
</para>
<para>
<itemizedlist>
<listitem><para><command>db2ps</command> =&gt; PostScript</para></listitem>
<listitem><para><command>db2pdf</command> =&gt; PDF</para></listitem>
<listitem><para><command>db2rtf</command> =&gt; Rich Text Format</para></listitem>
<listitem><para><command>db2dvi</command> =&gt; TeX DVI</para></listitem>
</itemizedlist>
</para>

</sect1>

</chapter>

<chapter id="crashcourse">
<title>A Crash Course in DocBook</title>

<para>
This tutorial will teach you enough DocBook to write KDE documentation. You will learn how to:</para>
<para>
<itemizedlist>
<listitem><para>Understand the format of a DocBook tag</para></listitem>
<listitem><para>Structure your documents properly</para></listitem>
<listitem><para>Use lists and tables to organize data</para></listitem>
<listitem><para>Describe GUI elements and Unix Commands</para></listitem>
<listitem><para>Include graphics in your documentation</para></listitem>
<listitem><para>Link to URL's and create cross-references</para></listitem>
</itemizedlist>
</para>

<sect1 id="tags">
<title>Anatomy of a DocBook Tag</title>
<para>
A DocBook tag consists of an element and attributes. For example, <markup>&lt;Chapter ID="Introduction"&gt;</markup>
contains the element Chapter and the attribute ID. The element modifies the text within the markup,
and the element's attributes modify the element. For example, the Chapter element says that all text included within the
starting and closing tags should be treated as a chapter, while the ID attribute labels the Chapter so it can be linked to
or used as a file name when DocBook is translated to another format.</para>
<para>Most DocBook tags contain a common set of attributes. The common
attributes that you will be using most often are Lang, which specifies the
language of the data inside the tag, and ID, which labels the tag.</para>
<important><para>
All DocBook tags must have a start and an end tag. If you
read through the DocBook Reference you will notice that not all DocBook tags are
required to have both start and end tags. Omitting the ending tags where they
are not required is not an option because it will make your document
inconsistent with the other KDE documentation and it will make it harder to make
the transistion to XML DocBook. Also, make sure to follow the proper case of the tag
because XML is picky about the case of tags.</para></important>
<para>For detailed information about tags and a list of all available tags,
see the DocBook 3.0 Reference and the <ulink url="http://nwalsh.com/docbook/defguide/qr/quickref.htm"> DocBook 3.1 Quick
Reference</ulink>.</para>
</sect1>

<sect1 id="doc-structure">
<title>The Structure of a DocBook File</title>
<para>
The tags covered in this section are listed below.
<simplelist>
<member>Book - Book</member>
<member>Chapter - Chapter of a Book</member>
<member>Title - Text of a heading or the title of a block-oriented element</member>
<member>Para - Paragraph</member>
</simplelist>
<example>
<title>An example of a minimal DocBook Book file</title>
<screen>
<![ CDATA [
<!DOCTYPE Book PUBLIC "-//KDE//DTD DocBook V3.1-Based Variant V1.0//EN">
<book lang="en" id="kapp">
<bookinfo>
<title>The Kapp Handbook</title>
</bookinfo>
<chapter id="introduction">
<title>Introduction</title>
<para></para>
</chapter>
</book>
]]>
</screen>
</example>
</para>
<para>
The above example shows a skeleton of all of the required structural tags. The
first tag in any DocBook file is the DTD declaration which indicates which DTD
to use to process this document. KDE documentation uses an extension to the
standard DocBook 3.1 DTD which adds support for PNG graphics to the
graphics-related DocBook tags. Next comes the content model, which is
<markup>&lt;Book&gt;</markup> for all KDE documentation. Note the use of the Lang and ID
attributes in the Book tag. The language attribute should always be used to make
it easy to determine what language in which the document is written.
Human-readable (not numerical) ID attributes for <markup>&lt;Book&gt;</markup>,
<markup>&lt;Chapter&gt;</markup>, and <markup>&lt;Sect&gt;</markup> tags are
required for two reasons:
<itemizedlist>
<listitem><para>Labelling all of the sections of your document allows you to
easily cross-reference your document with hyperlinks.</para></listitem>
<listitem><para>Jade uses the ID's of Chapters to name the output files, so if
you do not include ID's for all your Chapters, the file names will be different
each time the docs are updated, which wastes space in CVS.</para></listitem>
</itemizedlist>
</para>
<para>
After the <markup>&lt;Book&gt;</markup> tag comes the meta information for the
document which is encapsulated within the <markup>&lt;BookInfo&gt;</markup> tag.
This information will be described in more detail in the <link linkend="metainfo">Meta Information</link> section. Then come the chapters of
your book, which may contain one or more section tags
(<markup>&lt;Sect1&gt;</markup> - <markup>&lt;Sect5&gt;</markup>). Chapters and
sections must contain at least a <markup>&lt;Title&gt;</markup> and an empty
<markup>&lt;Para&gt;</markup> tag. To make it easier to visualize how the
sections relate to one another, refer to the documentation template. </para>
<para>
Content in DocBook is contained within a <markup>&lt;Para&gt;</markup>
tag, which is very similar to the <markup>&lt;P&gt;</markup> tag in HTML and
Linuxdoc except that it must always have a closing
<markup>&lt;/Para&gt;</markup> tag.</para>

</sect1>

<sect1 id="metainfo">
<title>Meta Information</title>

<para>
The tags covered in this section are listed below.
<simplelist>
<member>BookInfo - Metainformation for a Book</member>
<member>Title - Text of a heading or the title of a block-oriented element</member>
<member>AuthorGroup - Wrapper for Author information</member>
<member>Author - Author of a document </member>
<member>AuthorInitials - Initials or other identifier for the author of a Revision or Comment</member>
<member>FirstName - Given name</member>
<member>OtherName - Name component that is not a Firstname, Surname, or Lineage</member>
<member>Surname - Family name</member>
<member>KeywordSet - Set of terms describing the content of a document</member>
<member>Keyword - Term describing the content of a document</member>
<member>ReleaseInfo - Information about a particular version of a document</member>
<member>RevHistory - Revisions to a document</member>
<member>Revision - Entry in RevHistory, describing some revision made to the text</member>
<member>RevNumber - Number of a Revision</member>
<member>RevRemark - Description of a Revision</member>
<member>Abstract - Document summary</member>
<member>Date - Date of publication or revision of a document</member>
</simplelist>
<example>
<title>Example of DocBook Headers</title>
<screen>
<![ CDATA [
<bookinfo>
<title>The Kapp Handbook</title>
<authorgroup>
<author>
<firstname>George</firstname>
<othername>N.</othername>
<surname>Ugnacious</surname>
</author>
</authorgroup>

<keywordset>
<keyword>KDE application</keyword>
</keywordset>

<releaseinfo>1.01.00</releaseinfo>
<date>03/04/1999</date>

<abstract>
<para>
Kapp is an application specially designed to do nothing you would ever want.
</para>
</abstract>

</bookinfo>
]]>
</screen>
</example>
</para>
<para>
The <markup>&lt;BookInfo&gt;</markup> tag contains all of the meta information
for your document. In most cases the examples in the template should provide all
of the tags you need to describe the content of your document. Most of the tags
are fairly self-explanatory, but there are a few important details that need to
be addressed:</para>
<para>
<itemizedlist>
<listitem><para>You should always provide the <markup>&lt;ReleaseInfo&gt;</markup> and the <markup>&lt;Date&gt;</markup> tags.
This is <emphasis>very important</emphasis> at KDE for translation update management. Please use alwayse the same format for the date (DD/MM/YYYY) and for
the version (major.minor.lesser).</para></listitem>
<listitem><para><markup>&lt;ReleaseInfo&gt;</markup> and <markup>&lt;Date&gt;</markup> contain the last revision date and release version number of the
documentation, not of the application. Of course, nothings prevents you from using the same revision numbers for both the application and the documentation.</para></listitem>
</itemizedlist>
</para>
</sect1>

<sect1 id="lists">
<title>Lists</title>
<para>
DocBook lists are very similar to their counterparts in HTML except that DocBook
contains several more types of lists for specialized purposes.</para>
<para>
The tags covered in this chapter are listed below.
<simplelist>
<member>SimpleList - List of single words or short phrases</member>
<member>Member - Member of a SimpleList </member>
<member>ItemizedList - List in which each entry is marked with a bullet, dash, or other dingbat</member>
<member>ListItem - Wrapper for the elements of items in an ItemizedList or OrderedList</member>
<member>OrderedList - List in which each entry is marked with a sequentially incremented label</member>
<member>VariableList - List in which each entry is composed of sets of one or more Terms with associated ListItems</member>
<member>VarListEntry - Wrapper for Term and its associated ListItem in a VariableList</member>
<member>Term - Hanging term attached to a ListItem within a VarListEntry in a VariableList</member>
<member>SegmentedList - List of sets of information</member>
<member>SegTitle - Title that pertains to one Seg in each SegListItem</member>
<member>SegListItem - List item in a SegmentedList</member>
<member>Seg - Component of a SegmentedList</member>
<member>QandASet - A question-and-answer set</member>
<member>QandAEntry - A question/answer set within a QandASet</member>
<member>Question - A question in a QandASet</member>
<member>Answer - An answer to a question posed in a QandASet</member>
<member>Procedure - List of operations to be performed</member>
<member>Step - Part of a Procedure</member>
<member>SubSteps - Wrapper for Steps within Steps</member>
</simplelist>
</para>
<sect2>
<title>The SimpleList</title>
<para>
The easiest of all the lists to use is the SimpleList. It is designed for lists
of short phrases (like a grocery list) and only requires two tags for building
the list as you can see in the example below. The <markup>&lt;Member&gt;</markup> tag can
only contain inline content, so a SimpleList cannot contain other lists.</para>
<para>
<example>
<title>Example of a SimpleList</title>
<screen>
<![ CDATA [
<simplelist>
<member>Apples</member>
<member>Oranges</member>
<member>Bananas</member>
<member>Grapefruit</member>
<member>Black Beans</member>
</simplelist>
]]>
</screen>
</example>
</para>
<para>
When converted to HTML, a SimpleList will look something like this:
<simplelist>
<member>Apples</member>
<member>Oranges</member>
<member>Bananas</member>
<member>Grapefruit</member>
<member>Black Beans</member>
</simplelist>
</para>
</sect2>

<sect2>
<title>The ItemizedList</title>
<para>
An ItemizedList is similar to the SimpleList except that each entry contains a
paragraph instead of just a short phrase, allowing you to put more
varied content in your list. ItemizedLists can contain other
lists.</para>
<para>
<example>
<title>Example of an ItemizedList</title>
<screen>
<![ CDATA [
<itemizedlist>
<listitem><para>Apples - my favorite fruit.</para></listitem>
<listitem><para>Oranges - yummy, but sticky.</para></listitem>
<listitem><para>Bananas - they ripen too quickly!</para></listitem>
<listitem><para>Grapefruit - great when eaten in halves.</para></listitem>
<listitem><para>Black Beans - go well with rice.</para></listitem>
</itemizedlist>
]]>
</screen>
</example>
</para>
<para>
The example will look something like this when converted to HTML:
<itemizedlist>
<listitem><para>Apples - my favorite fruit.</para></listitem>
<listitem><para>Oranges - yummy, but sticky.</para></listitem>
<listitem><para>Bananas - they ripen too quickly!</para></listitem>
<listitem><para>Grapefruit - great when eaten in halves.</para></listitem>
<listitem><para>Black Beans - go well with rice.</para></listitem>
</itemizedlist>
</para>

</sect2>

<sect2>
<title>The OrderedList</title>
<para>
The OrderedList is like the ItemizedList except that each ListItem is numbered
or lettered. The Numeration attribute specifies what kind of numbering will be
used and can be one of the following values: Arabic, Upperalpha, Loweralpha,
Upperroman, Lowerroman.  There are several other attributes that control the
appearance of an OrderedList. See the DocBook Reference for
details. OrderedLists can contain other lists. </para>

<para>
<example>
<title>Example of an OrderedList</title>
<screen> <![ CDATA [
<orderedlist numeration="arabic">
<listitem><para>Wake up.</para></listitem>
<listitem><para>Eat Breakfast.</para></listitem>
<listitem><para>Take a shower.</para></listitem>
<listitem><para>Contemplate my navel.</para></listitem>
<listitem><para>Go to Sleep.</para></listitem>
</orderedlist>
]]>
</screen>
</example>
</para>
<para>
The example will look something like this when converted to HTML:
<orderedlist numeration="arabic">
<listitem><para>Wake up.</para></listitem>
<listitem><para>Eat Breakfast.</para></listitem>
<listitem><para>Take a shower.</para></listitem>
<listitem><para>Contemplate my navel.</para></listitem>
<listitem><para>Go to Sleep.</para></listitem>
</orderedlist>
</para>
</sect2>

<sect2>
<title>The VariableList</title>
<para>
The VariableList is similar to an HTML definition list. It is used when you have
a list of terms and definitions. The VariableList consists of several
tags: <markup>&lt;VarListEntry&gt;</markup>, which is used to group related
terms together, <markup>&lt;Term&gt;</markup>, which contains the term, and
<markup>&lt;ListItem&gt;</markup>, which contains the decription of the term.</para>
<para>
<example>
<title>Example of a VariableList</title>
<screen> <![ CDATA [
<variablelist>
<varlistentry>
<term>Black Beans</term>
<listitem><para>My favorite black bean recipe is black bean
soup, but they also go well with rice.</para></listitem>
</varlistentry>
<varlistentry>
<term>Apples</term>
<term>Bananas</term>
<listitem><para>You can eat them straight, but they also go
well in salads and in desserts.</para></listitem>
</varlistentry>
</variablelist> ]]>
</screen>
</example>
</para>
<para>
When converted to HTML, the example VariableList will look something like this:
<variablelist>
<varlistentry>
<term>Black Beans</term>
<listitem><para>My favorite black bean recipe is black bean
soup, but they also go well with rice.</para></listitem>
</varlistentry>
<varlistentry>
<term>Apples</term>
<term>Bananas</term>
<listitem><para>You can eat them straight, but they also go
well in salads and in desserts.</para></listitem>
</varlistentry>
</variablelist>
</para>
</sect2>

<sect2>
<title>The SegmentedList</title>
<para>SegmentedLists are used to list information in distinct fields
like the contents of an address book. The name of each field is put inside of a
<markup>&lt;SegTitle&gt;</markup> tag. Then, use the <markup>&lt;SegListItem&gt;</markup> tag to start and end
each set of data. The actual data is put in the <markup>&lt;Seg&gt;</markup> tag.</para>
<para>
<example>
<title>Example of a SegmentedList</title>
<screen> <![ CDATA [
<segmentedlist>
<segtitle>Name</segtitle>
<segtitle>Occupation</segtitle>
<segtitle>Favorite Food</segtitle>
<seglistitem>
<seg>Tux</seg>
<seg>Linux mascot</seg>
<seg>Herring</seg>
</seglistitem>
<seglistitem>
<seg>Konqui</seg>
<seg>The KDE Dragon</seg>
<seg>Gnomes</seg>
</seglistitem>
</segmentedlist>
 ]]>
</screen>
</example>
</para>
<para>
This silly example looks something like this when converted to HTML:
<segmentedlist>
<segtitle>Name</segtitle>
<segtitle>Occupation</segtitle>
<segtitle>Favorite Food</segtitle>
<seglistitem>
<seg>Tux</seg>
<seg>Linux mascot</seg>
<seg>Herring</seg>
</seglistitem>
<seglistitem>
<seg>Konqui</seg>
<seg>The KDE Dragon</seg>
<seg>Gnomes</seg>
</seglistitem>
</segmentedlist>
</para>
</sect2>

<sect2>
<title>QandASet</title>
<para>
The QandASet is a specialized list designed specifically to deal with sets of
questions and answers, like you would see in a FAQ. Each set of questions and
answers are contained within a <markup>&lt;QandAEntry&gt;</markup> tag. The <markup>&lt;Question&gt;</markup> and
<markup>&lt;Answer&gt;</markup> tags contain the questions and answers respectively.</para>
<para>
<example>
<title>Example of a QandASet</title>
<screen> <![ CDATA [
<qandaset>
<qandaentry>
<question>
<para>What are little boys made of?</para>
</question>
<answer>
<para>Snips and snails and puppy dog tails.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>What are little girls made of?</para>
</question>
<answer>
<para>Sugar and spice and everything nice.</para>
</answer>
</qandaentry>
</qandaset> ]]>
</screen>
</example>
</para>
<para>
The QandASet looks something like this when converted to HTML:</para>
<qandaset>
<qandaentry>
<question>
<para>What are little boys made of?</para>
</question>
<answer>
<para>Snips and snails and puppy dog tails.</para>
</answer>
</qandaentry>
<qandaentry>
<question>
<para>What are little girls made of?</para>
</question>
<answer>
<para>Sugar and spice and everything nice.</para>
</answer>
</qandaentry>
</qandaset>
</sect2>

<sect2>
<title>Procedures</title>
<para>
Procedure Lists are a specialized OrderedList used for listing step-by-step
procedures like you would find in a recipe or Linux HowTo.
</para>
<para>
<example>
<title>Example of a Procedure List (Stolen from the DocBook reference)</title>
<screen> <![ CDATA [
<procedure>
<title>Waking Up</title>
<para>This is what you must do to awaken.</para>
<step performance="required">
<para>
Bring yourself to a hypnopompic state, either from an ongoing dream or by use of
your internal clock.  You may feel unable to move, but you will no longer be
dreaming. </para>
<para>Now you are ready for real-world readjustment.</para>
<substeps>
<step performance="optional">
<para>Roll over.</para>
</step>
<step performance="required">
<para>Squint out of one eye.</para>
</step>
</substeps>
</step>
<step performance="required">
<para>Yawn and rise from your bed.
</para>
</step>
</procedure> ]]>
</screen>
</example>
</para>
<para>
The above example would look something like this when converted to HTML:</para>
<procedure>
<title>Waking Up</title>
<para>This is what you must do to awaken.</para>
<step performance="required">
<para>
Bring yourself to a hypnopompic state, either from an ongoing dream or by use of
your internal clock.  You may feel unable to move, but you will no longer be
dreaming. </para>
<para>Now you are ready for real-world readjustment.</para>
<substeps>
<step performance="optional">
<para>Roll over.</para>
</step>
<step performance="required">
<para>Squint out of one eye.</para>
</step>
</substeps>
</step>
<step performance="required">
<para>Yawn and rise from your bed.</para>
</step>
</procedure>
</sect2>

</sect1>

<sect1 id="tables">
<title>Tables</title>
<para>
The tags covered in this section are listed below.
<simplelist>
<member>Table - Table in a document </member>
<member>InformalTable - Untitled table </member>
<member>THead - Heading row of a table</member>
<member>TFoot - Footer row of a table</member>
<member>TGroup - Wrapper for part of a Table that contains an array along with
its formatting information </member>
<member>TBody - Wrapper for the Rows of a Table or InformalTable</member>
<member>Row - Row in a TBody, THead, or TFoot </member>
<member>Entry - Cell in a table</member>
<member>EntryTbl - Subtable appearing as a table cell</member>
</simplelist></para>
<para>
Tables are used to organize data into a columnar format with optional titles,
headers, and footers. DocBook tables come in two varieties: the <markup>Table</markup>, which
requires a title, and the <markup>InformalTable</markup>, which does not have a title. All the
other characteristics of these two table types are the same. </para>
<para>
A table consists of formatting information and data entries. There are quite a
few attributes that can be adjusted to tweak the display of your data. This
tutorial will only cover the basic formatting attributes. For more details, you
should refer to the DocBook Reference.</para>
<para>
Tables begin with the <markup>&lt;Table&gt;</markup> or <markup>&lt;InformalTable&gt;</markup> tag. Next,
define a title using the <markup>&lt;Title&gt;</markup> tag if you are using a regular table.
Finally, we get to the <markup>&lt;TGroup&gt;</markup> tag which contains all of the header,
footer, and row information. You can have more than one TGroup if you wish to
change formatting options for a section of the table. The
<markup>&lt;TGroup&gt;</markup> tag has a number of optional formatting
parameters, but the COLS attribute, which specifies the number of columns, is
required. The <markup>&lt;THead&gt;</markup>, <markup>&lt;TFoot&gt;</markup>, and
<markup>&lt;TBody&gt;</markup> contain the data in your table. Data in the THead appears
at the top of the table, TBody appears in the middle, and TFoot appears at the
end of the table.</para> <para> Data in a table is contained in rows and
entries, labelled with the <markup>&lt;Row&gt;</markup> and <markup>&lt;Entry&gt;</markup> tags
respectively. Use the <markup>&lt;Row&gt;</markup> tag to begin a row, an
<markup>&lt;Entry&gt;</markup> tag for each item of data, and a closing
<markup>&lt;Row&gt;</markup> tag to end that row. If you want to embed a table within a
table, you must use the <markup>&lt;EntryTbl&gt;</markup> tag</para> <para>
<example>
<title>Example of a Table</title>
<screen> <![ CDATA [
<table>
<title>Mouse Mileage</title>
<tgroup cols="3">
<thead>
<row>
<entry>Month</entry>
<entry>Week</entry>
<entry>Feet Traveled</entry>
</row>
</thead>
<tfoot>
<row>
<entry>Total</entry>
<entry></entry>
<entry>1753</entry>
</row>
</tfoot>
<tbody>
<row>
<entry>August</entry>
<entry>1</entry>
<entry>987</entry>
</row>
<row>
<entry>August</entry>
<entry>2</entry>
<entry>657</entry>
</row>
<row>
<entry>August</entry>
<entry>3</entry>
<entry>109</entry>
</row>
</tbody>
</tgroup>
</table> ]]>
</screen>
</example>
</para>

<para>
The above example would look something like this when converted to HTML:
<table>
<title>Mouse Mileage</title>
<tgroup cols="3">
<thead>
<row>
<entry>Month</entry>
<entry>Week</entry>
<entry>Feet Traveled</entry>
</row>
</thead>
<tfoot>
<row>
<entry>Total</entry>
<entry></entry>
<entry>1753</entry>
</row>
</tfoot>
<tbody>
<row>
<entry>August</entry>
<entry>1</entry>
<entry>987</entry>
</row>
<row>
<entry>August</entry>
<entry>2</entry>
<entry>657</entry>
</row>
<row>
<entry>August</entry>
<entry>3</entry>
<entry>109</entry>
</row>
</tbody>
</tgroup>
</table>
</para>
</sect1>

<sect1 id="graphics">
<title>Graphics</title>
<para>
Below is a list of tags related to graphical objects:
<simplelist>
<member>ScreenInfo - Information about how a ScreenShot was produced</member>
<member>ScreenShot - Representation  of what the user sees or might see on a computer
screen</member>
<member>Graphic - Graphical data, or a pointer to an external entity containing such
data, to be rendered as an object, not in-line</member>
<member>InlineGraphic - Graphical data, or a pointer to an external entity containing
such data, to be rendered in-line</member>
</simplelist>
</para>
<para>
Documentation for graphical applications demands screenshots, pictures of icons
and buttons, and other graphical elements. DocBook has tags to
support screenshots, graphics, and inline graphics.  The examples below
contain the same picture as a screenshot and as an inline graphic. </para>
<important><para>Please do not use
GIF files in KDE documentation because the compression algorithm used in
the GIF format has problematic patent issues. The preferred format is now
PNG.</para></important>
<para>
<example>
<title>An Inline Graphic</title>
<screen>
<![ CDATA [
<para>
Here are a bunch of rectangles:
<inlinegraphic fileref="rectangles.png"
format="png" align="center"></inlinegraphic>
</para>  ]]>
</screen>
</example>
</para>
<para>
The <markup>&lt;InlineGraphic&gt;</markup> tag is a graphic to be displayed
alongside text. The FileRef attribute contains the name of the graphic file,
the Format attribute contains the type of the graphic file, and the optional
Align attribute changes the alignment of the graphic. The example will
look something like this when converted to HTML:</para>
<para>
Here are a bunch of rectangles: <inlinegraphic fileref="rectangles.png" format="png" align="center"></inlinegraphic> </para>
<para>
<example>
<title>A Screenshot</title>
<screen>
<![ CDATA [
<screenshot>
<screeninfo>Colored Rectangles</screeninfo>
<graphic fileref="rectangles.png" format="png"></graphic>
</screenshot> ]]>
</screen>
</example>
</para>
<para>
The <markup>&lt;ScreenShot&gt;</markup> tag designates a screenshot with the
<markup>&lt;ScreenInfo&gt;</markup> tag providing a textual description of the
screen shot. The heart of the ScreenShot is the Graphic tag which points to a
graphic file as explained in the first example. A screen shot looks something
like this when converted to HTML:
<screenshot>
<screeninfo>Colored Rectangles</screeninfo>
<graphic fileref="rectangles.png" format="png"></graphic>
</screenshot>
</para>
</sect1>

<sect1 id="links">
<title>Links</title>
<para>
<simplelist>
<member>Anchor - Spot in text</member>
<member>Email - Email address in an Address</member>
<member>Link - Hypertext link</member>
<member>ULink - A link that addresses its target by means of a URL, a Uniform
Resource Locator</member>
<!--
<Member>Callout - Description linked to Areas in a graphic or code
example</Member>
<Member>CalloutList - Collection of callout descriptions</Member>
<Member>GraphicCO - Graphic that contains a specification
of areas within it that have associated callouts</Member>
<Member>ProgramListingCO - Listing of a program or related information containing areas
with associated callouts</Member>
<Member>ScreenCO - Screen containing areas with associated callouts</Member>
<Member>CO - Callout area specification embedded in a code example</Member>
<Member>Area - Region defined in a graphic or code example</Member>
<Member>AreaSet - Set of related areas in a graphic or code example</Member>
<Member>AreaSpec - Collection of regions in a graphic or code example</Member>
-->
</simplelist>
</para>
<para>
Linking in DocBook is very similar to linking in HTML.  The
<markup>&lt;Link&gt;</markup> tag is used to link to any element with an ID in a
document, and can also be used to link to other local files as well. The
<markup>&lt;ULink&gt;</markup> tag is used when you need to link to a
URL. The <markup>&lt;Email&gt;</markup> tag is a specialized form of the ULink
tag used for email addresses. <markup>&lt;Anchor&gt;</markup> is used to
mark a spot in the text that you want to reference later with a Link.</para>
<para> <example>
<title>Many kinds of Links</title>
<screen>
<![ CDATA [
<para id="mylink">
This is a paragraph that will be linked to with a link tag. Oh, and by
the way, check out <ulink url="http://www.kde.org">my favorite web
site</ulink> while you are here. <anchor id="anotherlink"> Kilroy was
here.</para> <para>
The above paragraph can be located <link linkend="mylink">here</link>.
My email address is <email>konqui@kde.org</email></para>
 ]]>
</screen>
</example>
</para>
<para>
Note that Link uses the LinkEnd attribute and ULink uses the URL attribute for
their link targets. The above example
would be displayed something like this when converted to HTML: </para>
<para id="mylink">
This is a paragraph that will be linked to with a <markup>link</markup> tag. Oh, and by
the way, check out <ulink url="http://www.kde.org">my favorite web
site</ulink> while you are here.<anchor id="anotherlink"> Kilroy was
here.</para>
<para>
The above paragraph can be located <link linkend="mylink">here</link>.
My email address is <email>konqui@kde.org</email></para>
</sect1>

<sect1 id="interface">
<title>Describing the Application's Interface</title>

<sect2 id="examples">
<title>Examples</title>
<para>
These are the tags covered in this section:
<simplelist>
<member>LiteralLayout - Wrapper for lines set off from the main text that are not tagged as Screens, Examples, or ProgramListing, in
     which line breaks and leading white space are to be regarded as significant
</member>
<member>Example - Example of a computer program or related information</member>
<member>InformalExample - Untitled Example</member>
<member>ProgramListing - Listing of all or part of a program </member>
<member>Screen - Text that a user sees or might see on a computer screen</member>
</simplelist>
</para>

<para>
There are many situations where you must include examples of source code,
commands, or GUI actions in your documentation. DocBook has many tags to support
these needs. Whenever you want to include examples in your document, just put an
<markup>&lt;Example&gt;</markup> or <markup>&lt;InformalExample&gt;</markup> tag
around the example text or graphic. </para>
<para>
<example>
<title>Example of an Example</title>
<screen>
<![ CDATA [
<example>
<title>A BASIC Example</title>
<programlisting>
10 PRINT "HELLO WORLD"
20 GOTO 10
</programlisting>
</example>
 ]]>
</screen>
</example>
</para>
<para>
In this first example, we have a listing of a simple BASIC program. The
code contained in the <markup>&lt;ProgramListing&gt;</markup> tag is displayed
with the spacing and line breaks intact which is very useful for code examples
and similar situations where you must preserve the literal formatting.
The LiteralLayout and Screen tags work in the same way, but are used to
indicate different types of content. Screen contains output that would
appear on the screen, while LiteralLayout is used for any other text that
must be rendered with line breaks and tabs.</para>
<para>
The example would look something like this when converted to HTML:
<example>
<title>A BASIC Example</title>
<programlisting>
10 PRINT "HELLO WORLD"
20 GOTO 10
</programlisting>
</example>
</para>
<para>
One problem can occur with the LiteralLayout, ProgramListing, and Screen tags:
all text is rendered literally, but DocBook tags are still interpreted as tags
and not text. What do you do when you need to show text without having your tags
interpreted? The answer is to use &lt;![ CDATA [ ]]&gt;, which labels the text
contained within the inner brackets as character data that should not be
interpreted by the SGML parser. Any text within the brackets will remain
as-is after the conversion, so the example above will successfully
reproduce its tags.
<example>
<title>Example of a Markup Example</title>
<screen>
<![ CDATA [
<example>
<title>A Markup Example</title>
<screen> ]]>
&lt;![ CDATA [
&lt;Para&gt;This is a DocBook example.&lt;/Para&gt;
 ]]&gt;
<![ CDATA [
</screen>
</example>
 ]]>
</screen>
</example>
</para>
<para>
This is what the markup example would look like when converted to HTML:
<example>
<title>A Markup Example</title>
<screen>
<![ CDATA [
<para>This is a paragraph.</para> ]]>
</screen>
</example>
</para>
</sect2>

<sect2>
<title>Command Line</title>
<para> The following tags are used to label elements of a command:
<simplelist>
<member>Type - Classification of a value</member>
<member>Literal - Literal string, used in-line, that is part of data in a computer</member>
<member>UserInput - Data entered by the user</member>
<member>Symbol - Name that is replaced by a value before processing</member>
<member>Replaceable - Content that may be replaced in a synopsis or command line</member>
<member>Filename - Name of a file, possibly including pathname</member>
<member>Prompt - Character indicating the start of an input field in a computer display.</member>
<member>ParamDef - Data type information and the name of the Parameter this information applies to</member>
<member>Parameter - Part of an instruction to a computer</member>
<member>Option - Option for a computer program command</member>
<member>EnVar - Environmental variable</member>
<member>Command - Executable program, or the entry a user makes to execute a command</member>
<member>CmdSynopsis - Synopsis for a Command</member>
<member>Arg - Argument in a CmdSynopsis</member>
<member>ComputerOutput - Data presented to the user by a computer</member>
</simplelist>
</para>
<para>
There are two situations in which you want to describe a command: showing an
example of a command typed on the command line and a detailed description of all
of the arguments and options to a command like you would see in a man page.
</para>
<para>DocBook supports both of these contexts with the
<markup>&lt;Command&gt;</markup> and <markup>&lt;CmdSynopsis&gt;</markup> tags.
<example>
<title>A Command and its Output</title>
<screen>
<![ CDATA [
<screen>
<prompt>bash$</prompt> <command>twiddle <replaceable>myfile</replaceable>
</command>
twiddling myfile.....done!
</screen> ]]>
</screen>
</example>
Would appear as:
<screen>
<prompt>bash$</prompt> <command>twiddle -c 1 <replaceable>myfile</replaceable>
</command>
twiddling myfile.....done!
</screen>
</para>
<para>
The command tag can also be used within a paragraph to mark the name of a
command. For example:</para>
<para>
<informalexample>
<screen>
<![ CDATA [
The <command>twiddle</command> command is used to twiddle
files. Twiddled files will be marked with the .twid extension, so if I <command>twiddle</command>
<replaceable>myfile</replaceable> then it will become
<replaceable>myfile.twid</replaceable>. Errors are written to the
file <filename>twiddle.err</filename>. ]]>
</screen>
</informalexample>
The <command>twiddle</command> command is used to twiddle
files. Twiddled files will be marked with the .twid extension, so if I <command>twiddle</command>
<replaceable>myfile</replaceable> then it will become
<replaceable>myfile.twid</replaceable>. Errors are written to the
file <filename>twiddle.err</filename>.
</para>
<para> The <markup>&lt;Prompt&gt;</markup> tag is simply used to label the
prompt in a command line. Replaceable labels text that should be replaced by the
user. In the example, <filename>myfile</filename> is just an arbitrary name for
a file since we don't know and don't care what the name of the file is, we just
want to show how the command is used. If a filename in a command is known, use
the <markup>&lt;Filename&gt;</markup> tag instead.</para> <para> Marking up a
CmdSynopsis is a bit more difficult. Here is an example from the DocBook
Reference:
<example> <title>Foo Command Synopsis</title> <screen>
<![ CDATA [
<cmdsynopsis>
   <!-- This is a synopsis for the command foo.
        The options -a and -x are optional and exclusive
        The option -c takes a cheese and is optional and repeatable
        The options -t and -k are referred to in another fragment
        The options -i, -j, and -k are required and exclusive
        The option -f takes a filename and is required
        The -t and -k options specify the kind of milk and mold in an
            optional and repeatable group
   -->
   <command>foo</command>
   <group>
     <arg>-a</arg>
     <arg>-x</arg>
   </group>
   <group>
   <arg rep="repeat">-c <replaceable>cheese</replaceable></arg>
   <synopfragmentref linkend="cheesetype">cheesetype</synopfragmentref>
   </group>
   <group choice="req">
     <arg>-i</arg>
     <arg>-j</arg>
     <arg>-k</arg>
   </group>
   <arg choice="req">-f <replaceable>filename</replaceable></arg>
   <synopfragment id="cheesetype">
     <group rep="repeat">
        <arg>-t <replaceable>milk</replaceable></arg>
        <arg>-k <replaceable>mold</replaceable></arg>
     </group>
   </synopfragment>
 </cmdsynopsis>
 ]]>
</screen>
</example>
Which looks like this:
<cmdsynopsis>
   <command>foo</command>
   <group>
     <arg>-a</arg>
     <arg>-x</arg>
   </group>
   <group>
   <arg repeat>-c <replaceable>cheese</replaceable></arg>
   <synopfragmentref linkend="cheesetype">cheesetype</synopfragmentref>
   </group>
   <group req>
     <arg>-i</arg>
     <arg>-j</arg>
     <arg>-k</arg>
   </group>
   <arg req>-f <replaceable>filename</replaceable></arg>
   <synopfragment id="cheesetype">
     <group repeat>
        <arg>-t <replaceable>milk</replaceable></arg>
        <arg>-k <replaceable>mold</replaceable></arg>
     </group>
   </synopfragment>
 </cmdsynopsis>
</para>
<para>
A CmdSynopsis contains one Command, Groups of related Args, independent Args,
and SynopFragments. The <markup>&lt;Arg&gt;</markup> labels arguments to the
command. Arg has two attributes: choice and rep. Choice is used to indicate
whether the tag is optional (the default), required (req), or to be displayed
without any decoration (plain). The <markup>&lt;Group&gt;</markup> tag is used
to group together related Args. SynopFragment is the most complicated of
the CmdSynopsis tags. It is used to provide a more detailed description
of options for an argument. A SynopFragment consists of two parts: the
SynopFragment, which contains the additional Args, and the
SynopFragmentRef which points to the detailed description.
</para>
</sect2>

<sect2 id="gui">
<title>GUI Interface Elements</title>
<para>
<simplelist>
<member>Accel - Keycap used with a meta key to activate a graphical user interface</member>
<member>KeyCap - Text printed on a physical key on a computer keyboard, not necessarily
the same thing as a KeyCode</member>
<member>KeyCode - Computer's numeric designation of a key on a computer
keyboard</member>
<member>KeyCombo - Combination of input actions</member>
<member>KeySym - Key
symbol name, which is not necessarily the same thing as a Keycap</member>
<member>MenuChoice - Menu selection or series of such selections</member>
<member>MouseButton - Conventional name of a mouse button</member>
<member>Interface - Element of a graphical user interface</member>
<member>InterfaceDefinition - Full or short name of a  formal specification of a
graphical user interface</member>
<member>GUIButton - Text on a button in a graphical user interface</member>
<member>GUIIcon - Graphic and, or, text appearing as a icon in a graphical user interface</member>
<member>GUILabel - Text in a graphical user interface</member>
<member>GUIMenu - Name of a menu in a graphical user interface</member>
<member>GUIMenuItem - Name of a terminal menu item in a graphical user interface</member>
<member>GUISubmenu - Name of a submenu in a graphical user interface</member>
<member>Action - Function invoked in response to a user event </member>
</simplelist>
</para>
<para>
One could almost say that there are too many tags in DocBook for describing GUI
elements. Most of the tags listed above can be used in a variety of contexts,
but a few, such as <markup>&lt;KeyCap&gt;</markup>, must be used within other
tags.  The example and explanation below will not cover all of the tags listed
above. This list is for your convenience since the DocBook Reference does not
group tags by their function.</para>
<para>
All of the GUI tags can be used within the context of a regular paragraph. So if
I wanted to talk about the Trash icon or the Empty Trash button, I would just
use the <markup>&lt;GUIIcon&gt;</markup> and <markup>&lt;GUIButton&gt;</markup>
tags like this: &lt;GUIIcon&gt;Trash&lt;/GUIIcon&gt; icon,
&lt;GUIButton&gt;Empty Trash&lt;/GUIButton&gt; button.  Note that all GUI tags
may also contain inline graphics.</para>
<para>
Below is a more complicated example of GUI tag usage from the template.</para>

<para>
<example>
<title>GUIMenu and Shortcut example</title>
<screen>
<![ CDATA [
<variablelist>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo><keycap>Ctrl</keycap><keycap>n</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>New</guimenuitem>
</menuchoice></term>
<listitem><para><action>Creates a new document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo><keycap>Ctrl</keycap><keycap>s</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Save</guimenuitem>
</menuchoice></term>
<listitem><para><action>Saves the document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo><keycap>Ctrl</keycap><keycap>q</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Quit</guimenuitem>
</menuchoice></term>
<listitem><para><action>Quits <application>Kapp</application></action></para></listitem>
</varlistentry>
</variablelist>
 ]]>
</screen>
</example>
</para>
<para>
I hope your eyes haven't glazed over at the sight of all those tags! The most
complicated part of this example is the <markup>&lt;Shortcut&gt;</markup> tag
which labels keyboard shortcuts for menuitems. Shortcut contains either a
KeyCombo or a single KeyCap that contains the key or group of keys the use would
press to invoke that menuitem from the keyboard. It is important to use the
KeyCombo and KeyCap tags within the Shortcut tag because it is incorrect to use
character data (the Ctrl-q text for example) within a Shortcut.</para>
<para>
Other tags worth mentioning from the example are MenuChoice, Action, and
Application. MenuChoice labels a menu choice and should contain the Shortcut (if
any) the name of the menu in GUIMenu, and the name of the menuitem in
GUIMenuItem. Action simply labels a phrase that describes what the menuitem (or
other interface element) does. Application is a tag used to label the names of
Applications.</para>
<para>The example would look something like this when converted to HTML:
<variablelist>
<varlistentry>
<term>
<menuchoice>
<shortcut>
<keycombo><keycap>Ctrl</keycap><keycap>n</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>New</guimenuitem>
</menuchoice></term>
<listitem><para><action>Creates a new document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo><keycap>Ctrl</keycap><keycap>s</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Save</guimenuitem>
</menuchoice></term>
<listitem><para><action>Saves the document</action></para></listitem>
</varlistentry>
<varlistentry>
<term><menuchoice>
<shortcut>
<keycombo><keycap>Ctrl</keycap><keycap>q</keycap></keycombo>
</shortcut>
<guimenu>File</guimenu>
<guimenuitem>Quit</guimenuitem>
</menuchoice></term>
<listitem><para><action>Quits <application>Kapp</application></action></para></listitem>
</varlistentry>
</variablelist>
</para>
</sect2>

</sect1>

<sect1 id="misc">
<title>Miscellaneous Useful Tags</title>
<para></para>

<sect2 id="label">
<title>Labelling Tags</title>
<para>
<simplelist>
<member>Application - Name of a software program</member>
<member>Markup - String of formatting Markup in text,  which it is desired to represent
literally</member>
</simplelist>
The application tag labels the name of an application.
The <markup>&lt;Markup&gt;</markup> tag is used to label marked up text, such as
HTML or TeX tags</para>
</sect2>

<sect2 id="formatting">
<title>Formatting Tags</title>
<para>
<simplelist>
<member>Emphasis - Emphasized text</member>
<member>Subscript - Subscript</member>
<member>Superscript - Superscript</member>
</simplelist>
These tags are fairly self-explanatory. <emphasis>This is an emaphasized
sentence with <superscript>Superscripted</superscript> and
<subscript>Subscripted</subscript> text.</emphasis></para>
</sect2>

<sect2 id="warnings">
<title>Warnings, Tips, and Notes</title>
<para>
The following tags are used to set off paragraphs from the rest of the text.
<simplelist>
<member>Caution - Admonition set off from the text</member>
<member>Important - Admonition set off from the text</member>
<member>Note - Message to the user, set off from the text</member>
<member>Tip - Suggestion to the user, set off from the text</member>
<member>Warning - Admonition set off from the text</member>
</simplelist>
All of the above tags wrap around paragraphs like in this example:
<informalexample>
<screen>
<![ CDATA [ <warning><para>Danger, Will Robinson!</para></warning> ]]>
</screen>
</informalexample>
The example would look something like this:</para>
<warning><para>Danger, Will Robinson!</para></warning>
</sect2>

</sect1>

</chapter>

<chapter id="next">
<title>Where to Go Next</title>

<para>
There are several useful parts of DocBook that are not discussed in this
Tutorial.  These include Callouts, Indexes, Glossaries, and Reference Pages. If
you need to use any of these features, you should consult the DocBook Reference
and/or purchase a DocBook book.</para>

<sect1 id="resources">
<title>DocBook and SGML resources</title>
<para>
Below are a list of KDE and other resources that will help you acquire and get started with DocBook.
<itemizedlist>
<listitem><para><ulink url="http://www.kde.org/documentation/docbook/index.html">KDE DocBook page (Contains this crash course)</ulink></para></listitem>
<listitem><para><ulink url="http://www.oasis-open.org/docbook/">OASIS DocBook site</ulink></para></listitem>
<listitem><para><ulink url="http://nwalsh.com/docbook/defguide/qr/quickref.htm"> DocBook 3.1 Quick
Reference</ulink></para> </listitem>
<listitem>
<para><ulink url="http://nis-www.lanl.gov/~rosalia/mydocs/docbook-intro.html">
DocBook Intro</ulink></para></listitem>
<listitem><para><ulink url="http://www.freebsd.org/tutorials/docproj-primer/book.html">FreeBSD
Documentation Primer</ulink></para></listitem>
<listitem>
<para><ulink url="http://nwalsh.com/docbook/">Norman Walsh's DocBook
Site</ulink></para>
</listitem>
<listitem>
<para><ulink url="http://www-tei.uic.edu/orgs/tei/sgml/teip3sg/index.html">TEI introduction to SGML</ulink></para>
</listitem>
<listitem><para>The <ulink url="http://metalab.unc.edu/godoy/using-docbook/using-docbook.html">Using DocBook HOWTO</ulink> of the Linux Documentation Project</para></listitem>
</itemizedlist>

</para>
</sect1>
</chapter>
</book>
