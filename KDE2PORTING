$Id$

This document contains the changes you have to apply to programs written for
KDE1.1 when you want to port them to KDE2.0.

As a start you should have a look at doc/porting.doc in the Qt package.

//////////////////////////////////////////////////////////////////////
// * General

We did our best to clean up the header files of kdelibs, so they do
not include unnecessary bloat for your application. As a consequence, you
may notice that some header files are missing from your source files as
they have been included before by kapp.h for example. There is a script
in kdesdk/scripts called "fixheaders" that takes care of most of these
cases. Just call "make -k 2>&1 | perl .../fixheaders" and it will try
to look after the error messages and add includes as it recognize the
errors.


//////////////////////////////////////////////////////////////////////
// * kdelibs/khtmlw

khtmlw has been replaced with khtml.
- KHTMLView has vanished. Just use KHTMLWidget, which does scrollbar
  managing for free.
- A lot of the API has changed. If you just want to open a file/URL,
  you just need to do:
	KHTMLWidget *w = new KHTMLWidget();
	w->openURL(myURL);
- khtml uses Qstring's instead of char *'s now. This means, that most
  of the api has changed. In all functions:
     const char * -> QString
     QStrList -> QStringList
  The only exception for the moment is KHTMLWidget::write(), which does
  also exist in a const char * version.
- you won't need the getKHTMLWiget function anymore. Just replace
	getKHTMLWidget->xxx() with xxx()
- xxx(QString) -> xxx(const QString &)
- consistent naming. All getXyz() functions are renamed to xyz()
- replaced/changed functions:
	KHTMLWidget::setDefaultFontBase() -> setFontSizes().
	x/yOffset()                       -> contentsX/Y()
	getSelectedText(QString &)        -> QString selectedText()
	findTextEnd() has vanished. just remove the call from your code
	gotoXY(x, y)                      -> setContentsPos( x, y)
	docWidth()			  -> contentsWidth()
	docHeight()			  -> contentsHeight()
	...
- Don't forget to change the link-flags! (-lkhtml -lkjava instead of -lkhtmlw)


//////////////////////////////////////////////////////////////////////
// * KIntegerLine, KIntLineEdit

  KIntegerLine and KIntLineEdit  have been replaced by KIntNumInput.
  The new header file is called knuminput.h.

  The new KIntNumInput can have an optional slider attached, ensures
  that the entered value is in a given range (use MAX_INT or similar
  if you don't care about the range) and can maintain a descriptive
  label and also a unit for the edited value.

  The API is almost the same and it simplifies existing code a bit,
  so give it a try. If you need more functionality, please contact
  me (Dirk A. Mueller <mueller@kde.org>).

  The additional class KDoubleNumInput gives you the same look & feel,
  but allows you to edit floating point numbers.

//////////////////////////////////////////////////////////////////////
// * KLocale

- i18n is no longer a macro

  KApplication::getApplication()->getLocale()->translate

  but a function on it's own. klocale is obsolete and replace every call
  to klocale->translate with i18n.

  The return value of i18n is also no longer a const char*,
  but a unicode qstring.


//////////////////////////////////////////////////////////////////////
// * KApplication

  doesn't hold any longer a KLocale instance. With this getLocale()
  and isLocaleInstantiated are now replaced by KGlobal::locale()

  it also doesn't hold a KiconLoader instance. As this also getIconLoader()
  has been removed. Replace kapp->getIconLoader()->loadIcon() with
  BarIcon() or use KGlobal::iconLoader() instead of getIconLoader()

  kde_*dir() have been removed as they require a unique top level directory
  for all applications (KDEDIR). This concept doesn't exist in KDE 2.0
  any more.

  Replace code that uses kde_*dir() + filename with calls to
  locate(filetype, filename) where filetype is what * used to be
  in kde_*dir(). locate is defined as function in kstddirs.h to call
  KGlobal::dirs()->findResource

  generalFont() and fixedFont() are deprecated and will be removed soon.
  Please use KGlobal::generalFont() and KGlobal::fixedFont() instead.

  appName() is deprecated. Please use QApplication::name() or instanceName
  instead.

  The methods tempSaveName() and checkRecoverFile() return QString
  now. The returned values must _not_ be free()d.

  helpMenu() has been moved to KTMainWindow. aboutKDE(), aboutApp() and
  appHelpActivated() have all been removed See section for KTMainWindow
  for more info.

  The third argument for KApplication used to be optional. But as it's
  value is important for more things in KDE 2.0 (like DCOP), we decided
  to make it's importance more clear and make it mandatory. Just add the
  application name - preferably the name of the binary.


//////////////////////////////////////////////////////////////////////
// * KDNDIcon, KDNDDropZone, KDNDWidget, kdecore/drag.h

KDE Drag and Drop is Dead.  Long live Qt Xdnd.

Xdnd is better anyway, because it has been adopted by all the other
major GUI toolkits still under active development (this precludes
Motif, but maybe we can convince the lesstif guys!).  Some changes
are necessary to convert your old KDND-based stuff to Qt DND.

- Remove drag.h from all of your sources / header files.
- Remove KDNDDropZone object creations.  Instead of creating an
  object of this type and then connecting it to some arbitrary slot
  to handle drops, call "setAcceptDrops(true)" in your widget
  constructor and then override the protected methods dragEnterEvent,
  dragMoveEvent, dragLeaveEvent, and dropEvent.
- You should be aware that to handle drops, you will either have to
  inherit a widget and then override the methods mentioned above,
  or install an event handler for the widget in that widget's parent,
  and then handle QEvent::DragMove or QEvent::Drop inside there (if
  you want to avoid inheritance).
- You can emulate the old DndURL drop-type behaviour with the Qt
  Drag Object type QUriList.
- You can start a drag from inside your widget's mouseMoveEvent
  method if you wish.
- Qt includes a Drag and Drop tutorial.  We suggest you read that
  now if you are confused.
- QMultiLineEdit has already a DnD interface that accepts text/*
  If you want to add support for other mimetypes, you need to
  re-implement all DnD-methods (also dragMoveEvent()) and pass
  QTextDrag's to the parent methods.
- QTextDrag also accepts text/uri-list, which means that you
  always need to check for QUriDrag first if you want to get
  both working.
- The mimetype for Uri's is now text/uri-list. If you've used
  the proprietary Qt 1.x url/url, you need to adjust that.

//////////////////////////////////////////////////////////////////////
// * KConfigBase, KConfig, KSimpleConfig

  These classes have been largely re-implemented.  The external API
  remains mostly the same, with the single notable change that
  the groupIterator and entryIterator methods have been removed and
  instead replaced by groupList (which returns a QStringList of groups)
  and entryMap(const QString &group) (which returns a QMap of entries
  in the specified group).  This is due to internal changes in KConfig
  which would make providing iterators possibly rather difficult.

  Much more extensive documentation on the KConfig and friends API can
  be found in the kdoc generated documentation from the header files,
  and in kdecore/KCONFIG_DESIGN.

  To use the new iterator, you will probably want to do something like
  this:

  QMap<QString, QString> tmpMap = config->entryMap(myGroup);
  QMap<QString, QString>::Iterator aIt(tmpMap.begin());

  for (; aIt != tmpMap.end(); ++aIt) {
   // body here.  Access iterator key as aIt.key(),
   // data as *aIt.
  }

//////////////////////////////////////////////////////////////////////
// * libkfm has disappeared

  Lots of other functionalities have been taken out of kfm, some being
  now in libkio, some in libkonq.
  Replacement table :
   KFM::download         -> KIONetAccess::download (kdelibs/kio/kio_netaccess.h)
   KFM::removeTempFile   -> KIONetAccess::removeTempFile
   refreshDesktop, sortDesktop, selectRootIcons : removed; kdesktop handles it
   KFM::configure        -> see konqueror interface (IDL, soon DCOP)
   KFM::openURL          -> "(void) new KRun (url)" (kdelibs/kio/krun.h)
   KFM::refreshDirectory -> not needed anymore since konqy/kdesktop use KDirWatch
   KFM::openProperties   -> "(void) new PropertiesDialog (url)" (kdebase/libkonq/kpropsdlg.h)
   KFM::exec             -> "(void) new KRun (url)" (kdelibs/kio/krun.h)
   KFM::copy, KFM::move  -> KIOJob (async, see kio_job.h)
                            or KIONetAccess (sync, see kio_netaccess.h)
   DlgLocation           -> Use KLineEditDlg (kdeui/klineeditdlg.h) instead

////////////////////////////////////////////////////////////////////////
// * KGlobal: access to KDE global objects.

KGlobal allows centralized access to KDE global objects without including
extraneous headers. object creation is deferred if possible.

All methods are static and headers for returned types are not included. You
must have created a KApplication object before the methods can be used.

	#include<kglobal.h>
	#include<kconfig.h>     // Needed to use KConfig
	#include<klocale.h>     // Needed to use KLocale
	#include<kiconloader.h> //

	...
        	KConfig *appcfg = KGlobal::config();
	        QString mystr	 = i18n( "This is a string" );


		KIconLoader *loader = KGlobal::iconLoader();

////////////////////////////////////////////////////////////////////////
// * KIconLoader

KIconLoader in 1.1 used to mix icons for applications and for toolbars.
This has changed, so you may notice that your application doesn't find
the right icons. loadIcon (used by BarIcon) returns only toolbar icons.
If you need icons for applications, use loadApplicationIcon.
loadMiniIcon and loadApplicationMiniIcon have been removed, instead
loadApplicationIcon now takes a "size" argument where you can specify the
size of the icon (small, medium, large).
The other big change you may notice, is that ICON and Icon have been
removed as they caused big confusion for not loading application icons
(see above). For this we added BarIcon which does the same as ICON before.
The third change in this row is that loadIcon doesn't need the extension
anymore, but looks for standard extensions (png, xpm) itself. If you hard-
coded .xpm, loadIcon will issue a warning at runtime, but will still work
in stripping off the .xpm part

////////////////////////////////////////////////////////////////////////
// * KDialog

KDialog is no longer defined in kwizard.h. Include kdialog.h instead.

////////////////////////////////////////////////////////////////////////
// * KTMainWidget

view_* public variables do no longer exist. There is really no reason
for an app to use this information. If you do need it anyway, use
mainViewGeometry() instead.

////////////////////////////////////////////////////////////////////////
// * KStartParams

KStartParams is a new class for easy command-line argument parsing.
It's included in kdecore and defined in kstartparams.h. See
html-documentation for further informations about using.

////////////////////////////////////////////////////////////////////////
// * automoc

automoc has been removed from the admin directory. It has been replaced
by am_edit which provides a lot of additional features.

////////////////////////////////////////////////////////////////////////
// * kcharsets

The kcharsets class has been completely rewritten, and most of it has
vanished, since support for it moved to Qt.

Most applications will only need to replace kapp->getKCharsets() with
KGlobal::charsets().

For conversion of various input formats to QStrings, please have a
look at QTextCodec and classes derived from it.

Character entities are now  converted from and to QChars. The name has
changed from convertTag to fromEntity and toEntity.

To get a font, which can display a certain charset (if such a font
exists), you can use the KCharsets::setQFont methods. Input is a font and
a charset. Kcharsets tries to find an output font, which matches the
input font most closely, but can display the given charset.

////////////////////////////////////////////////////////////////////////
// * KWizard, KNoteBook

KWizard is based on QWizard now. The API has changed. Consult Qt's
documentation and kdelibs/kdetest/kwizardtest.cpp for an example use.
KNoteBook (deeply entwined with the former KWizard) has been removed until
someone is willing to port it to work with the new wizard. If you want to
use it you'll find the necessary files in kdegraphics/kiconedit.

////////////////////////////////////////////////////////////////////////
// * KSpinBox, KNumericSpinBox

These classes have been replaced by QSpinBox. API is almost the same
HINTS:
  - valueincreased()/valuedecreased -> valueChanged()
  - getValue() -> value()

////////////////////////////////////////////////////////////////////////
// * KClipboard

KClipboard has been removed. In case you've been using KClipboard,
QClipboard is the way to go now, as it has all the functionality the K
version had, and more.

////////////////////////////////////////////////////////////////////////
// * KPanner, KNewPanner

KPanner and KNewPanner have been removed.  QSplitter does everything
KPanner did and more. The api is similar, but not compatible.
Basically to set it up so that you have a vertical splitter between a
listbox, a listview and multi line editor, you would do something like
this:

    QSplitter *split = new QSplitter( parent );
    QListBox *lb = new QListBox( split );
    KListView *lv = new KListView( split );
    QMultiLineEdit *ed = new QMultiLineEdit( split );

As you can see you are not limited to two children.  Additionally, you
do not have to call activate when you are done, and opaque resizing is
possible if you call setOpaqueResize(true).

////////////////////////////////////////////////////////////////////////
// * KTreeList, KTreeListItem

Use KListView, QListViewItem instead. API is almost the same, you only
need to add a Column (KListView::addColum) before KListView is useable.

KListView has no addChild(), insertItem() and removeItem() calls. Inserting
a root item is done by constructing a QListViewItem with the KListView
passed as the parent widget. adding a child item is done by constructing
a QListViewItem with the parent item as parameter. removeItem() should
be replaced by delete <pointer to item>.

The root items are not shown in a tree fashion by default. to get this,
use KListView::setDecorativeRoot(true).

Expanding and collapsing can by done by using QListViewItem::setOpen(bool).


/////////////////////////////////////////////////////////////////////////
// * KMsgBox

KMsgBox has been superseded by QMessageBox. Which has been superseded
by KMessageBox.

- KMsgBox had return codes starting with 1 for the first button, 2 for
  the second, and so on.  KMessageBox defines an enum which you should
  use instead.
- Please note that you shouldn't add the name of your application
  to the caption argument. It is already added automatically.

////////////////////////////////////////////////////////////////////////
// * KCombo

KCombo has been removed.  Use QComboBox instead, it is completely
compatible with the old KCombo API.  The method that you may have problems
with is the old KCombo::setText.  This has been renamed to
KCombo::setEditText.

////////////////////////////////////////////////////////////////////////
// * KQuickHelp

KQuickHelp, the "super-tooltip" widget, has been replaced by QWhatsThis.
It provides a compatible API and almost the same look and feel, in addition
to some new functionality.

////////////////////////////////////////////////////////////////////////
// * KPixmap::gradientFill

Use

KPixmapEffect::gradient(KPixmap&, QColor, QColor, enum KPixmapEffect::GradientType, int)

instead. Hence:

pix.gradientFill(ca, cb, direction, ncols)

becomes, for direction == true :

KPixmapEffect::gradient(pix, ca, cb, KPixmapEffect::VerticalGradient, ncols)

There are now:

KPixmapEffect:: [Vertical,
                 Horizontal,
                 Diagonal,
                 CrossDiagonal,
                 Rectangle,
                 Pyramid,
                 PipeCross,
                 Elliptic]

Gradients. See kdelibs/kdetest/kgradienttest && kunbalancedgradienttest for
information on how they actually look.

The code in KPixmap::gradientFill() is replaced with warnings. It isn't
possible to make this old method call the new functionalities in kdeui because
we can't link-compile kdecore to kdeui.

////////////////////////////////////////////////////////////////////////
// * KTabListBox

This widget has been replaced by the almighty KListView. Everything said
about KTreeList could be repeated here. The good thing is, that you now
can combine TreeView's and normal Tablists without problems.

////////////////////////////////////////////////////////////////////////
// * KToolBarButton & KRadioGroup

If you need to do anything with KToolBarButton you now need to include
<ktoolbarbutton.h> KRadioGroup has been renamed to KToolBarRadioGroup and
requires you to include <ktoolbarradiogroup.h>

////////////////////////////////////////////////////////////////////////
// * KAccel

The functions keyToString() and stringToKey() which were previously
declared globally in kaccel.h are now static methods in KAccel.

////////////////////////////////////////////////////////////////////////
// * KIO

All of the UDS_XXX and ERR_XXX constants are now in the KIO class. This
class is just a namespace, so you can either inherit from it, or reference
the constants as KIO::UDS_XXX. The names of all of the classes have been
changed to start with a 'k', this prevents namespace pollution. This should
not cause too many problems as most of the KIO classes now inherit the
namespace. Finally you should not longer include userpaths.h, it has been
renamed to kuserpaths.h, the old include will work for a while, but you
will get a warning message. If you have any questions about the changes
then mail me (rich@kde.org).

Conversion table (new names on the left) :
KUDSAtom <- UDSAtom;
KIOProtocol <- IOProtocol;
KUDSEntry <- UDSEntry;
KIOConnection <- Connection;
KIOConnectionSignals <- ConnectionSignals;
KIOConnectionSlots <- ConnectionSlots;
KIOJobBase <- IOJob;
KIOSlave <- Slave;
KIOFilter <- Filter;

////////////////////////////////////////////////////////////////////////
// * kstring.h / KString

The KString class is obsolete and is not defined in
kstring.h anymore. The header file only existed for compatibility reasons.
The file has been removed completely, use QString instead. (mirko@kde.org)

////////////////////////////////////////////////////////////////////////
// * ktopwidget.h / KTopWidget

KTMainWindow replaces this class completly. In most cases, it should be
enough to simply replace the declaration of your former KTopWidget with
KTMainWindow, as it is source compatible. ktopwidget.h does not
exist in KDE 2. (mirko@kde.org)

////////////////////////////////////////////////////////////////////////
// * kbutton.h / KButton

Since Qt 2.0, the class QToolButton provides the functionality of
buttons that raise when the mouse is moved over them, so there is no
reason to have a class providing the same feature in KDE libs. All
occurrences of KButton in the KDE CVS have been replaced by QToolButtons,
but for applications not in the CVS it has to be done by the respective
developer. (mirko@kde.org)

////////////////////////////////////////////////////////////////////////
// * kcolorgroup.h / KColorGroup

KColorGroup was not used in sources in the KDE CVS, and its
functionality is provided by Qt. It has been removed. (mirko@kde.org)

////////////////////////////////////////////////////////////////////////
// * kcharsets.h / KCharsets

This functionality is removed from the KDE core and used from Qt, so it
has been removed. Use QStrings (unicode) for this
purpose. (mirko@kde.org)

////////////////////////////////////////////////////////////////////////
// * Methods for getting the value of a member object named
//   getXy*() are renamed to xy*()

If your code does not compile and complains about missing member
functions, you should check for methods that started with get...().
These methods have been renamed to xy*().

////////////////////////////////////////////////////////////////////////
// * kled.h, kledlamp.h / KLed, KLedLamp

There where two different classes for showing an LED lamp. Both are
merged to the KLed class, but THE USER INTERFACE IS DIFFERENT, as both
where more or less broken.
Please adjust your code accordingly.

////////////////////////////////////////////////////////////////////////
// * KTMainWindow

helpMenu() has been moved to KTMainWindow from KApplication (kapp).

Both the "About KDE" and the "About <Application>" dialog boxes
are now modeless. "About KDE" is a completely new widget.

If you used in the toplevel window (that is derived from KTMainWindow)
"kapp->helpMenu( bool, QString )" to get the help menu
you must now change this to "helpMenu( QString )". The QString defaults
to QString::null so it is sufficient to write helpMenu().

The old aboutKDE(), aboutApp() and appHelpActivated() of KApplication
have all been removed. If you need direct access to these or need
access to a help menu in a class that is not derived from
KTMainWindow then allocate an instance of the new class KHelpMenu.
See KDE 2.0 API reference or khelpmenu.h (kdeui) for additional info.

Espen Sand <espen@kde.org>

////////////////////////////////////////////////////////////////////////
// * KPixmap, KPixmapEffect

KPixmap::gradientFill, KPixmap::patternFill, KPixmap::tile and
KPixmap::mapFill have been moved to KPixmapEffect, which is now part
of libkdeui.

KPixmap::tile() has been renamed to KPixmapEffects::createTile().

Dirk A. Mueller <mueller@kde.org>


///////////////////////////////////////////////////////////////////////
// * KDE Control Center

The format for modules for the KDE Control Center has changed quite
a bit. If you want to port your module to the new schema, please
consult

kdebase/kcontrol/README

which explains what needs to be done.

Matthias Hoelzer-Kluepfel <hoelzer@kde.org>


///////////////////////////////////////////////////////////////////////
// * KWMModuleApplication libkdeui/kwmmapp.h

The KWMModuleApplication has been removed. Instead, use the class
KWinModule in libkdecore. The API is a bit cleaner but very similar,
so you will feel comfortable immediately. One of the advantages of
KWinModule is that it doesn't require a special KApplication
subclass. This lead to many problems and misunderstandings in the
past. KWinModule is now just an object that emits fancy signals (and
provides some useful lists, like the list of all managed windows).
(ettrich@kde.org)


///////////////////////////////////////////////////////////////////////
// * kDebug

Use the kDebug* functions to log debug output, warnings and errors in a
very flexible way. kdebug has been improved, and the API simplified.
kdebug.h provides a small script for automating the conversion.
Note that enabling/disabling debug output can now be done with kdebugdialog,
which can be found in kdebase. The hidden dialog on C+S+F12 has disappeared.
Also, consider using nana for assertions and debugger checks (see nana/*.h).
(faure@kde.org)

