$Id$
This document contains the changes you have to apply to programs written for
KDE1.1 when you want to port them to KDE2.0.

As a start you should have a look at doc/porting.doc in the Qt package.


//////////////////////////////////////////////////////////////////////
// * kdelibs/khtmlw

khtmlw has been replaced with khtml.
- Includes of html.h and htmlview.h should be replaced with
  khtml.h and khtmlview.h.
- It may also be necessary to include khtmlsavedpage.h, khtmlembed.h or
  khtmlcache.h.
- KHTMLWidget::setDefaultFontBase() has been replaced by setFontSizes().
  See khtml.h for more information. Examples of its use can be found in
  kdehelp, konqueror, kmail.
- khtml uses Qstring's instead of char *'s now. This means, that most
  of the api has changed. In all functions:
     const char * -> QString 
     QStrList -> QStringList
  The only exception for the moment is KHTMLWidget::write(), but
  a QString version will be added soon.
- Don't forget to change the link-flags! (-lkhtml instead of -lkhtmlw)


//////////////////////////////////////////////////////////////////////
// * KIntegerLine, KIntLineEdit

  KIntegerLine has been replaced by KIntLineEdit. The new header file
  is called knumlineedit.h, because it contains one additional class
  KFloatLineEdit. If you were using the former KIntLineEdit
  from keditcl.h or kintlineedit.h, no changes should be necessary
  at all, althouth the (QWidget *parent) paramater is now required.
  It is recommended to switch to the new include file, though.

//////////////////////////////////////////////////////////////////////
// * KLocale

- i18n is no longer a macro to

  KApplication::getApplication()->getLocale()->translate

  but a function on it's own. klocale is obsolete and replace every call
  to klocale->translate with i18n.

  The return value of i18n is also no longer a const char*,
  but a unicode qstring.


//////////////////////////////////////////////////////////////////////
// * KApplication

  doesn't hold any longer a KLocale instance. With this getLocale()
  and isLocaleInstantiated are now replaced by KGlobal::locale().
  This function won't create an instance on the fly.

  it also doesn't hold a KiconLoader instance. As this also getIconLoader()
  has been removed. Replace it getIconLoader()->loadIcon() with
  ICON() or use KGlobal::iconLoader() instead of getIconLoader()

  kde_*dir() have been removed as they require a unique toplevel directory
  for all applications (KDEDIR). This concept doesn't exist in KDE 2.0
  any more.

  Replace code that uses kde_*dir() + filename with calls to
  locate(filetype, filename) where filetype is what * used to be
  the * in kde_*dir(). locate is defined as a macro to
  KGlobal::dirs()->findResource and defined in kstddirs.h
 
//////////////////////////////////////////////////////////////////////
// * KDNDIcon, KDNDDropZone, KDNDWidget

  These classes have been replaced by the Qt DND interface.
  A good starting point may be reading the Qt Drag and Drop Tutorial.

//////////////////////////////////////////////////////////////////////
// * KConfigBase, KConfig, KSimpleConfig

  These classes have been largely reimplemented.  The external API
  remains mostly the same, with the single notable change that
  the groupIterator and entryIterator methods have been removed and
  instead replaced my groupList (which returns a QStringList of groups)
  and entryMap(const QString &group) (which returns a QMap of entries
  in the specified group).  This is due to internal changes in KConfig
  which would make providing iterators possibly rather difficult.

  Much more extensive documentation on the KConfig and friends API can
  be found in the kdoc generated documentation from the header files.

  To use the new iterator, you will probably want to do something like
  this:

  QMap<QString, QString> tmpMap = config->entryMap(myGroup);
  QMap<QString, QString>::Iterator aIt(tmpMap.begin());

  for (; aIt != tmpMap.end(); ++aIt) {
   // body here.  Access iterator key as aIt.key(),
   // data as *aIt.
  }

//////////////////////////////////////////////////////////////////////
// * libkfm has disappeared

  Lots of other functionalities have been taken out of kfm, some being
  now in libkio, some in libkonq. 
  Replacement table :
   KFM::download         -> KIONetAccess::download (kdelibs/kio/kio_netaccess.h)
   KFM::removeTempFile   -> KIONetAccess::removeTempFile
   refreshDesktop, sortDesktop, selectRootIcons : removed; kdesktop handles it
   KFM::configure        -> will probably be in konqueror's IDL
   KFM::openURL          -> "(void) new KRun (url)" (kdelibs/kio/krun.h)
   KFM::refreshDirectory -> TODO in kdebase/libkonq
   KFM::openProperties   -> "(void) new PropertiesDialog (url)" (kdebase/libkonq/kpropsdlg.h)
   KFM::exec             -> "(void) new KRun (url)" (kdelibs/kio/krun.h)
   KFM::copy, KFM::move  -> KIOJob (async, see kio_job.h)
                            or KIONetAccess (sync, see kio_netaccess.h)
   DlgLocation           -> Use KLineEditDlg (kdeui/klineeditdlg.h) instead

////////////////////////////////////////////////////////////////////////
// * KGlobal: access to KDE global objects.

KGlobal allows centralized access to KDE global objects without including
extraneous headers. object creation is deferred if possible.

All methods are static and headers for returned types are not included. You
must have created a KApplication object before the methods can be used.

	#include<kglobal.h>
	#include<kconfig.h>     // Needed to use KConfig
	#include<klocale.h>     // Needed to use KLocale
	#include<kiconloader.h> //
 
	...
        	KConfig *appcfg = KGlobal::config();
	        QString mystr	 = i18n( "This is a string" );


		KIconLoader *loader = KGlobal::iconLoader();

////////////////////////////////////////////////////////////////////////
// * KIconLoader

KIconLoader in 1.1 used to mix icons for applications and for toolbars.
This has changed, so you may notice that your application doesn't find
the right icons. loadIcon (used by ICON) returns only toolbar icons.
If you need icons for applications, use loadApplicationIcon or 
loadApplicationMiniIcon. loadMiniIcon has been removed as it did the
same as loadApplicationMiniIcon.

////////////////////////////////////////////////////////////////////////
// * KDialog

KDialog is no longer defined in kwizard.h. Include kdialog.h instead.

