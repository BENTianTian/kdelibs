$Id$

This document contains the changes you have to apply to programs written for
KDE1.1 when you want to port them to KDE2.0.

As a start you should have a look at doc/porting.doc in the Qt package.

//////////////////////////////////////////////////////////////////////
// * General

We did our best to clean up the header files out of kdelibs, so they do
not include unnessary bloat for your application. As a consequence you
may notice that some header files are missing from your source files as
they have been included before by kapp.h for example. There is a script
in kdesdk/scripts called fixheaders that takes care of most of these
cases. Just call "make -k 2>&1 | perl .../fixheaders" and it will try
to look after the error messages and add includes as it recognize the
errors


//////////////////////////////////////////////////////////////////////
// * kdelibs/khtmlw

khtmlw has been replaced with khtml.
- Includes of html.h and htmlview.h should be replaced with
  khtml.h and khtmlview.h.
- It may also be necessary to include khtmlsavedpage.h, khtmlembed.h or
  khtmlcache.h.
- KHTMLWidget::setDefaultFontBase() has been replaced by setFontSizes().
  See khtml.h for more information. Examples of its use can be found in
  kdehelp, konqueror, kmail.
- khtml uses Qstring's instead of char *'s now. This means, that most
  of the api has changed. In all functions:
     const char * -> QString 
     QStrList -> QStringList
  The only exception for the moment is KHTMLWidget::write(), but
  a QString version will be added soon.
- Don't forget to change the link-flags! (-lkhtml instead of -lkhtmlw)


//////////////////////////////////////////////////////////////////////
// * KIntegerLine, KIntLineEdit

  KIntegerLine has been replaced by KIntLineEdit. The new header file
  is called knumlineedit.h, because it contains one additional class
  KFloatLineEdit. If you were using the former KIntLineEdit
  from keditcl.h or kintlineedit.h, no changes should be necessary
  at all, althouth the (QWidget *parent) parameter is now required.
  It is necessary to switch to the new include file, though.

//////////////////////////////////////////////////////////////////////
// * KLocale

- i18n is no longer a macro to

  KApplication::getApplication()->getLocale()->translate

  but a function on it's own. klocale is obsolete and replace every call
  to klocale->translate with i18n.

  The return value of i18n is also no longer a const char*,
  but a unicode qstring.


//////////////////////////////////////////////////////////////////////
// * KApplication

  doesn't hold any longer a KLocale instance. With this getLocale()
  and isLocaleInstantiated are now replaced by KGlobal::locale()

  it also doesn't hold a KiconLoader instance. As this also getIconLoader()
  has been removed. Replace kapp->getIconLoader()->loadIcon() with
  ICON() or use KGlobal::iconLoader() instead of getIconLoader()

  kde_*dir() have been removed as they require a unique toplevel directory
  for all applications (KDEDIR). This concept doesn't exist in KDE 2.0
  any more.

  Replace code that uses kde_*dir() + filename with calls to
  locate(filetype, filename) where filetype is what * used to be
  in kde_*dir(). locate is defined as function in kstddirs.h to call
  KGlobal::dirs()->findResource

  generalFont() and fixedFont() are deprecated and will be removed soon.
  Please use KGlobal::generalFont() and KGlobal::fixedFont() instead.
 
  appName() is deprecated. Please use QApplication::name() instead.

//////////////////////////////////////////////////////////////////////
// * KDNDIcon, KDNDDropZone, KDNDWidget

//////////////////////////////////////////////////////////////////////
// * kdelibs/drag.h
KDE Drag and Drop is Dead.  Long live Qt Xdnd.

Xdnd is better anyway, because it has been adopted by all the other
major GUI toolkits still under active development (this precludes
Motif, but maybe we can convince the lesstif guys!).  Some changes
are necessary to convert your old KDND-based stuff to Qt DND.

- Remove drag.h from all of your sources / header files.
- Remove KDNDDropZone object creations.  Instead of creating an
  object of this type and then connecting it to some arbitrary slot
  to handle drops, call "setAcceptDrops(true)" in your widget
  constructor and then override the protected methods dragEnterEvent,
  dragMoveEvent, dragLeaveEvent, and dropEvent.
- You should be aware that to handle drops, you will either have to
  inherit a widget and then override the methods mentioned above,
  or install an event handler for the widget in that widget's parent,
  and then handle QEvent::DragMove or QEvent::Drop inside there (if
  you want to avoid inheritance).
- You can emulate the old DndURL drop-type behaviour with the Qt
  Drag Object type QUriList.
- You can start a drag from inside your widget's mouseMoveEvent
  method if you wish.
- Qt includes a Drag and Drop tutorial.  We suggest you read that
  now if you are confused.
- QMultiLineEdit has already a DnD interface that accepts text/*
  If you want to add support for other mimetypes, you need to 
  re-implement all DnD-methods (also dragMoveEvent()) and pass
  QTextDrag's to the parent methods. 
- QTextDrag also accepts text/uri-list, which means that you
  always need to check for QUriDrag first if you want to get
  both working. 
- The mimetype for Uri's is now text/uri-list. If you've used
  the proprietary Qt 1.x url/url, you need to adjust that.  


//////////////////////////////////////////////////////////////////////
// * KConfigBase, KConfig, KSimpleConfig

  These classes have been largely reimplemented.  The external API
  remains mostly the same, with the single notable change that
  the groupIterator and entryIterator methods have been removed and
  instead replaced by groupList (which returns a QStringList of groups)
  and entryMap(const QString &group) (which returns a QMap of entries
  in the specified group).  This is due to internal changes in KConfig
  which would make providing iterators possibly rather difficult.

  Much more extensive documentation on the KConfig and friends API can
  be found in the kdoc generated documentation from the header files,
  and in kdecore/KCONFIG_DESIGN.

  To use the new iterator, you will probably want to do something like
  this:

  QMap<QString, QString> tmpMap = config->entryMap(myGroup);
  QMap<QString, QString>::Iterator aIt(tmpMap.begin());

  for (; aIt != tmpMap.end(); ++aIt) {
   // body here.  Access iterator key as aIt.key(),
   // data as *aIt.
  }


//////////////////////////////////////////////////////////////////////
// * libkfm has disappeared

  Lots of other functionalities have been taken out of kfm, some being
  now in libkio, some in libkonq. 
  Replacement table :
   KFM::download         -> KIONetAccess::download (kdelibs/kio/kio_netaccess.h)
   KFM::removeTempFile   -> KIONetAccess::removeTempFile
   refreshDesktop, sortDesktop, selectRootIcons : removed; kdesktop handles it
   KFM::configure        -> will probably be in konqueror's IDL
   KFM::openURL          -> "(void) new KRun (url)" (kdelibs/kio/krun.h)
   KFM::refreshDirectory -> TODO in kdebase/libkonq
   KFM::openProperties   -> "(void) new PropertiesDialog (url)" (kdebase/libkonq/kpropsdlg.h)
   KFM::exec             -> "(void) new KRun (url)" (kdelibs/kio/krun.h)
   KFM::copy, KFM::move  -> KIOJob (async, see kio_job.h)
                            or KIONetAccess (sync, see kio_netaccess.h)
   DlgLocation           -> Use KLineEditDlg (kdeui/klineeditdlg.h) instead

////////////////////////////////////////////////////////////////////////
// * KGlobal: access to KDE global objects.

KGlobal allows centralized access to KDE global objects without including
extraneous headers. object creation is deferred if possible.

All methods are static and headers for returned types are not included. You
must have created a KApplication object before the methods can be used.

	#include<kglobal.h>
	#include<kconfig.h>     // Needed to use KConfig
	#include<klocale.h>     // Needed to use KLocale
	#include<kiconloader.h> //
 
	...
        	KConfig *appcfg = KGlobal::config();
	        QString mystr	 = i18n( "This is a string" );


		KIconLoader *loader = KGlobal::iconLoader();

////////////////////////////////////////////////////////////////////////
// * KIconLoader

KIconLoader in 1.1 used to mix icons for applications and for toolbars.
This has changed, so you may notice that your application doesn't find
the right icons. loadIcon (used by ICON) returns only toolbar icons.
If you need icons for applications, use loadApplicationIcon or 
loadApplicationMiniIcon. loadMiniIcon has been removed as it did the
same as loadApplicationMiniIcon.

////////////////////////////////////////////////////////////////////////
// * KDialog

KDialog is no longer defined in kwizard.h. Include kdialog.h instead.

////////////////////////////////////////////////////////////////////////
// * KTMainWidget

view_* public variables do no longer exist. There is really no reason
for an app to use this information. If you do need it anyway, use
mainViewGeometry() instead.

////////////////////////////////////////////////////////////////////////
// * KStartParams

KStartParams is a new class for easy command-line argument parsing.
It's included in kdecore and defined in kstartparams.h. See 
html-documentation for further informations about using.

////////////////////////////////////////////////////////////////////////
// * automoc

automoc has been removed from the admin directory. It has been replaced
by am_edit which provides a lot of additional features.

////////////////////////////////////////////////////////////////////////
// * kcharsets

The kcharsets class has been completely rewritten, and most of it has
vanished, since support for it moved to Qt.

Most applications will only need to replace kapp->getKCharsets() with
KGlobal::charsets().

For conversion of various input formats to QStrings, please have a
look at QTextCodec and classes derived from it.

Character entities are now  converted from and to QChars. The name has
changed from convertTag to fromEntity and toEntity.

To get a font, which can display a certain charset (if such a font
exists), you can use the KCharsets::setQFont methods. Input is a font and
a charset. Kcharsets tries to find an output font, which matches the
input font most closely, but can display the given charset.

////////////////////////////////////////////////////////////////////////
// * KWizard, KNoteBook

KWizard is based on QWizard now. The API has changed. Consult Qt's
documentation and kdelibs/kdetest/kwizardtest.cpp for an example use.
KNoteBook (deeply entwined with the former KWizard) has been removed until
someone is willing to port it to work with the new wizard. If you want to
use it you'll find the necessary files in kdegraphics/kiconedit.

////////////////////////////////////////////////////////////////////////
// * KSpinBox, KNumericSpinBox

These classes have been replaced by QSpinBox. API is almost the same
HINTS:
  - valueincreased()/valuedecreased -> valueChanged()
  - getValue() -> value()

////////////////////////////////////////////////////////////////////////
// * KClipboard

KClipboard has been removed. In case you've been using KClipboard,
QClipboard is the way to go now, as it has all the functionality the K
version had, and more.

////////////////////////////////////////////////////////////////////////
// * KPanner, KNewPanner

KPanner and KNewPanner have been removed.  QSplitter does everything
KPanner did and more. The api is similar, but not compatible.
Basically to set it up so that you have a vertical splitter between a
listbox, a listview and multi line editor, you would do something like
this:

    QSplitter *split = new QSplitter( parent );
    QListBox *lb = new QListBox( split );
    QListView *lv = new QListView( split );
    QMultiLineEdit *ed = new QMultiLineEdit( split );

As you can see you are not limited to two children.  Additionally, you
do not have to call activate when you are done, and opaque resizing is
possible if you call setOpaqueResize(true).

////////////////////////////////////////////////////////////////////////
// * KTreeList, KTreeListItem

Use QListView, QListViewItem instead. API is almost the same, you only
need to add a Column (QListView::addColum) before QListView is useable.

QListView has no addChild(), insertItem() and removeItem() calls. Inserting
a root item is done by constructing a QListViewItem with the QListView 
passed as the parent widget. adding a child item is done by constructing
a QListViewItem with the parent item as paremeter. removeItem() should
be replaced by delete <pointer to item>.

The root items are not shown in a tree fashion by default. to get this,
use QListView::setDecorativeRoot(true). 

Expanding and collapsing can by done by using QListViewItem::setOpen(bool).

/////////////////////////////////////////////////////////////////////////
// * KMsgBox

KMsgBox has been superceded by QMessageBox.  Most of the original
concerns with QMessageBox which lead to KMsgBox's creation have been
resolved in Qt 2.0.  Here are the things you need to be concerned with
when porting:

- KMsgBox had return codes starting with 1 for the first button, 2 for
  the second, and so on.  QMessageBox is 0-based, and thus the first
  button will have a return code of 0.
- Do not use QMessageBox::message.  It is deprecated.  Use 
  QMessageBox::information for bits of information, QMessageBox::warning when
  something has failed but the program will continue to work fine, and
  as a last resort, use QMessageBox::critical when very bad errors have
  occurred.
- You cannot rely on QMessageBox to i18n text for the buttons.  Therefore,
  a simple information text box with an OK button should be coded as 
  follows:

  QMessageBox::information(this, i18n("Information"),
	 	i18n("This is the text that will appear"
		     " in the message box."), i18n("&OK"));
- Please note too that it's recommended to use kapp->getCaption as second
  argument 

