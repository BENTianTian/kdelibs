## started by Thomas Nagy (aka ita on freenode)

SUMMARY:
* HOW TO RUN
* THE API
* STRUCTURE OF THE MODULES
* DISCUSSION

HOW TO RUN:
-----------

* without scons installed:
cd kdelibs
tar xjvf bksys/scons-mini.tar.bz2
./scons

* with scons installed:
cd kdelibs && scons
add this to your .bashrc to run scons anywhere in the tree
export SCONSFLAGS="-u"

Miniscons is based on scons-0.96.1, but the version 0.96.91
is about 30% faster at computing the dependencies

To make scons run faster you may use these flags:
export SCONSFLAGS="-u --max-drift=1 --implicit-deps-unchanged",
but in this case Miniscons and 0.96.91 are about as fast

THE API:
--------

For building objects, one will use the 'obj' builders.
These are python classes that accept 5 types when initialized:
program      : compiled program
shlib        : shared library
staticlib    : static library
convenience  : static library made of objects compiled with pic (position-independent code)
kioslave     : same as shlib, but without 'lib' as a prefix

The existing classes are the following:
* genobj: build generic c++ or c applications, depending on the sources given to build
* qt4obj: build a qt4 object, scanning for moc files and adding the dependencies on .rcc files

Targets are then specified like this:
obj = env.qt4obj('shlib',env)
obj.vnum     = '6.0.2'
obj.target   = 'libDCOP'
obj.source   = 'dcopstub.cpp dcopref.cpp dcopobject.cpp dcopclient.cpp'
obj.uselib   = 'QTCORE QT3SUPPORT KDE4'
obj.libs     = env.join('KDE-ICE', 'libkICE.a')
obj.execute()

STRUCTURE OF THE MODULES:
-------------------------

A scons module must contain the following functions:
* exists(env)
	returns True usually
* generate(env) 
	attach to the env the necessary builders and detect the configuration

DISCUSSION:
-----------

-> Since the detection will be carried out on several platforms like win32, osx, unix platforms,
and that config.h files will need to be processed, an idea is to put the detection in
separate python files which will be only imported at configuration time.
We will thus avoid really huge python files, and loading a lot of functions in memory.

   YES/NO ? (ita)

-> The current config.h produced is fairly big and complicated, it would be nice to have it
split into several unrelated config-module.h to be included by the config.h at the top-level
(well, in the build dir)

   YES/NO ? (ita)

-> Giving all sources is cumbersome, and in many cases it will be easier to let the tool find the files
by itself, each builder class like qt4obj, genobj being able to find the files it knows about (.ui for qt4..)
The problems is the level of intelligence the tool:
1 let it scan for source files in the current directory only
2 let it scan in given directories
3 let it scan recursively

   1 or 2 or 3 ?

