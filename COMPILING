THIS DOCUMENT DESCRIBES HOW YOU CAN COMPILE KDE WHEN USING CVS

(If you use source tarballs, you can skip "make -f Makefile.cvs" and should use
"make distclean" instead of "make cvs-clean")

What you need

Make sure you get the following stuff from CVS:

  * qt-copy (currently a snapshot of qt-4.x)
  * arts
  * kdelibs
  * kdebase (strongly recommended but not strictly necessary)
  * any other package you are interested in (as of 07Jun2005, only kdegraphics,
    kdenetwork, kdegames, kdeedu and playground available)

It is important that you compile AND INSTALL the above packages in the above
order.

Further you will need GNU make, autoconf 2.52 and a working C++ compiler (e.g.
gcc 3.3.x). 29 May 2005: It is not yet possible to use automake for compiling
KDE-4. The latest version of usermake (from svn.kde.org/home/kde/trunk/
kdenonbeta/unsermake) is required.

Preparations

Before you start you must decide two things:

1) Where do you want to have Qt installed? Qt is a bit lame in that it
basically installs itself in its own source-tree, but symlinks are your friend.
E.g you could link /usr/local/lib/qt4 to where you keep your Qt source. Qt libs
then end up in /usr/local/lib/qt4/lib.

2) Where do you want to have KDE installed. A good candidate is /usr/local/kde4

Make sure you do (if using sh, ksh, or bash):

export KDEDIR=/usr/local/kde4

With csh or tcsh the following is more appropriate:

setenv KDEDIR /usr/local/kde4

Now you want to make sure that Qt and KDE libraries are picked up correctly.

On systems that respond to environment variables something similar to the
following is appropriate:

export LD_LIBRARY_PATH=$KDEDIR/lib:$QTDIR/lib

On systems whose diety of choice is ldconfig, try:

ldconfig -m $KDEDIR/lib
ldconfig -m $QTDIR/lib

You probably also want to add $KDEDIR/bin and $QTDIR/bin to your path.

Preparing CVS modules

NOTE: Is this still so?

All KDE modules require an "admin" sub-directory. You can create it by making a
symbolic link from kde-common/admin, make sure to check out the kde-common
module.

Example:

cd kdelibs
ln -s ../kde-common/admin

With the new source management technology, Subversion, handling this special
sub-directory has to be done differently. If an "admin" sub-directory doesn't
exist, do as follows($KDE_MODULE is the module you're working with):

cd $KDE_MODULE
svn propset svn:externals admin https://svn.kde.org/home/kde/branches/work/kde4/kde-common/admin



The URL in the above command has to be adapted to your situation:
i.e. replace https with svn+ssh, replace svn.kde.org with your account
name (e.g. username@svn.kde.org) and replace the work branch of the
URL (/branches/work/kde4/) with the branch you're using
(e.g. /trunk/KDE/kde-common/ for the main development tree).



Compiling with unsermake



The magic sequence to compile & install a package is:

export PATH=$PATH:/your/path/toward/unsermake/module # for (t)csh: setenv PATH ${PATH}:/your/path/toward/unsermake/module
unsermake -f Makefile.cvs
./configure --enable-debug
unsermake
unsermake install

Compiling with unsermake and a build directory different than the source
directory

Most of the KDE modules allow to store the compilation (build) objects at a
different location in the filesystem than the location that contains the KDE
sources. This setup provides a few advantages (like easier cleanup of builds).
In order to compile KDE this way, the following sequence of commands is
required, provided that SRC_DIR=/your/path/to/KDE/sources, BUILD_DIR=/your/path
/to/build/objects/ and $KDE_MODULE is the module that you want to compile.

export PATH=$PATH:/your/path/toward/unsermake/module # for (t)csh: setenv PATH ${PATH}:/your/path/toward/unsermake/module
cd $SRC_DIR/$KDE_MODULE
unsermake -f Makefile.cvs
cd $BUILD_DIR
mkdir $KDE_MODULE
cd $KDE_MODULE
$SRC_DIR/$KDE_MODULE/configure --enable-debug
unsermake
unsermake install

Notes about compiling

Currently, it is not possible to use automake to generate makefiles for
KDE-4.x. Unsermake is mandatory (see above). It is planned that, for KDE-4, a
new build system to be adopted (like scons: http://scons.org), in order to
paliate for the complex task of building a project of the size of KDE.

For configuring Qt, the magic sequence is:

./configure -system-zlib -qt-gif -system-libjpeg -system-libpng -no-exceptions -debug -fast
make

Common problems

One of the biggest problems is picking up the correct version of Qt, especially
if your system has more version of Qt installed. Be aware that information
about library paths gets saved in the "config.cache" file, "Makefile.in" as
well as "Makefile" files. So it can be that after some struggle to get QTDIR/
KDEDIR setup correctly your setup is actually correct, but old -incorrect-
settings are still lying around.

The best thing to do in such a case is to use the svn-clean script available in
kdesdk/scripts . This removes all files which aren't stored in SVN. You can
then start all over again with "unsermake -f Makefile.cvs". WARNING: Make sure
you don't have any important files lying around in your source tree any more,
they will be deleted!

New directories

:

When a new directory gets added to CVS it usually only contains a Makefile.am
but not a Makefile. If you try to compile such a directory you will get an
error like:

  Making all in management
  make[3]: Entering directory /home/gregturp/KDE/kdelibs/kdeprint/management'
  make[3]: *** No rule to make target ll'.  Stop.
  make[3]: Leaving directory /home/gregturp/KDE/kdelibs/kdeprint/management'
  make[2]: *** [all-recursive] Error 1
  make[2]: Leaving directory /home/gregturp/KDE/kdelibs/kdeprint'
  make[1]: *** [all-recursive] Error 1
  make[1]: Leaving directory /home/gregturp/KDE/kdelibs'
  make: *** [all-recursive-am] Error 2

The solution is to redo "make -f Makefile.cvs; ./configure".

You can create a single Makefile from a Makefile.am file with the kdesdk/
scripts/create_makefile script. Make sure to run it from the toplevel
directory. (E.g. /home/username/KDE/kdelibs)

Problems?

See http://www.kde.org/compilationfaq.html for common build problems and their
solution.

If you encounter _LINK_ problems you are probably doing something wrong. Do a
"make cvs-clean" and start from scratch, usually this solves the problem.

If you encounter missing include files, especially if the files start with a
'q', you probably have not setup your QTDIR correct or have the wrong version
of Qt.

If you encounter compile errors after updating from CVS, check whether you need
to update kdelibs as well. If the problems persists, wait a few hours, usually
compile errors are fixed shortly after they have been introduced.

If you still have problems read the kde-devel@kde.org mailinglist and/or post
your problem there. You can subscribe by sending mail to
kde-devel-request@kde.org with "subscribe" in the subject.

Have fun!

Cheers,
Waldo Bastian
bastian@kde.org
