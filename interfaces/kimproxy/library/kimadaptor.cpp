/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file interface/org.kde.KIMIface.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "kimadaptor_p.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KIMAdaptor
 */

KIMAdaptor::KIMAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KIMAdaptor::~KIMAdaptor()
{
    // destructor
}

bool KIMAdaptor::addContact(const QString &contactId, const QString &protocol)
{
    // handle method call org.kde.KIM.addContact
    bool out0;
    QMetaObject::invokeMethod(parent(), "addContact", Q_RETURN_ARG(bool, out0), Q_ARG(QString, contactId), Q_ARG(QString, protocol));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->addContact(contactId, protocol);
    return out0;
}

QStringList KIMAdaptor::allContacts()
{
    // handle method call org.kde.KIM.allContacts
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "allContacts", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->allContacts();
    return out0;
}

bool KIMAdaptor::canReceiveFiles(const QString &uid)
{
    // handle method call org.kde.KIM.canReceiveFiles
    bool out0;
    QMetaObject::invokeMethod(parent(), "canReceiveFiles", Q_RETURN_ARG(bool, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->canReceiveFiles(uid);
    return out0;
}

bool KIMAdaptor::canRespond(const QString &uid)
{
    // handle method call org.kde.KIM.canRespond
    bool out0;
    QMetaObject::invokeMethod(parent(), "canRespond", Q_RETURN_ARG(bool, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->canRespond(uid);
    return out0;
}

void KIMAdaptor::chatWithContact(const QString &uid)
{
    // handle method call org.kde.KIM.chatWithContact
    QMetaObject::invokeMethod(parent(), "chatWithContact", Q_ARG(QString, uid));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->chatWithContact(uid);
}

QString KIMAdaptor::context(const QString &uid)
{
    // handle method call org.kde.KIM.context
    QString out0;
    QMetaObject::invokeMethod(parent(), "context", Q_RETURN_ARG(QString, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->context(uid);
    return out0;
}

QString KIMAdaptor::displayName(const QString &uid)
{
    // handle method call org.kde.KIM.displayName
    QString out0;
    QMetaObject::invokeMethod(parent(), "displayName", Q_RETURN_ARG(QString, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->displayName(uid);
    return out0;
}

QStringList KIMAdaptor::fileTransferContacts()
{
    // handle method call org.kde.KIM.fileTransferContacts
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "fileTransferContacts", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->fileTransferContacts();
    return out0;
}

QByteArray KIMAdaptor::icon(const QString &uid)
{
    // handle method call org.kde.KIM.icon
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "icon", Q_RETURN_ARG(QByteArray, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->icon(uid);
    return out0;
}

bool KIMAdaptor::isPresent(const QString &uid)
{
    // handle method call org.kde.KIM.isPresent
    bool out0;
    QMetaObject::invokeMethod(parent(), "isPresent", Q_RETURN_ARG(bool, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isPresent(uid);
    return out0;
}

QString KIMAdaptor::locate(const QString &contactId, const QString &protocol)
{
    // handle method call org.kde.KIM.locate
    QString out0;
    QMetaObject::invokeMethod(parent(), "locate", Q_RETURN_ARG(QString, out0), Q_ARG(QString, contactId), Q_ARG(QString, protocol));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->locate(contactId, protocol);
    return out0;
}

void KIMAdaptor::messageContact(const QString &uid, const QString &message)
{
    // handle method call org.kde.KIM.messageContact
    QMetaObject::invokeMethod(parent(), "messageContact", Q_ARG(QString, uid), Q_ARG(QString, message));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->messageContact(uid, message);
}

void KIMAdaptor::messageNewContact(const QString &contactId, const QString &protocol)
{
    // handle method call org.kde.KIM.messageNewContact
    QMetaObject::invokeMethod(parent(), "messageNewContact", Q_ARG(QString, contactId), Q_ARG(QString, protocol));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->messageNewContact(contactId, protocol);
}

QStringList KIMAdaptor::onlineContacts()
{
    // handle method call org.kde.KIM.onlineContacts
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "onlineContacts", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->onlineContacts();
    return out0;
}

int KIMAdaptor::presenceStatus(const QString &uid)
{
    // handle method call org.kde.KIM.presenceStatus
    int out0;
    QMetaObject::invokeMethod(parent(), "presenceStatus", Q_RETURN_ARG(int, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->presenceStatus(uid);
    return out0;
}

QString KIMAdaptor::presenceString(const QString &uid)
{
    // handle method call org.kde.KIM.presenceString
    QString out0;
    QMetaObject::invokeMethod(parent(), "presenceString", Q_RETURN_ARG(QString, out0), Q_ARG(QString, uid));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->presenceString(uid);
    return out0;
}

QStringList KIMAdaptor::protocols()
{
    // handle method call org.kde.KIM.protocols
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "protocols", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->protocols();
    return out0;
}

QStringList KIMAdaptor::reachableContacts()
{
    // handle method call org.kde.KIM.reachableContacts
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "reachableContacts", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->reachableContacts();
    return out0;
}

void KIMAdaptor::sendFile(const QString &uid, const QString &sourceURL)
{
    // handle method call org.kde.KIM.sendFile
    QMetaObject::invokeMethod(parent(), "sendFile", Q_ARG(QString, uid), Q_ARG(QString, sourceURL));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->sendFile(uid, sourceURL);
}

void KIMAdaptor::sendFile(const QString &uid, const QString &sourceURL, const QString &altFileName)
{
    // handle method call org.kde.KIM.sendFile
    QMetaObject::invokeMethod(parent(), "sendFile", Q_ARG(QString, uid), Q_ARG(QString, sourceURL), Q_ARG(QString, altFileName));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->sendFile(uid, sourceURL, altFileName);
}

void KIMAdaptor::sendFile(const QString &uid, const QString &sourceURL, const QString &altFileName, qlonglong fileSize)
{
    // handle method call org.kde.KIM.sendFile
    QMetaObject::invokeMethod(parent(), "sendFile", Q_ARG(QString, uid), Q_ARG(QString, sourceURL), Q_ARG(QString, altFileName), Q_ARG(qlonglong, fileSize));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->sendFile(uid, sourceURL, altFileName, fileSize);
}


#include "kimadaptor_p.moc"
