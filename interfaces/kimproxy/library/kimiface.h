/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file interface/org.kde.KIMIface.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KIMIFACE_H_145511146511381
#define KIMIFACE_H_145511146511381

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

/*
 * Proxy class for interface org.kde.KIM
 */
class OrgKdeKIMInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KIM"; }

public:
    explicit OrgKdeKIMInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeKIMInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<bool> addContact(const QString &contactId, const QString &protocol)
    {
        return call(QLatin1String("addContact.ss"), contactId, protocol);
    }

    inline QDBusReply<QStringList> allContacts()
    {
        return call(QLatin1String("allContacts"));
    }

    inline QDBusReply<bool> canReceiveFiles(const QString &uid)
    {
        return call(QLatin1String("canReceiveFiles.s"), uid);
    }

    inline QDBusReply<bool> canRespond(const QString &uid)
    {
        return call(QLatin1String("canRespond.s"), uid);
    }

    inline QDBusReply<void> chatWithContact(const QString &uid)
    {
        return call(QLatin1String("chatWithContact.s"), uid);
    }

    inline QDBusReply<QString> context(const QString &uid)
    {
        return call(QLatin1String("context.s"), uid);
    }

    inline QDBusReply<QString> displayName(const QString &uid)
    {
        return call(QLatin1String("displayName.s"), uid);
    }

    inline QDBusReply<QStringList> fileTransferContacts()
    {
        return call(QLatin1String("fileTransferContacts"));
    }

    inline QDBusReply<QByteArray> icon(const QString &uid)
    {
        return call(QLatin1String("icon.s"), uid);
    }

    inline QDBusReply<bool> isPresent(const QString &uid)
    {
        return call(QLatin1String("isPresent.s"), uid);
    }

    inline QDBusReply<QString> locate(const QString &contactId, const QString &protocol)
    {
        return call(QLatin1String("locate.ss"), contactId, protocol);
    }

    inline QDBusReply<void> messageContact(const QString &uid, const QString &message)
    {
        return call(QLatin1String("messageContact.ss"), uid, message);
    }

    inline QDBusReply<void> messageNewContact(const QString &contactId, const QString &protocol)
    {
        return call(QLatin1String("messageNewContact.ss"), contactId, protocol);
    }

    inline QDBusReply<QStringList> onlineContacts()
    {
        return call(QLatin1String("onlineContacts"));
    }

    inline QDBusReply<int> presenceStatus(const QString &uid)
    {
        return call(QLatin1String("presenceStatus.s"), uid);
    }

    inline QDBusReply<QString> presenceString(const QString &uid)
    {
        return call(QLatin1String("presenceString.s"), uid);
    }

    inline QDBusReply<QStringList> protocols()
    {
        return call(QLatin1String("protocols"));
    }

    inline QDBusReply<QStringList> reachableContacts()
    {
        return call(QLatin1String("reachableContacts"));
    }

    inline QDBusReply<void> sendFile(const QString &uid, const QString &sourceURL)
    {
        return call(QLatin1String("sendFile.ss"), uid, sourceURL);
    }

    inline QDBusReply<void> sendFile(const QString &uid, const QString &sourceURL, const QString &altFileName)
    {
        return call(QLatin1String("sendFile.sss"), uid, sourceURL, altFileName);
    }

    inline QDBusReply<void> sendFile(const QString &uid, const QString &sourceURL, const QString &altFileName, qlonglong fileSize)
    {
        return call(QLatin1String("sendFile.sssx"), uid, sourceURL, altFileName, fileSize);
    }

Q_SIGNALS: // SIGNALS
    void contactPresenceChanged(const QString &uid, const QString &appId, int presence);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKIMInterface KIM;
  }
}
#endif
