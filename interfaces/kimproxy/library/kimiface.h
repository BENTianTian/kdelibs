/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -p kimiface -m -- ../interface/org.kde.KIMIface.xml
 *
 * dbusxml2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KIMIFACE_H_72731151674950
#define KIMIFACE_H_72731151674950

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.kde.KIM
 */
class OrgKdeKIMInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KIM"; }

public:
    OrgKdeKIMInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeKIMInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<bool> addContact(const QString &contactId, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(contactId) << qVariantFromValue(protocol);
        return callWithArgumentList(QDBus::Block, QLatin1String("addContact"), argumentList);
    }

    inline QDBusReply<QStringList> allContacts()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("allContacts"), argumentList);
    }

    inline QDBusReply<bool> canReceiveFiles(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("canReceiveFiles"), argumentList);
    }

    inline QDBusReply<bool> canRespond(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("canRespond"), argumentList);
    }

    inline QDBusReply<void> chatWithContact(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("chatWithContact"), argumentList);
    }

    inline QDBusReply<QString> context(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("context"), argumentList);
    }

    inline QDBusReply<QString> displayName(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("displayName"), argumentList);
    }

    inline QDBusReply<QStringList> fileTransferContacts()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("fileTransferContacts"), argumentList);
    }

    inline QDBusReply<QByteArray> icon(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("icon"), argumentList);
    }

    inline QDBusReply<bool> isPresent(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("isPresent"), argumentList);
    }

    inline QDBusReply<QString> locate(const QString &contactId, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(contactId) << qVariantFromValue(protocol);
        return callWithArgumentList(QDBus::Block, QLatin1String("locate"), argumentList);
    }

    inline QDBusReply<void> messageContact(const QString &uid, const QString &message)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid) << qVariantFromValue(message);
        return callWithArgumentList(QDBus::Block, QLatin1String("messageContact"), argumentList);
    }

    inline QDBusReply<void> messageNewContact(const QString &contactId, const QString &protocol)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(contactId) << qVariantFromValue(protocol);
        return callWithArgumentList(QDBus::Block, QLatin1String("messageNewContact"), argumentList);
    }

    inline QDBusReply<QStringList> onlineContacts()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("onlineContacts"), argumentList);
    }

    inline QDBusReply<int> presenceStatus(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("presenceStatus"), argumentList);
    }

    inline QDBusReply<QString> presenceString(const QString &uid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid);
        return callWithArgumentList(QDBus::Block, QLatin1String("presenceString"), argumentList);
    }

    inline QDBusReply<QStringList> protocols()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("protocols"), argumentList);
    }

    inline QDBusReply<QStringList> reachableContacts()
    {
        QList<QVariant> argumentList;
        return callWithArgumentList(QDBus::Block, QLatin1String("reachableContacts"), argumentList);
    }

    inline QDBusReply<void> sendFile(const QString &uid, const QString &sourceURL)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid) << qVariantFromValue(sourceURL);
        return callWithArgumentList(QDBus::Block, QLatin1String("sendFile"), argumentList);
    }

    inline QDBusReply<void> sendFile(const QString &uid, const QString &sourceURL, const QString &altFileName)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid) << qVariantFromValue(sourceURL) << qVariantFromValue(altFileName);
        return callWithArgumentList(QDBus::Block, QLatin1String("sendFile"), argumentList);
    }

    inline QDBusReply<void> sendFile(const QString &uid, const QString &sourceURL, const QString &altFileName, qlonglong fileSize)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(uid) << qVariantFromValue(sourceURL) << qVariantFromValue(altFileName) << qVariantFromValue(fileSize);
        return callWithArgumentList(QDBus::Block, QLatin1String("sendFile"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void contactPresenceChanged(const QString &uid, const QString &appId, int presence);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKIMInterface KIM;
  }
}
#endif
