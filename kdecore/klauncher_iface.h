/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file ../kinit/org.kde.KLauncher.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KLAUNCHER_IFACE_H_67571148173636
#define KLAUNCHER_IFACE_H_67571148173636

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

/*
 * Proxy class for interface org.kde.KLauncher
 */
class OrgKdeKLauncherInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KLauncher"; }

public:
    explicit OrgKdeKLauncherInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeKLauncherInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<void> autoStart()
    {
        return call(QLatin1String("autoStart"));
    }

    inline QDBusReply<void> autoStart(int phase)
    {
        return call(QLatin1String("autoStart.i"), phase);
    }

    inline QDBusReply<void> exec_blind(const QString &name, const QStringList &arg_list, const QStringList &envs, const QString &startup_id)
    {
        return call(QLatin1String("exec_blind.sasass"), name, arg_list, envs, startup_id);
    }

    inline QDBusReply<void> exec_blind(const QString &name, const QStringList &arg_list)
    {
        return call(QLatin1String("exec_blind.sas"), name, arg_list);
    }

    inline QDBusReply<int> kdeinit_exec(const QString &app, const QStringList &args, const QStringList &env, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("kdeinit_exec.sasas"), app, args, env);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> kdeinit_exec(const QString &app, const QStringList &args, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("kdeinit_exec.sas"), app, args);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> kdeinit_exec_wait(const QString &app, const QStringList &args, const QStringList &env, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("kdeinit_exec_wait.sasas"), app, args, env);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> kdeinit_exec_wait(const QString &app, const QStringList &args, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("kdeinit_exec_wait.sas"), app, args);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<void> reparseConfiguration()
    {
        return call(QLatin1String("reparseConfiguration"));
    }

    inline QDBusReply<int> requestHoldSlave(const QString &url, const QString &app_socket)
    {
        return call(QLatin1String("requestHoldSlave.ss"), url, app_socket);
    }

    inline QDBusReply<int> requestSlave(const QString &protocol, const QString &host, const QString &app_socket, QString &error)
    {
        QDBusMessage reply = call(QLatin1String("requestSlave.sss"), protocol, host, app_socket);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            error = qvariant_cast<QString>(reply.at(1));
        }
        return reply;
    }

    inline QDBusReply<void> setLaunchEnv(const QString &name, const QString &value)
    {
        return call(QLatin1String("setLaunchEnv.ss"), name, value);
    }

    inline QDBusReply<int> start_service_by_desktop_name(const QString &serviceName, const QStringList &urls, const QStringList &envs, const QString &startup_id, bool blind, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("start_service_by_desktop_name.sasassb"), serviceName, urls, envs, startup_id, blind);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> start_service_by_desktop_name(const QString &serviceName, const QStringList &urls, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("start_service_by_desktop_name.sas"), serviceName, urls);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> start_service_by_desktop_path(const QString &serviceName, const QStringList &urls, const QStringList &envs, const QString &startup_id, bool blind, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("start_service_by_desktop_path.sasassb"), serviceName, urls, envs, startup_id, blind);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> start_service_by_desktop_path(const QString &serviceName, const QStringList &urls, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("start_service_by_desktop_path.sas"), serviceName, urls);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> start_service_by_name(const QString &serviceName, const QStringList &urls, const QStringList &envs, const QString &startup_id, bool blind, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("start_service_by_name.sasassb"), serviceName, urls, envs, startup_id, blind);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<int> start_service_by_name(const QString &serviceName, const QStringList &urls, QString &dbusServiceName, QString &error, int &pid)
    {
        QDBusMessage reply = call(QLatin1String("start_service_by_name.sas"), serviceName, urls);
        if (reply.type() == QDBusMessage::ReplyMessage) {
            dbusServiceName = qvariant_cast<QString>(reply.at(1));
            error = qvariant_cast<QString>(reply.at(2));
            pid = qvariant_cast<int>(reply.at(3));
        }
        return reply;
    }

    inline QDBusReply<void> waitForSlave(int pid)
    {
        return call(QLatin1String("waitForSlave.i"), pid);
    }

Q_SIGNALS: // SIGNALS
    void autoStartDone(int phase);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKLauncherInterface KLauncher;
  }
}
#endif
