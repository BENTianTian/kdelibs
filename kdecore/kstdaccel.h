/* This file is part of the KDE libraries
    Copyright (C) 1997 Stefan Taferner (taferner@kde.org)
    Copyright (C) 2000 Nicolas Hadacek (hadacek@kde.org)

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
    Boston, MA 02111-1307, USA.
*/
#ifndef KSTDACCEL_H
#define KSTDACCEL_H

#include <qstring.h>

class QKeyEvent;

/**
 * Convenient methods for access to the common accelerator keys in
 * the key configuration. These are the standard keybindings that should
 * be used in all KDE applications. They will be configurable,
 * so do not hardcode the default behavior.
 *
 * If you want real configurable keybindings in your applications,
 * please checkout the class @ref KAccel in kaccel.h
 */
class KStdAccel
{
public:
  KStdAccel() {}

 	enum StdAccel { Open=0, New, Close, Save, Print, Quit, Cut, Copy,
			Paste, Undo, Redo, Find, Replace, Insert, Home, End, Prior,
			Next, Help, FindNext, FindPrev, ZoomIn, ZoomOut, AddBookmark,
			TextCompletion, RotateUp, RotateDown, PopupMenuContext,
			WhatThis, Reload, NB_STD_ACCELS
	};
	
  /**
   * Compare the keys generated by the key event with
   * the value of the integer.
   *
   * @return @p true if the
   * integer equivalent of the @ref QKeyEvent matches the value
   * of the integer. 
   *
   * NOTE: If a modifier (Shift, Alt, Ctrl)
   * key is present in @ref QKeyEvent, its sum with the actual
   * key value is used for comparing it with the integer
   * parameter.
   */
  static bool isEqual(QKeyEvent *, int);

  static uint key(StdAccel);

  static QString action(StdAccel);
  static QString description(StdAccel);
	
 private:
	 static uint defaultKey(StdAccel);
};

#endif
