dnl --------
dnl KSocketAddress/KExtendedSocket extra configuration
dnl --------
dnl
dnl This is to be merged with configure.in.in soon

dnl Don't check for getnameinfo and freeaddrinfo. If getaddrinfo is there,
dnl so are those two
AC_CHECK_FUNCS(inet_ntop inet_pton getpeername getsockname getsockopt gethostbyname2_r gethostbyname_r gethostbyname2)

AC_SUBST(HAVE_GETADDRINFO)
AC_SUBST(HAVE_BROKEN_GETADDRINFO)
AC_CHECK_FUNC(getaddrinfo,
  [
    AC_MSG_CHECKING([if getaddrinfo is broken])
    dnl At least one system has a bad implementation of getaddrinfo
    dnl FreeBSD"s libc getaddrinfo code has AF_UNIX disabled
    dnl This is rather stupid, but since it's there...
    AC_TRY_RUN(dnl
     [
        #include <sys/types.h>
        #include <sys/socket.h>
        #include <netdb.h>
       int main()
       {
         struct addrinfo hint, *res;
         int err;
         hint.ai_family = AF_UNSPEC;
         hint.ai_protocol = 0;
         hint.ai_socktype = SOCK_STREAM;
         hint.ai_flags = 0;
         err = getaddrinfo(0, "/tmp/conftest-sock", &hint, &res);
         if (err != 0 || res == 0 || res->ai_family != AF_UNIX)
           return 1;
         return 0;
       }
    ],
    [
      AC_MSG_RESULT(no)
      AC_DEFINE(HAVE_GETADDRINFO, 1, [Define if getaddrinfo is present and wor
ks])
    ],   
    [
      AC_MSG_RESULT(yes)
      AC_DEFINE(HAVE_BROKEN_GETADDRINFO, 1, [Define if getaddrinfo is broken])
    ],
    [
      case "$target" in
         *-*-freebsd*)
           AC_MSG_RESULT(assuming it is)
           AC_DEFINE(HAVE_BROKEN_GETADDRINFO, 2, [Define if getaddrinfo is broken])
           ;;
         *)
           AC_MSG_RESULT(assuming it is not)
           AC_DEFINE(HAVE_GETADDRINFO, 2, [Define if getaddrinfo is present and works])
           ;;
      esac
    ])
  ])

AC_SUBST(HAVE_SOCKADDR_SA_LEN)
AC_MSG_CHECKING([if struct sockaddr has member sa_len])
AC_TRY_COMPILE(
  [
    #include <sys/types.h>
    #include <sys/socket.h>
  ],
  [
    struct sockaddr sa;
    sa.sa_len = sizeof(sa);
  ],
  [
    AC_DEFINE(HAVE_SOCKADDR_SA_LEN,1,[Define if struct sockaddr has member sa_len])
    AC_MSG_RESULT(yes)
  ],
  AC_MSG_RESULT(no)
)

AC_SUBST(HAVE_SOCKADDR_IN6)
AC_SUBST(HAVE_SOCKADDR_IN6_SCOPE_ID)
AC_CHECK_HEADERS(netinet/in.h,
  [

    dnl Check for sockaddr_in6. We don't have to check for in6_addr
    dnl if sockaddr_in6 is there, so is in6_addr
    AC_MSG_CHECKING([for struct sockaddr_in6])
    AC_TRY_COMPILE(
      [
	#include <sys/types.h>
	#include <stdlib.h>
	#include <netinet/in.h>
      ],
      [
	struct sockaddr_in6 sin6;
      ],
      [
	AC_DEFINE(HAVE_SOCKADDR_IN6,1,[Define if we have struct sockaddr_in6 in netinet/in.h])
	AC_MSG_RESULT(yes)

	dnl Check if this system's sockaddr_in6 already supports sin6_scope_id
	dnl All systems should support it, but some still don't
	AC_MSG_CHECKING([if struct sockaddr_in6 has member sin6_scope_id])
	AC_TRY_COMPILE(
	  [
	    #include <sys/types.h>
	    #include <stdlib.h>
	    #include <netinet/in.h>
	  ],
	  [
	    struct sockaddr_in6 sin6;
	    sin6.sin6_scope_id = 0;
	  ],
	  [
	    AC_DEFINE(HAVE_SOCKADDR_IN6_SCOPE_ID,1,[Define if this system already has sin6_scope_id in sockaddr_in6])
	    AC_MSG_RESULT(yes)
	  ],
	  AC_MSG_RESULT(no)
	)
      ],
      AC_MSG_RESULT(no)
    )
  ]
)

dnl AC_OUTPUT(kdecore/kde-config.cpp)
