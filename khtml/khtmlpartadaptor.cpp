/*
 * This file was generated by dbusidl2cpp version 0.4
 * when processing input file org.kde.KHTMLPart.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 */

#include "khtmlpartadaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KHTMLPartAdaptor
 */

KHTMLPartAdaptor::KHTMLPartAdaptor(QObject *parent)
   : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KHTMLPartAdaptor::~KHTMLPartAdaptor()
{
    // destructor
}

bool KHTMLPartAdaptor::autoloadImages() const
{
    // get the value of property autoloadImages
    return qvariant_cast< bool >(parent()->property("autoloadImages"));
}

void KHTMLPartAdaptor::setAutoloadImages(bool value)
{
    // set the value of property autoloadImages
    parent()->setProperty("autoloadImages", value);
}

bool KHTMLPartAdaptor::dndEnabled() const
{
    // get the value of property dndEnabled
    return qvariant_cast< bool >(parent()->property("dndEnabled"));
}

void KHTMLPartAdaptor::setDndEnabled(bool value)
{
    // set the value of property dndEnabled
    parent()->setProperty("dndEnabled", value);
}

QString KHTMLPartAdaptor::encoding() const
{
    // get the value of property encoding
    return qvariant_cast< QString >(parent()->property("encoding"));
}

void KHTMLPartAdaptor::setEncoding(const QString &value)
{
    // set the value of property encoding
    parent()->setProperty("encoding", value);
}

bool KHTMLPartAdaptor::jScriptEnabled() const
{
    // get the value of property jScriptEnabled
    return qvariant_cast< bool >(parent()->property("jScriptEnabled"));
}

void KHTMLPartAdaptor::setJScriptEnabled(bool value)
{
    // set the value of property jScriptEnabled
    parent()->setProperty("jScriptEnabled", value);
}

bool KHTMLPartAdaptor::javaEnabled() const
{
    // get the value of property javaEnabled
    return qvariant_cast< bool >(parent()->property("javaEnabled"));
}

void KHTMLPartAdaptor::setJavaEnabled(bool value)
{
    // set the value of property javaEnabled
    parent()->setProperty("javaEnabled", value);
}

QString KHTMLPartAdaptor::lastModified() const
{
    // get the value of property lastModified
    return qvariant_cast< QString >(parent()->property("lastModified"));
}

bool KHTMLPartAdaptor::metaRefreshEnabled() const
{
    // get the value of property metaRefreshEnabled
    return qvariant_cast< bool >(parent()->property("metaRefreshEnabled"));
}

void KHTMLPartAdaptor::setMetaRefreshEnabled(bool value)
{
    // set the value of property metaRefreshEnabled
    parent()->setProperty("metaRefreshEnabled", value);
}

bool KHTMLPartAdaptor::onlyLocalReferences() const
{
    // get the value of property onlyLocalReferences
    return qvariant_cast< bool >(parent()->property("onlyLocalReferences"));
}

void KHTMLPartAdaptor::setOnlyLocalReferences(bool value)
{
    // set the value of property onlyLocalReferences
    parent()->setProperty("onlyLocalReferences", value);
}

bool KHTMLPartAdaptor::pluginsEnabled() const
{
    // get the value of property pluginsEnabled
    return qvariant_cast< bool >(parent()->property("pluginsEnabled"));
}

void KHTMLPartAdaptor::setPluginsEnabled(bool value)
{
    // set the value of property pluginsEnabled
    parent()->setProperty("pluginsEnabled", value);
}

QString KHTMLPartAdaptor::url() const
{
    // get the value of property url
    return qvariant_cast< QString >(parent()->property("url"));
}

void KHTMLPartAdaptor::activateNode()
{
    // handle method call org.kde.KHTMLPart.activateNode
    QMetaObject::invokeMethod(parent(), "activateNode");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->activateNode();
}

bool KHTMLPartAdaptor::closeUrl()
{
    // handle method call org.kde.KHTMLPart.closeUrl
    bool out0;
    QMetaObject::invokeMethod(parent(), "closeUrl", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->closeUrl();
    return out0;
}

void KHTMLPartAdaptor::debugDOMTree()
{
    // handle method call org.kde.KHTMLPart.debugDOMTree
    QMetaObject::invokeMethod(parent(), "debugDOMTree");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->debugDOMTree();
}

void KHTMLPartAdaptor::debugRenderTree()
{
    // handle method call org.kde.KHTMLPart.debugRenderTree
    QMetaObject::invokeMethod(parent(), "debugRenderTree");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->debugRenderTree();
}

QString KHTMLPartAdaptor::evalJS(const QString &script)
{
    // handle method call org.kde.KHTMLPart.evalJS
    QString result;
    QMetaObject::invokeMethod(parent(), "evalJS", Q_RETURN_ARG(QString, result), Q_ARG(QString, script));

    // Alternative:
    //result = static_cast<YourObjectType *>(parent())->evalJS(script);
    return result;
}

bool KHTMLPartAdaptor::gotoAnchor(const QString &name)
{
    // handle method call org.kde.KHTMLPart.gotoAnchor
    bool out0;
    QMetaObject::invokeMethod(parent(), "gotoAnchor", Q_RETURN_ARG(bool, out0), Q_ARG(QString, name));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->gotoAnchor(name);
    return out0;
}

bool KHTMLPartAdaptor::nextAnchor()
{
    // handle method call org.kde.KHTMLPart.nextAnchor
    bool out0;
    QMetaObject::invokeMethod(parent(), "nextAnchor", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->nextAnchor();
    return out0;
}

bool KHTMLPartAdaptor::prevAnchor()
{
    // handle method call org.kde.KHTMLPart.prevAnchor
    bool out0;
    QMetaObject::invokeMethod(parent(), "prevAnchor", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->prevAnchor();
    return out0;
}

void KHTMLPartAdaptor::print(bool quick)
{
    // handle method call org.kde.KHTMLPart.print
    QMetaObject::invokeMethod(parent(), "print", Q_ARG(bool, quick));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->print(quick);
}

void KHTMLPartAdaptor::saveBackground(const QString &url)
{
    // handle method call org.kde.KHTMLPart.saveBackground
    QMetaObject::invokeMethod(parent(), "saveBackground", Q_ARG(QString, url));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->saveBackground(url);
}

void KHTMLPartAdaptor::saveDocument(const QString &url)
{
    // handle method call org.kde.KHTMLPart.saveDocument
    QMetaObject::invokeMethod(parent(), "saveDocument", Q_ARG(QString, url));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->saveDocument(url);
}

void KHTMLPartAdaptor::selectAll()
{
    // handle method call org.kde.KHTMLPart.selectAll
    QMetaObject::invokeMethod(parent(), "selectAll");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->selectAll();
}

QString KHTMLPartAdaptor::selectedText()
{
    // handle method call org.kde.KHTMLPart.selectedText
    QString out0;
    QMetaObject::invokeMethod(parent(), "selectedText", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->selectedText();
    return out0;
}

void KHTMLPartAdaptor::setFixedFont(const QString &name)
{
    // handle method call org.kde.KHTMLPart.setFixedFont
    QMetaObject::invokeMethod(parent(), "setFixedFont", Q_ARG(QString, name));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setFixedFont(name);
}

void KHTMLPartAdaptor::setUserStyleSheet(const QString &styleSheet)
{
    // handle method call org.kde.KHTMLPart.setUserStyleSheet
    QMetaObject::invokeMethod(parent(), "setUserStyleSheet", Q_ARG(QString, styleSheet));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setUserStyleSheet(styleSheet);
}

void KHTMLPartAdaptor::stopAnimations()
{
    // handle method call org.kde.KHTMLPart.stopAnimations
    QMetaObject::invokeMethod(parent(), "stopAnimations");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->stopAnimations();
}

void KHTMLPartAdaptor::viewDocumentSource()
{
    // handle method call org.kde.KHTMLPart.viewDocumentSource
    QMetaObject::invokeMethod(parent(), "viewDocumentSource");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->viewDocumentSource();
}

void KHTMLPartAdaptor::viewFrameSource()
{
    // handle method call org.kde.KHTMLPart.viewFrameSource
    QMetaObject::invokeMethod(parent(), "viewFrameSource");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->viewFrameSource();
}


#include "khtmlpartadaptor.moc"
