Some thoughts about khtml's new arcitecture:

Old HTML*Impl classes will be split so that all layouting and
rendering methods (layout(), updateSize(), calcMinMaxWidth(),
setAvailableWidth(),  print(), printObject()...) will be moved to
new rendering classes. There will be a  rendering class for each
value of css2 'display' attribute. Some others (#text, replaced
elements...) will also get their own rendering classes.

All attribute values used for layouting and rendering are kept in
the style objects. Style objects are implemented as copy-on-write
objects. The values are shared with the styles parent style as long
as no values are changed. The values are divided to groups (fe.
base, box, border, table...) and when a value in a group is changed,
that groups data object is copied.

The base parent style is defined by the documents style sheet, or
document types default style sheet. This style is then used as a
base for element specific styles and these are futher modified by
local style definitions, element attributes or by  scripts. Every
dom element has a pointer to its style object.

Every rendered DOM object has a pointer to a rendering object.  When
a HTML DOM  object is added to the document tree, it gets a style
object that matches its class,  parses its attributes and modifies
the style object accordingly. Then it sends the style object to its
parent elements rendering object. The rendering object reads the
value of 'display' and constructs and adds a suitable child
rendering object(s).  The pointer to created rendering object is
returned to the HTML DOM element, and  it stores this pointer.

The laytouting and rendering in the rendering tree works pretty much
as it used to with *Impl objects. In the beginning of layout()
frequently accessed attribute values  may be fetched and temporaliry
stored to the rendering object. In the end the possible calculated
attribute values are stored back to the style object.

Scripting and event are done in the DOM (not rendering) tree. The
DOM objects may for example ask element position from their
rendering objects to invoke  mouse events. Modification to element
attributes by a script are done by modifying the elements style
object. Similary, the attribute values can be read from the  style
object. However if value of elements 'display' attribute is changed,
the rendering tree must be at least partially reconstructed.

/// Replaced elements? Text elements?


  Antti 
  
    

Example:

<html> 
    <head> 
    	<style> P { color: red } </style> 
    </head> 
    <body> 
    	<p align=center> Jee </p> 
    </body>
</html>

The default style for the p element is defined by the html4 default
stylesheet. The document stylesheet modifies this default style.

    Style* pStyle = new Style( defaultStyleSheet->style("P") );
    pStyle->setColor(QT::Red); docStyleSheet->setStyle("P",pStyle);

When the DOM P element is constructed it gets the document 
style for P

    _style = docStyleSheet->styleFor("P");

The element attributes modify this style object further

    _style->setTextAlign(CENTER);

This style object is then passed to nodes partent's (BODY) rendering
object, which constructs the rendering object for the P element.

    _parent->renderer()->add(_style);





    


